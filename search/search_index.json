{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Django\u5b66\u4e60\u5de5\u5177 # ''' ____ _ __ __ _ | _ \\(_) __ _ _ __ __ _ ___ \\ \\ / /__| |__ | | | | |/ _` | '_ \\ / _` |/ _ \\ \\ \\ /\\ / / _ \\ '_ \\ | |_| | | (_| | | | | (_| | (_) | \\ V V / __/ |_) | |____// |\\__,_|_| |_|\\__, |\\___/ \\_/\\_/ \\___|_.__/ |__/ |___/ ''' Python\u4e0b\u6709\u8bb8\u591a\u6b3e\u4e0d\u540c\u7684 Web \u6846\u67b6\u3002Django\u662f\u91cd\u91cf\u7ea7\u9009\u624b\u4e2d\u6700\u6709\u4ee3\u8868\u6027\u7684\u4e00\u4f4d\u3002\u8bb8\u591a\u6210\u529f\u7684\u7f51\u7ad9\u548cAPP\u90fd\u57fa\u4e8eDjango\u3002 Django\u662f\u4e00\u4e2a\u5f00\u653e\u6e90\u4ee3\u7801\u7684Web\u5e94\u7528\u6846\u67b6\uff0c\u7531Python\u5199\u6210\u3002 Django\u9075\u5b88BSD\u7248\u6743\uff0c\u521d\u6b21\u53d1\u5e03\u4e8e2005\u5e747\u6708, \u5e76\u4e8e2008\u5e749\u6708\u53d1\u5e03\u4e86\u7b2c\u4e00\u4e2a\u6b63\u5f0f\u7248\u672c1.0 \u3002 Django\u91c7\u7528\u4e86MVT\u7684\u8f6f\u4ef6\u8bbe\u8ba1\u6a21\u5f0f\u3002","title":"\u7b80\u4ecb"},{"location":"#django","text":"''' ____ _ __ __ _ | _ \\(_) __ _ _ __ __ _ ___ \\ \\ / /__| |__ | | | | |/ _` | '_ \\ / _` |/ _ \\ \\ \\ /\\ / / _ \\ '_ \\ | |_| | | (_| | | | | (_| | (_) | \\ V V / __/ |_) | |____// |\\__,_|_| |_|\\__, |\\___/ \\_/\\_/ \\___|_.__/ |__/ |___/ ''' Python\u4e0b\u6709\u8bb8\u591a\u6b3e\u4e0d\u540c\u7684 Web \u6846\u67b6\u3002Django\u662f\u91cd\u91cf\u7ea7\u9009\u624b\u4e2d\u6700\u6709\u4ee3\u8868\u6027\u7684\u4e00\u4f4d\u3002\u8bb8\u591a\u6210\u529f\u7684\u7f51\u7ad9\u548cAPP\u90fd\u57fa\u4e8eDjango\u3002 Django\u662f\u4e00\u4e2a\u5f00\u653e\u6e90\u4ee3\u7801\u7684Web\u5e94\u7528\u6846\u67b6\uff0c\u7531Python\u5199\u6210\u3002 Django\u9075\u5b88BSD\u7248\u6743\uff0c\u521d\u6b21\u53d1\u5e03\u4e8e2005\u5e747\u6708, \u5e76\u4e8e2008\u5e749\u6708\u53d1\u5e03\u4e86\u7b2c\u4e00\u4e2a\u6b63\u5f0f\u7248\u672c1.0 \u3002 Django\u91c7\u7528\u4e86MVT\u7684\u8f6f\u4ef6\u8bbe\u8ba1\u6a21\u5f0f\u3002","title":"Django\u5b66\u4e60\u5de5\u5177"},{"location":"django%20rest%20framework/01%20Restful%E8%A7%84%E8%8C%83/","text":"Restful\u89c4\u8303 # Web API\u63a5\u53e3 # \u4ec0\u4e48\u662f\u63a5\u53e3 # \u89c4\u5b9a\u4e86\u63d0\u4ea4\u53c2\u6570\u7684\u8bf7\u6c42\u65b9\u5f0f\uff0c\u8bbf\u95ee \u5176\u53ef\u4ee5\u83b7\u53d6\u54cd\u5e94\u7684\u53cd\u9988\u6570\u636e\u7684url\u94fe\u63a5 \u5305\u542b\u4e86\u56db\u90e8\u5206\uff1a url\u94fe\u63a5 + \u8bf7\u6c42\u65b9\u5f0f + \u8bf7\u6c42\u53c2\u6570 + \u54cd\u5e94\u6570\u636e url: \u957f\u5f97\u50cf\u8fd4\u56de\u6570\u636e\u7684url\u94fe\u63a5 https://api.map.baidu.com/place/v2/search \u8bf7\u6c42\u65b9\u5f0f: get post put patch delete \u8bf7\u6c42\u53c2\u6570: json\u6216xml\u683c\u5f0f\u7684key-value\u7c7b\u578b\u6570\u636e ak: 124524542EJbhbuH899 regin: \u4e0a\u6d77 query: \u5927\u672c\u8425 output: json \u54cd\u5e94\u7ed3\u679c: json\u6216xml\u683c\u5f0f\u7684\u6570\u636e \u4e0a\u65b9\u8bf7\u6c42\u53c2\u6570\u7684output\u53c2\u6570\u503c\u51b3\u5b9a\u4e86\u54cd\u5e94\u6570\u636e\u7684\u683c\u5f0f { \"status\" : 0 , \"message\" : \"ok\" , \"results\" : [ { \"name\" : \"\u5927\u672c\u8425\" , \"location\" : { \"lat\" : 31.45346 , \"lng\" : 146.23423 }, \"address\" : \"\u672c\u73af\u8def123\u53f7\" , \"province\" : \"\u4e0a\u6d77\u5e02\" , } ...... ] } \u63a5\u53e3\u6587\u6863\u7684\u7f16\u5199:YApi # YApi \u662f\u53bb\u54ea\u513f\u7f51\u524d\u6bb5\u8ba1\u6570\u4e2d\u5fc3\u7684\u4e00\u4e2a\u5f00\u6e90\u53ef\u89c6\u5316 \u63a5\u53e3\u7ba1\u7406\u5e73\u53f0. \u8be6\u60c5\u89c1 \u5b98\u65b9\u6587\u6863 \u63a5\u53e3\u6d4b\u8bd5\u5de5\u5177: Postman # Postman\u662f\u4e00\u6b3e\u63a5\u53e3\u8c03\u8bd5\u5de5\u5177, \u652f\u6301\u591a\u64cd\u4f5c\u7cfb\u7edf\u5e73\u53f0, \u662f\u6d4b\u8bd5\u63a5\u53e3\u7684\u9996\u9009\u5de5\u5177 \u53ef\u4ee5\u5728 \u5b98\u7f51 \u4e0b\u8f7d\u4f7f\u7528 \u63a8\u8350Postman\u7684\u5f00\u6e90\u4ee3\u66ff\u54c1: Postwoman Restful\u63a5\u53e3\u89c4\u8303 # RESTful \u662f\u76ee\u524d\u6700\u6d41\u884c\u7684 API \u8bbe\u8ba1\u89c4\u8303\uff0c\u7528\u4e8e Web \u6570\u636e\u63a5\u53e3\u7684\u8bbe\u8ba1\u3002 url\u8bbe\u8ba1 # 1\u3001\u4fdd\u969c\u6570\u636e\u5b89\u5168 # \u63a5\u53e3\u90fd\u662f\u64cd\u4f5c\u524d\u540e\u7aef\u6570\u636e\u7684, \u4e3a\u4e86\u4fdd\u8bc1\u6570\u636e\u7684\u5b89\u5168, \u91c7\u7528https\u534f\u8bae 2\u3001\u63a5\u53e3\u7279\u5f81\u8868\u73b0 # \u63a5\u53e3\u7528\u6765\u64cd\u4f5c\u6570\u636e, \u4e0e\u7f51\u5740\u6709\u533a\u522b, \u6240\u6709\u7528\u7279\u5b9a\u7684\u5173\u952e\u5b57\u8868\u793a\u63a5\u53e3 https://api.baidu.com https://www.baidu.com/api 3\u3001\u591a\u7248\u672c\u8d44\u6e90\u5171\u5b58 # \u5982\u679c\u4e00\u4e2a\u8d44\u6e90\u5b58\u5728\u591a\u7248\u672c\u7ed3\u679c, \u5728url\u94fe\u63a5\u4e2d\u8981\u7528\u7279\u5b9a\u7b26\u53f7\u6765\u517c\u5bb9\u591a\u7248\u672c\u5171\u5b58 https://api.baidu.com/v1/books/ https://api.baidu.com/v2/books/ 4\u3001\u6570\u636e\u5c31\u662f\u8d44\u6e90 # \u63a5\u53e3\u64cd\u4f5c\u7684\u6570\u636e\u79f0\u4e4b\u4e3a\u8d44\u6e90, \u5728url\u4e2d\u4f53\u73b0 \u8d44\u6e90\u7684\u540d\u79f0, \u4e0d\u80fd\u4f53\u73b0\u64cd\u4f5c\u8d44\u6e90\u7684\u52a8\u8bcd, \u9519\u8bef\u793a\u8303: https://api.baidu.com/get_books \u5e38\u89c4\u8d44\u6e90\u63a5\u53e3 https://api.baidu.com/books/ https://api.baidu.com/books/(pk)/ \u975e\u5e38\u89c4\u63a5\u53e3 \u548c\u67d0\u8d44\u6e90\u4e0d\u662f\u7279\u522b\u5bc6\u5207\u6216\u662f\u4e0d\u6b62\u4e00\u79cd\u8d44\u6e90 https://api.baidu.com/login/ https://api.baidu.com/place/search/ 5\u3001\u7fa4\u8d44\u6e90\u64cd\u4f5c # \u4e00\u822c\u8fd8\u6709\u989d\u5916\u7684\u9650\u5236\u6761\u4ef6, \u5982\u6392\u5e8f\u3001\u9650\u5236\u8c03\u8bd5\u3001\u5206\u9875\u7b49 https://api.baidu.com/v1/books/?ordering=-price&limit=3 \u8fd9\u8ba9\u4eba\u5c31\u77e5\u9053 \u641c\u7d22\u4ef7\u683c\u6700\u8d35\u7684\u524d\u4e09\u672c\u4e66 6\u3001\u8d44\u6e90\u64cd\u4f5c\u7531\u8bf7\u6c42\u65b9\u5f0f\u51b3\u5b9a # get \u83b7\u53d6\u5355\u4e2a\u6216\u591a\u4e2a\u8d44\u6e90 https://api.baidu.com/books/ \u7fa4\u67e5\uff0c\u8fd4\u56de\u591a\u4e2a\u7ed3\u679c\u5bf9\u8c61 https://api.baidu.com/books/(pk)/ \u5355\u67e5\uff0c\u8fd4\u56de\u5355\u4e2a\u7ed3\u679c\u5bf9\u8c61 post \u65b0\u589e\u5355\u4e2a\u6216\u591a\u4e2a\u8d44\u6e90 https://api.baidu.com/books/ \u5355\u589e \u63d0\u4ea4\u5355\u4e2a\u6570\u636e\u5b57\u5178, \u5b8c\u6210\u5355\u589e, \u8fd4\u56de\u5355\u4e2a\u7ed3\u679c\u5bf9\u8c61 \u7fa4\u589e \u63d0\u4f9b\u591a\u4e2a\u6570\u636e\u5b57\u5178\u7684\u6570\u7ec4, \u5b8c\u6210\u7fa4\u589e, \u8fd4\u56de\u591a\u4e2a\u7ed3\u679c\u5bf9\u8c61 put \u6574\u4f53\u4fee\u6539\u5355\u4e2a\u6216\u591a\u4e2a\u8d44\u6e90 https://api.baidu.com/books/ \u6574\u4f53\u4fee\u6539\u591a\u4e2a, \u63d0\u4f9b\u591a\u4e2a\u6570\u636e\u5b57\u5178\u7684\u6570\u7ec4(\u6570\u636e\u5b57\u5178\u4e2d\u5305\u542b\u4e3b\u952e), \u5b8c\u6210\u6574\u4f53\u591a\u4e2a\u4fee\u6539,\u8fd4\u56de\u5bf9\u4e2a\u7ed3\u679c\u5bf9\u8c61 https://api.baidu.com/books/(pk)/ \u6574\u4f53\u4fee\u6539\u5355\u4e2a, \u63d0\u4f9b\u5355\u4e2a\u6570\u636e\u5b57\u5178(\u4e3b\u952e\u5728url\u4e2d\u4f53\u73b0), \u5b8c\u6210\u6574\u4f53\u5355\u4e2a\u4fee\u6539, \u8fd4\u56de\u5355\u4e2a\u7ed3\u679c\u5bf9\u8c61s patch \u5c40\u90e8\u4fee\u6539\u5355\u4e2a\u6216\u591a\u4e2a\u8d44\u6e90 \u65b9\u5f0f\u4e0eput\u76f8\u540c, \u4e0d\u540c\u7684\u662f \u64cd\u4f5c\u7684\u8d44\u6e90\u5982\u679c\u67095\u4e2akey-value\u952e\u503c\u5bf9, put\u8bf7\u6c42\u63d0\u4f9b\u7684\u5b57\u5178\u5fc5\u987b\u5168\u5305\u542b, \u4f46\u662fpatch\u63d0\u4f9b\u7684\u5b57\u5178\u5305\u542b\u7684\u952e\u503c\u5bf90-5\u4e2a\u90fd\u53ef\u4ee5 \uff0c\u4e00\u822c\u7528patch delete \u5220\u9664\u5355\u4e2a\u6216\u591a\u4e2a\u8d44\u6e90 https://api.baidu.com/books/ \u591a\u5220, \u63d0\u4f9b\u591a\u4e2a\u8d44\u6e90\u4e3b\u952e\u6570\u636e, \u5b8c\u6210\u7fa4\u5220, \u4e0d\u505a\u4efb\u4f55\u8d44\u6e90\u7684\u8fd4\u56de, \u4e00\u822c\u8fd4\u56de\u7684\u7ed3\u679c\u5c31\u662f: \u6210\u529f\u6216\u5931\u8d25 https://api.baidu.com/books/(pk)/ \u5355\u5220, \u4e0d\u9700\u8981\u63d0\u4f9b\u989d\u5916\u6570\u636e, \u5b8c\u6210\u5355\u5220, \u4e0d\u505a\u8d44\u6e90\u7684\u8fd4\u56de \u54cd\u5e94\u7ed3\u679c # 1\u3001\u54cd\u5e94\u5bf9\u8c61\u4e2d\u8981\u5305\u542b\u7f51\u7edc\u72b6\u6001\u7801(\u7f51\u7edc\u72b6\u6001\u4fe1\u606f\u548c\u7f51\u7edc\u72b6\u6001\u7801\u6346\u7ed1\u51fa\u73b0, \u4e0d\u8981\u989d\u5916\u8bbe\u7f6e) # 1xx: \u57fa\u672c\u4fe1\u606f 2xx \u6210\u529f 200 \u5e38\u89c4\u8bf7\u6c42 \u6210\u529f 201 \u521b\u5efa\u6210\u529f 3xx \u91cd\u5b9a\u5411 4xx \u5ba2\u6237\u7aef \u9519\u8bef 400 \u9519\u8bef\u8bf7\u6c42 403 \u8bf7\u6c42\u65e0\u6743\u9650 404 \u8bf7\u6c42\u8d44\u6e90\u4e0d\u5b58\u5728 5xx \u670d\u52a1\u5668\u9519\u8bef 500 2\u3001\u6570\u636e\u72b6\u6001\u7801 (\u4e00\u822c\u662f\u524d\u540e\u7aef\u7ea6\u5b9a\u89c4\u5219) # \u5982: 0: \u6210\u529f 1: \u5931\u8d25 1xx \u5177\u4f53\u5931\u8d25\u4fe1\u606f \u8981\u5728\u63a5\u53e3\u6587\u6863\u4e2d\u660e\u786e\u5199\u51fa 2: \u65e0\u6570\u636e 2xx \u5177\u4f53\u65e0\u6570\u636e\u4fe1\u606f 3\u3001\u6570\u636e\u72b6\u6001\u4fe1\u606f # \u4e00\u822c\u4e0d\u4ec5\u4ec5\u662f\u5bf9\u6570\u636e\u72b6\u6001\u7801\u7684\u89e3\u91ca, \u66f4\u591a\u7684\u662f\u5bf9\u7ed3\u679c\u7684\u63cf\u8ff0, \u7ed9\u524d\u7aef\u5f00\u53d1\u8005\u9605\u8bfb { \"status\" : 0 , \"message\" : \"ok\" , \"results\" : [ { \"name\" : \"\u5927\u672c\u8425\" , \"location\" : { \"lat\" : 31.45346 , \"lng\" : 146.23423 }, \"address\" : \"\u672c\u73af\u8def123\u53f7\" , \"province\" : \"\u4e0a\u6d77\u5e02\" , } ...... ] } 4\u3001\u6570\u636e\u7ed3\u679c # \u4e00\u822c\u662f\u6570\u7ec4 \u5b57\u5178\u5f62\u5f0f, \u5982\u679c\u6709\u5b50\u8d44\u6e90(\u56fe\u7247 \u89c6\u9891 \u97f3\u9891), \u8fd4\u56de\u8d44\u6e90\u7684url\u94fe\u63a5 { \"status\" : 0 , \"msg\" : \"ok\" , \"results\" : [ { \"name\" : \"\u5c0f\u738b\u5b50\" , \"img\" : \"https://api.baidu.com/media/books/1.jpg\" } ] }","title":"01 Restful\u89c4\u8303"},{"location":"django%20rest%20framework/01%20Restful%E8%A7%84%E8%8C%83/#restful","text":"","title":"Restful\u89c4\u8303"},{"location":"django%20rest%20framework/01%20Restful%E8%A7%84%E8%8C%83/#web-api","text":"","title":"Web API\u63a5\u53e3"},{"location":"django%20rest%20framework/01%20Restful%E8%A7%84%E8%8C%83/#_1","text":"\u89c4\u5b9a\u4e86\u63d0\u4ea4\u53c2\u6570\u7684\u8bf7\u6c42\u65b9\u5f0f\uff0c\u8bbf\u95ee \u5176\u53ef\u4ee5\u83b7\u53d6\u54cd\u5e94\u7684\u53cd\u9988\u6570\u636e\u7684url\u94fe\u63a5 \u5305\u542b\u4e86\u56db\u90e8\u5206\uff1a url\u94fe\u63a5 + \u8bf7\u6c42\u65b9\u5f0f + \u8bf7\u6c42\u53c2\u6570 + \u54cd\u5e94\u6570\u636e url: \u957f\u5f97\u50cf\u8fd4\u56de\u6570\u636e\u7684url\u94fe\u63a5 https://api.map.baidu.com/place/v2/search \u8bf7\u6c42\u65b9\u5f0f: get post put patch delete \u8bf7\u6c42\u53c2\u6570: json\u6216xml\u683c\u5f0f\u7684key-value\u7c7b\u578b\u6570\u636e ak: 124524542EJbhbuH899 regin: \u4e0a\u6d77 query: \u5927\u672c\u8425 output: json \u54cd\u5e94\u7ed3\u679c: json\u6216xml\u683c\u5f0f\u7684\u6570\u636e \u4e0a\u65b9\u8bf7\u6c42\u53c2\u6570\u7684output\u53c2\u6570\u503c\u51b3\u5b9a\u4e86\u54cd\u5e94\u6570\u636e\u7684\u683c\u5f0f { \"status\" : 0 , \"message\" : \"ok\" , \"results\" : [ { \"name\" : \"\u5927\u672c\u8425\" , \"location\" : { \"lat\" : 31.45346 , \"lng\" : 146.23423 }, \"address\" : \"\u672c\u73af\u8def123\u53f7\" , \"province\" : \"\u4e0a\u6d77\u5e02\" , } ...... ] }","title":"\u4ec0\u4e48\u662f\u63a5\u53e3"},{"location":"django%20rest%20framework/01%20Restful%E8%A7%84%E8%8C%83/#yapi","text":"YApi \u662f\u53bb\u54ea\u513f\u7f51\u524d\u6bb5\u8ba1\u6570\u4e2d\u5fc3\u7684\u4e00\u4e2a\u5f00\u6e90\u53ef\u89c6\u5316 \u63a5\u53e3\u7ba1\u7406\u5e73\u53f0. \u8be6\u60c5\u89c1 \u5b98\u65b9\u6587\u6863","title":"\u63a5\u53e3\u6587\u6863\u7684\u7f16\u5199:YApi"},{"location":"django%20rest%20framework/01%20Restful%E8%A7%84%E8%8C%83/#postman","text":"Postman\u662f\u4e00\u6b3e\u63a5\u53e3\u8c03\u8bd5\u5de5\u5177, \u652f\u6301\u591a\u64cd\u4f5c\u7cfb\u7edf\u5e73\u53f0, \u662f\u6d4b\u8bd5\u63a5\u53e3\u7684\u9996\u9009\u5de5\u5177 \u53ef\u4ee5\u5728 \u5b98\u7f51 \u4e0b\u8f7d\u4f7f\u7528 \u63a8\u8350Postman\u7684\u5f00\u6e90\u4ee3\u66ff\u54c1: Postwoman","title":"\u63a5\u53e3\u6d4b\u8bd5\u5de5\u5177:  Postman"},{"location":"django%20rest%20framework/01%20Restful%E8%A7%84%E8%8C%83/#restful_1","text":"RESTful \u662f\u76ee\u524d\u6700\u6d41\u884c\u7684 API \u8bbe\u8ba1\u89c4\u8303\uff0c\u7528\u4e8e Web \u6570\u636e\u63a5\u53e3\u7684\u8bbe\u8ba1\u3002","title":"Restful\u63a5\u53e3\u89c4\u8303"},{"location":"django%20rest%20framework/01%20Restful%E8%A7%84%E8%8C%83/#url","text":"","title":"url\u8bbe\u8ba1"},{"location":"django%20rest%20framework/01%20Restful%E8%A7%84%E8%8C%83/#1","text":"\u63a5\u53e3\u90fd\u662f\u64cd\u4f5c\u524d\u540e\u7aef\u6570\u636e\u7684, \u4e3a\u4e86\u4fdd\u8bc1\u6570\u636e\u7684\u5b89\u5168, \u91c7\u7528https\u534f\u8bae","title":"1\u3001\u4fdd\u969c\u6570\u636e\u5b89\u5168"},{"location":"django%20rest%20framework/01%20Restful%E8%A7%84%E8%8C%83/#2","text":"\u63a5\u53e3\u7528\u6765\u64cd\u4f5c\u6570\u636e, \u4e0e\u7f51\u5740\u6709\u533a\u522b, \u6240\u6709\u7528\u7279\u5b9a\u7684\u5173\u952e\u5b57\u8868\u793a\u63a5\u53e3 https://api.baidu.com https://www.baidu.com/api","title":"2\u3001\u63a5\u53e3\u7279\u5f81\u8868\u73b0"},{"location":"django%20rest%20framework/01%20Restful%E8%A7%84%E8%8C%83/#3","text":"\u5982\u679c\u4e00\u4e2a\u8d44\u6e90\u5b58\u5728\u591a\u7248\u672c\u7ed3\u679c, \u5728url\u94fe\u63a5\u4e2d\u8981\u7528\u7279\u5b9a\u7b26\u53f7\u6765\u517c\u5bb9\u591a\u7248\u672c\u5171\u5b58 https://api.baidu.com/v1/books/ https://api.baidu.com/v2/books/","title":"3\u3001\u591a\u7248\u672c\u8d44\u6e90\u5171\u5b58"},{"location":"django%20rest%20framework/01%20Restful%E8%A7%84%E8%8C%83/#4","text":"\u63a5\u53e3\u64cd\u4f5c\u7684\u6570\u636e\u79f0\u4e4b\u4e3a\u8d44\u6e90, \u5728url\u4e2d\u4f53\u73b0 \u8d44\u6e90\u7684\u540d\u79f0, \u4e0d\u80fd\u4f53\u73b0\u64cd\u4f5c\u8d44\u6e90\u7684\u52a8\u8bcd, \u9519\u8bef\u793a\u8303: https://api.baidu.com/get_books \u5e38\u89c4\u8d44\u6e90\u63a5\u53e3 https://api.baidu.com/books/ https://api.baidu.com/books/(pk)/ \u975e\u5e38\u89c4\u63a5\u53e3 \u548c\u67d0\u8d44\u6e90\u4e0d\u662f\u7279\u522b\u5bc6\u5207\u6216\u662f\u4e0d\u6b62\u4e00\u79cd\u8d44\u6e90 https://api.baidu.com/login/ https://api.baidu.com/place/search/","title":"4\u3001\u6570\u636e\u5c31\u662f\u8d44\u6e90"},{"location":"django%20rest%20framework/01%20Restful%E8%A7%84%E8%8C%83/#5","text":"\u4e00\u822c\u8fd8\u6709\u989d\u5916\u7684\u9650\u5236\u6761\u4ef6, \u5982\u6392\u5e8f\u3001\u9650\u5236\u8c03\u8bd5\u3001\u5206\u9875\u7b49 https://api.baidu.com/v1/books/?ordering=-price&limit=3 \u8fd9\u8ba9\u4eba\u5c31\u77e5\u9053 \u641c\u7d22\u4ef7\u683c\u6700\u8d35\u7684\u524d\u4e09\u672c\u4e66","title":"5\u3001\u7fa4\u8d44\u6e90\u64cd\u4f5c"},{"location":"django%20rest%20framework/01%20Restful%E8%A7%84%E8%8C%83/#6","text":"get \u83b7\u53d6\u5355\u4e2a\u6216\u591a\u4e2a\u8d44\u6e90 https://api.baidu.com/books/ \u7fa4\u67e5\uff0c\u8fd4\u56de\u591a\u4e2a\u7ed3\u679c\u5bf9\u8c61 https://api.baidu.com/books/(pk)/ \u5355\u67e5\uff0c\u8fd4\u56de\u5355\u4e2a\u7ed3\u679c\u5bf9\u8c61 post \u65b0\u589e\u5355\u4e2a\u6216\u591a\u4e2a\u8d44\u6e90 https://api.baidu.com/books/ \u5355\u589e \u63d0\u4ea4\u5355\u4e2a\u6570\u636e\u5b57\u5178, \u5b8c\u6210\u5355\u589e, \u8fd4\u56de\u5355\u4e2a\u7ed3\u679c\u5bf9\u8c61 \u7fa4\u589e \u63d0\u4f9b\u591a\u4e2a\u6570\u636e\u5b57\u5178\u7684\u6570\u7ec4, \u5b8c\u6210\u7fa4\u589e, \u8fd4\u56de\u591a\u4e2a\u7ed3\u679c\u5bf9\u8c61 put \u6574\u4f53\u4fee\u6539\u5355\u4e2a\u6216\u591a\u4e2a\u8d44\u6e90 https://api.baidu.com/books/ \u6574\u4f53\u4fee\u6539\u591a\u4e2a, \u63d0\u4f9b\u591a\u4e2a\u6570\u636e\u5b57\u5178\u7684\u6570\u7ec4(\u6570\u636e\u5b57\u5178\u4e2d\u5305\u542b\u4e3b\u952e), \u5b8c\u6210\u6574\u4f53\u591a\u4e2a\u4fee\u6539,\u8fd4\u56de\u5bf9\u4e2a\u7ed3\u679c\u5bf9\u8c61 https://api.baidu.com/books/(pk)/ \u6574\u4f53\u4fee\u6539\u5355\u4e2a, \u63d0\u4f9b\u5355\u4e2a\u6570\u636e\u5b57\u5178(\u4e3b\u952e\u5728url\u4e2d\u4f53\u73b0), \u5b8c\u6210\u6574\u4f53\u5355\u4e2a\u4fee\u6539, \u8fd4\u56de\u5355\u4e2a\u7ed3\u679c\u5bf9\u8c61s patch \u5c40\u90e8\u4fee\u6539\u5355\u4e2a\u6216\u591a\u4e2a\u8d44\u6e90 \u65b9\u5f0f\u4e0eput\u76f8\u540c, \u4e0d\u540c\u7684\u662f \u64cd\u4f5c\u7684\u8d44\u6e90\u5982\u679c\u67095\u4e2akey-value\u952e\u503c\u5bf9, put\u8bf7\u6c42\u63d0\u4f9b\u7684\u5b57\u5178\u5fc5\u987b\u5168\u5305\u542b, \u4f46\u662fpatch\u63d0\u4f9b\u7684\u5b57\u5178\u5305\u542b\u7684\u952e\u503c\u5bf90-5\u4e2a\u90fd\u53ef\u4ee5 \uff0c\u4e00\u822c\u7528patch delete \u5220\u9664\u5355\u4e2a\u6216\u591a\u4e2a\u8d44\u6e90 https://api.baidu.com/books/ \u591a\u5220, \u63d0\u4f9b\u591a\u4e2a\u8d44\u6e90\u4e3b\u952e\u6570\u636e, \u5b8c\u6210\u7fa4\u5220, \u4e0d\u505a\u4efb\u4f55\u8d44\u6e90\u7684\u8fd4\u56de, \u4e00\u822c\u8fd4\u56de\u7684\u7ed3\u679c\u5c31\u662f: \u6210\u529f\u6216\u5931\u8d25 https://api.baidu.com/books/(pk)/ \u5355\u5220, \u4e0d\u9700\u8981\u63d0\u4f9b\u989d\u5916\u6570\u636e, \u5b8c\u6210\u5355\u5220, \u4e0d\u505a\u8d44\u6e90\u7684\u8fd4\u56de","title":"6\u3001\u8d44\u6e90\u64cd\u4f5c\u7531\u8bf7\u6c42\u65b9\u5f0f\u51b3\u5b9a"},{"location":"django%20rest%20framework/01%20Restful%E8%A7%84%E8%8C%83/#_2","text":"","title":"\u54cd\u5e94\u7ed3\u679c"},{"location":"django%20rest%20framework/01%20Restful%E8%A7%84%E8%8C%83/#1_1","text":"1xx: \u57fa\u672c\u4fe1\u606f 2xx \u6210\u529f 200 \u5e38\u89c4\u8bf7\u6c42 \u6210\u529f 201 \u521b\u5efa\u6210\u529f 3xx \u91cd\u5b9a\u5411 4xx \u5ba2\u6237\u7aef \u9519\u8bef 400 \u9519\u8bef\u8bf7\u6c42 403 \u8bf7\u6c42\u65e0\u6743\u9650 404 \u8bf7\u6c42\u8d44\u6e90\u4e0d\u5b58\u5728 5xx \u670d\u52a1\u5668\u9519\u8bef 500","title":"1\u3001\u54cd\u5e94\u5bf9\u8c61\u4e2d\u8981\u5305\u542b\u7f51\u7edc\u72b6\u6001\u7801(\u7f51\u7edc\u72b6\u6001\u4fe1\u606f\u548c\u7f51\u7edc\u72b6\u6001\u7801\u6346\u7ed1\u51fa\u73b0, \u4e0d\u8981\u989d\u5916\u8bbe\u7f6e)"},{"location":"django%20rest%20framework/01%20Restful%E8%A7%84%E8%8C%83/#2_1","text":"\u5982: 0: \u6210\u529f 1: \u5931\u8d25 1xx \u5177\u4f53\u5931\u8d25\u4fe1\u606f \u8981\u5728\u63a5\u53e3\u6587\u6863\u4e2d\u660e\u786e\u5199\u51fa 2: \u65e0\u6570\u636e 2xx \u5177\u4f53\u65e0\u6570\u636e\u4fe1\u606f","title":"2\u3001\u6570\u636e\u72b6\u6001\u7801  (\u4e00\u822c\u662f\u524d\u540e\u7aef\u7ea6\u5b9a\u89c4\u5219)"},{"location":"django%20rest%20framework/01%20Restful%E8%A7%84%E8%8C%83/#3_1","text":"\u4e00\u822c\u4e0d\u4ec5\u4ec5\u662f\u5bf9\u6570\u636e\u72b6\u6001\u7801\u7684\u89e3\u91ca, \u66f4\u591a\u7684\u662f\u5bf9\u7ed3\u679c\u7684\u63cf\u8ff0, \u7ed9\u524d\u7aef\u5f00\u53d1\u8005\u9605\u8bfb { \"status\" : 0 , \"message\" : \"ok\" , \"results\" : [ { \"name\" : \"\u5927\u672c\u8425\" , \"location\" : { \"lat\" : 31.45346 , \"lng\" : 146.23423 }, \"address\" : \"\u672c\u73af\u8def123\u53f7\" , \"province\" : \"\u4e0a\u6d77\u5e02\" , } ...... ] }","title":"3\u3001\u6570\u636e\u72b6\u6001\u4fe1\u606f"},{"location":"django%20rest%20framework/01%20Restful%E8%A7%84%E8%8C%83/#4_1","text":"\u4e00\u822c\u662f\u6570\u7ec4 \u5b57\u5178\u5f62\u5f0f, \u5982\u679c\u6709\u5b50\u8d44\u6e90(\u56fe\u7247 \u89c6\u9891 \u97f3\u9891), \u8fd4\u56de\u8d44\u6e90\u7684url\u94fe\u63a5 { \"status\" : 0 , \"msg\" : \"ok\" , \"results\" : [ { \"name\" : \"\u5c0f\u738b\u5b50\" , \"img\" : \"https://api.baidu.com/media/books/1.jpg\" } ] }","title":"4\u3001\u6570\u636e\u7ed3\u679c"},{"location":"django%20rest%20framework/02%20drf%E6%A1%86%E6%9E%B6%E4%B9%8BAPIView%E7%9A%84%E8%AF%B7%E6%B1%82%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/","text":"drf\u6846\u67b6\u4e4bAPIView\u7684\u8bf7\u6c42\u751f\u547d\u5468\u671f # drf(Django-restframework)\u6846\u67b6\u5b89\u88c5 # drf\u662fDjango\u7684\u63d2\u4ef6, \u6240\u4ee5\u8981\u63d0\u524d\u5b89\u88c5Django \u5b89\u88c5drf\u63d2\u4ef6: pip3 install djangorestframework \u4f7f\u7528drf\u65f6, \u8981\u5728django\u9879\u76ee\u4e2d\u7684settings\u6587\u4ef6\u4e2d\u6ce8\u518c Django rest_framework\u6846\u67b6\u7684\u5c01\u88c5\u7279\u70b9 # from rest_framework.views import APIView from rest_framework.request import Request from rest_framework.response import Response from rest_framework.exceptions import APIException from rest_framework.pagination import PageNumberPagination from rest_framework.settings import APISettings from rest_framework.parsers import JSONParser from rest_framework.filters import OrderingFilter APIView\u7684\u8bf7\u6c42\u751f\u547d\u5468\u671f # APIView\u7c7b\u7ee7\u627fView\u7c7b\uff0c\u91cd\u5199\u4e86as_view\u548cdispach\u65b9\u6cd5 \u91cd\u5199\u7684as view\u65b9\u6cd5\uff0c\u4e3b\u4f53\u8fd8\u662fView\u7684as view\uff0c\u53ea\u662f\u5728\u8fd4\u56de\u89c6\u56feview\u51fd\u6570\u5730\u5740\u65f6\uff0c\u5c40\u90e8\u7981\u7528csrf\u8ba4\u8bc1 \u5728\u91cd\u5199\u7684dispatch\u65b9\u6cd5\u4e2d \u5728\u6267\u884c\u8bf7\u6c42\u903b\u8f91\u524d\uff1a\u8bf7\u6c42\u6a21\u5757\u4e8c\u6b21\u5c01\u88c5request\uff0c\u89e3\u6790\u6a21\u5757 \u89e3\u6790\u4e09\u79cd\u6570\u636e\u5305\u683c\u5f0f\u3002 \u5728\u6267\u884c\u8bf7\u6c42\u903b\u8f91\u4e2d\uff1a\u5f02\u5e38\u6a21\u5757 \u6267\u884c\u51fa\u73b0\u4efb\u4f55\u5f02\u5e38\u4ea4\u7ed9\u5f02\u5e38\u6a21\u5757\u5904\u7406 \u5728\u6267\u884c\u8bf7\u6c42\u903b\u8f91\u540e\uff1a\u54cd\u5e94\u6a21\u5757\u4e8c\u6b21\u5c01\u88c5response\uff0c \u6e32\u67d3\u6a21\u5757\u5904\u7406\u6570\u636e\u7684\u6e32\u67d3\uff08\u54cd\u5e94\u7684\u6570\u636e\u80fdJSON\u5316\u548c\u9875\u9762\u4e24\u79cd\u6e32\u67d3\uff09 \u8bf7\u6c42\u6a21\u5757 # \u5c06wsgi\u7684request\u5bf9\u8c61\u8f6c\u5316\u4e3adrf \u7684Request\u7c7b\u7684\u5bf9\u8c61 \u5c01\u88c5\u540e\u7684request\u5bf9\u8c61\u5b8c\u5168\u517c\u5bb9wsgi\u7684request\u5bf9\u8c61\uff0c\u5e76\u4e14\u5c06\u539frequest\u4fdd\u5b58\u5728\u65b0\u7684 request._request \u4e2d \u91cd\u5199\u4e86\u65b9\u6cd5\uff0c\u5c06\u8bf7\u6c42\u6570\u636e\u7684\u5b58\u653e\u4f4d\u7f6e\u8fdb\u884c\u4e86\u4f18\u5316 \u62fc\u63a5\u53c2\u6570\u653e\u5728\u4e86\uff1a request.query_params \u6570\u636e\u5305\u53c2\u6570\u653e\u5728\u4e86\uff1a request.data \u8fdb\u5165APIView\u7684dispach\u65b9\u6cd5\u7684 request=self.initialize_request(request, *args, **kwargs) \u5206\u6790\u8bf7\u6c42\u6a21\u5757\u7684\u6e90\u7801 class BookView ( APIView ) : def get ( self, request, *args, **kwargs ) : print ( request.method ) # \u5c31\u662f\u901a\u8fc7__getattr__ \u8d70\u7684\u662frequest.method print ( request._request.method ) # \u5728\u5185\u90e8\u5c06wsgi\u7684request\u8d4b\u503c\u7ed9request._request print ( request.query_params ) #\u8d70\u7684\u662f\u65b9\u6cd5\u5c5e\u6027\uff0c\u5c31\u662f\u7ed9request._request.GET\u91cd\u65b0\u547d\u540d print ( request.data ) # \u8d70\u7684\u662f\u65b9\u6cd5\u5c5e\u6027\uff0c\u503c\u4f9d\u8d56\u4e8erequest._full_data return Response ({ 'msg' : 'view get ok' }) \u89e3\u6790\u6a21\u5757 # \u89e3\u6790\u6a21\u5757\u53ea\u5904\u7406\u6570\u636e\u5305\u53c2\u6570\uff1a form-data \u3001 x-www-form-urlencoded \u3001 json \u5168\u5c40\u914d\u7f6e\u6240\u6709\u89c6\u56fe\u7c7b\u7684\u89e3\u6790\u65b9\u5f0f\uff0c\u89e3\u6790\u914d\u7f6e\u53ef\u4ee5\u914d\u7f6e\u4e09\u79cd REST_FRAMEWORK = { 'DEFAULT_PARSER_CLASSES' : [ 'rest_framework.parsers.JSONParser' , 'rest_framework.parsers.FormParser' , 'rest_framework.parsers.MultiPartParser' ], } \u5c40\u90e8\u914d\u7f6e\uff1a from rest_framework.parsers import JSONParser , FormParser , MultiPartParser class BookView ( APIView ): PARSER_CLASSES = [ JSONParser , FormParser , MultiPartParser ] = [ JSONParser , FormParser , MultiPartParser ] def get ( self , request , * args , ** kwargs ): print ( request . method ) print ( request . _request . method ) print ( request . query_params ) print ( request . data ) return Response ({ 'msg' : 'view get ok' }) \u914d\u7f6e\u7684\u67e5\u627e\u987a\u5e8f\uff1a\u5c40\u90e8(\u89c6\u56fe\u7c7b\u7684\u7c7b\u5c5e\u6027) => \u5168\u5c40(settings\u6587\u4ef6\u7684drf\u914d\u7f6e) => \u9ed8\u8ba4(drf\u7684\u9ed8\u8ba4\u914d\u7f6e) \u54cd\u5e94\u6a21\u5757 # data\uff1a \u54cd\u5e94\u6570\u636e status\uff1a \u54cd\u5e94\u7684\u7f51\u7edc\u72b6\u6001\u7801 template_name\uff1adrf\u5b8c\u6210\u524d\u540e\u7aef\u4e0d\u5206\u79bb\u8fd4\u56de\u9875\u9762\uff0c\u4f46\u662f\u5c31\u4e0d\u53ef\u4ee5\u8fd4\u56dedata headers\uff1a\u54cd\u5e94\u5934\uff0c\u4e00\u822c\u4e0d\u89c4\u5b9a\uff0c\u8d70\u9ed8\u8ba4\u7684 exception\uff1a\u4e00\u822c\u5f02\u5e38\u54cd\u5e94\uff0c\u4f1a\u5c06\u5176\u8bbe\u7f6e\u6210True\uff0c\u9ed8\u8ba4False\uff0c\u4e0d\u8bbe\u7f6e\u4e5f\u6ca1\u4e8b content_type\uff1a\u9ed8\u8ba4\u5c31\u662fapplication / json\uff0c\u4e0d\u9700\u8981\u5904\u7406 \u6e32\u67d3\u6a21\u5757 # Postman\u8bf7\u6c42\u7ed3\u679c\u662fjson\uff0c\u6d4f\u89c8\u5668\u8bf7\u6c42\u7ed3\u679c\u662f\u9875\u9762 \u5168\u5c40\u914d\u7f6e\uff1a\u53ef\u4ee5\u7528\u4e8e\u6240\u6709\u89c6\u56fe\u7c7b REST_FRAMEWORK = { 'DEFAULT_RENDERER_CLASSES' : [ 'rest_framework.renderers.JSONRenderer' , 'rest_framework.renderers.BrowsableAPIRenderer' , # \u4e0a\u7ebf\u540e\u5c3d\u91cf\u5173\u95ed ], } \u5c40\u90e8\u914d\u7f6e\uff1a\u53ea\u662f\u9002\u7528\u4e8e\u5f53\u524d\u89c6\u56fe\u7c7b from rest_framework.renderers import JSONRenderer , BrowsableAPIRenderer class BookAPIView ( APIView ): RENDERER_CLASSES = [ BrowsableAPIRenderer , JSONRenderer ] def get ( self , request , * args , ** kwargs ): print ( request . method ) print ( request . _request . method ) print ( request . query_params ) print ( request . data ) return Response ({ 'msg' : 'view get ok' }) \u5f02\u5e38\u6a21\u5757 # \u901a\u8fc7\u5f02\u5e38\u6a21\u5757\u7684\u6e90\u7801\u5206\u6790\uff0c\u77e5\u9053exception handler\u51fd\u6570\u53ea\u5904\u7406\u5ba2\u6237\u7aef\u5f02\u5e38\uff0c\u4e0d\u5904\u7406\u670d\u52a1\u7aef\u5f02\u5e38\uff0c\u6240\u4ee5\u8981\u81ea\u5df1\u91cd\u5199exception handler\u65b9\u6cd5\uff1a \u5728settings\u6587\u4ef6\u4e2d\u914d\u7f6e\u81ea\u5b9a\u4e49\u7684\u5f02\u5e38\u6a21\u5757 REST_FRAMEWORK = { 'EXCEPTION_HANDLER' : 'api.exception.exception_handler' } \u5728django\u9879\u76ee \u5e94\u7528\u4e0b\u65b0\u5efa\u4e00\u4e2a\u6587\u4ef6 exception.py \uff1a from rest_framework.views import exception_handler as drf_exception_handler from rest_framework.response import Response def exception_handler ( exc , context ): # \u5148\u7ed9drf\u5904\u7406\u5ba2\u6237\u7aef\u5f02\u5e38\uff0c\u5982\u679cresponse\u4e3aNone\uff0c\u4ee3\u8868\u670d\u52a1\u7aef\u5f02\u5e38\uff0c\u9700\u8981\u81ea\u5df1\u5904\u7406 response = drf_exception_handler ( exc , context ) detail = ' %s - %s - %s ' % ( context . get ( 'view' ), context . get ( 'request' ) . method , exc ) if not response : # \u670d\u52a1\u7aef\u9519\u8bef response = Response ({ 'detail' : detail }) else : response . data = { 'detail' : detail } # \u6838\u5fc3\uff1a \u8981\u5c06response.data.get('detail')\u4fe1\u606f\u8bb0\u5f55\u5230\u65e5\u5fd7\u6587\u4ef6\u4e2d return response","title":"02 drf\u6846\u67b6\u4e4bAPIView\u7684\u8bf7\u6c42\u751f\u547d\u5468\u671f"},{"location":"django%20rest%20framework/02%20drf%E6%A1%86%E6%9E%B6%E4%B9%8BAPIView%E7%9A%84%E8%AF%B7%E6%B1%82%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/#drfapiview","text":"","title":"drf\u6846\u67b6\u4e4bAPIView\u7684\u8bf7\u6c42\u751f\u547d\u5468\u671f"},{"location":"django%20rest%20framework/02%20drf%E6%A1%86%E6%9E%B6%E4%B9%8BAPIView%E7%9A%84%E8%AF%B7%E6%B1%82%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/#drfdjango-restframework","text":"drf\u662fDjango\u7684\u63d2\u4ef6, \u6240\u4ee5\u8981\u63d0\u524d\u5b89\u88c5Django \u5b89\u88c5drf\u63d2\u4ef6: pip3 install djangorestframework \u4f7f\u7528drf\u65f6, \u8981\u5728django\u9879\u76ee\u4e2d\u7684settings\u6587\u4ef6\u4e2d\u6ce8\u518c","title":"drf(Django-restframework)\u6846\u67b6\u5b89\u88c5"},{"location":"django%20rest%20framework/02%20drf%E6%A1%86%E6%9E%B6%E4%B9%8BAPIView%E7%9A%84%E8%AF%B7%E6%B1%82%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/#django-rest_framework","text":"from rest_framework.views import APIView from rest_framework.request import Request from rest_framework.response import Response from rest_framework.exceptions import APIException from rest_framework.pagination import PageNumberPagination from rest_framework.settings import APISettings from rest_framework.parsers import JSONParser from rest_framework.filters import OrderingFilter","title":"Django rest_framework\u6846\u67b6\u7684\u5c01\u88c5\u7279\u70b9"},{"location":"django%20rest%20framework/02%20drf%E6%A1%86%E6%9E%B6%E4%B9%8BAPIView%E7%9A%84%E8%AF%B7%E6%B1%82%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/#apiview","text":"APIView\u7c7b\u7ee7\u627fView\u7c7b\uff0c\u91cd\u5199\u4e86as_view\u548cdispach\u65b9\u6cd5 \u91cd\u5199\u7684as view\u65b9\u6cd5\uff0c\u4e3b\u4f53\u8fd8\u662fView\u7684as view\uff0c\u53ea\u662f\u5728\u8fd4\u56de\u89c6\u56feview\u51fd\u6570\u5730\u5740\u65f6\uff0c\u5c40\u90e8\u7981\u7528csrf\u8ba4\u8bc1 \u5728\u91cd\u5199\u7684dispatch\u65b9\u6cd5\u4e2d \u5728\u6267\u884c\u8bf7\u6c42\u903b\u8f91\u524d\uff1a\u8bf7\u6c42\u6a21\u5757\u4e8c\u6b21\u5c01\u88c5request\uff0c\u89e3\u6790\u6a21\u5757 \u89e3\u6790\u4e09\u79cd\u6570\u636e\u5305\u683c\u5f0f\u3002 \u5728\u6267\u884c\u8bf7\u6c42\u903b\u8f91\u4e2d\uff1a\u5f02\u5e38\u6a21\u5757 \u6267\u884c\u51fa\u73b0\u4efb\u4f55\u5f02\u5e38\u4ea4\u7ed9\u5f02\u5e38\u6a21\u5757\u5904\u7406 \u5728\u6267\u884c\u8bf7\u6c42\u903b\u8f91\u540e\uff1a\u54cd\u5e94\u6a21\u5757\u4e8c\u6b21\u5c01\u88c5response\uff0c \u6e32\u67d3\u6a21\u5757\u5904\u7406\u6570\u636e\u7684\u6e32\u67d3\uff08\u54cd\u5e94\u7684\u6570\u636e\u80fdJSON\u5316\u548c\u9875\u9762\u4e24\u79cd\u6e32\u67d3\uff09","title":"APIView\u7684\u8bf7\u6c42\u751f\u547d\u5468\u671f"},{"location":"django%20rest%20framework/02%20drf%E6%A1%86%E6%9E%B6%E4%B9%8BAPIView%E7%9A%84%E8%AF%B7%E6%B1%82%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/#_1","text":"\u5c06wsgi\u7684request\u5bf9\u8c61\u8f6c\u5316\u4e3adrf \u7684Request\u7c7b\u7684\u5bf9\u8c61 \u5c01\u88c5\u540e\u7684request\u5bf9\u8c61\u5b8c\u5168\u517c\u5bb9wsgi\u7684request\u5bf9\u8c61\uff0c\u5e76\u4e14\u5c06\u539frequest\u4fdd\u5b58\u5728\u65b0\u7684 request._request \u4e2d \u91cd\u5199\u4e86\u65b9\u6cd5\uff0c\u5c06\u8bf7\u6c42\u6570\u636e\u7684\u5b58\u653e\u4f4d\u7f6e\u8fdb\u884c\u4e86\u4f18\u5316 \u62fc\u63a5\u53c2\u6570\u653e\u5728\u4e86\uff1a request.query_params \u6570\u636e\u5305\u53c2\u6570\u653e\u5728\u4e86\uff1a request.data \u8fdb\u5165APIView\u7684dispach\u65b9\u6cd5\u7684 request=self.initialize_request(request, *args, **kwargs) \u5206\u6790\u8bf7\u6c42\u6a21\u5757\u7684\u6e90\u7801 class BookView ( APIView ) : def get ( self, request, *args, **kwargs ) : print ( request.method ) # \u5c31\u662f\u901a\u8fc7__getattr__ \u8d70\u7684\u662frequest.method print ( request._request.method ) # \u5728\u5185\u90e8\u5c06wsgi\u7684request\u8d4b\u503c\u7ed9request._request print ( request.query_params ) #\u8d70\u7684\u662f\u65b9\u6cd5\u5c5e\u6027\uff0c\u5c31\u662f\u7ed9request._request.GET\u91cd\u65b0\u547d\u540d print ( request.data ) # \u8d70\u7684\u662f\u65b9\u6cd5\u5c5e\u6027\uff0c\u503c\u4f9d\u8d56\u4e8erequest._full_data return Response ({ 'msg' : 'view get ok' })","title":"\u8bf7\u6c42\u6a21\u5757"},{"location":"django%20rest%20framework/02%20drf%E6%A1%86%E6%9E%B6%E4%B9%8BAPIView%E7%9A%84%E8%AF%B7%E6%B1%82%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/#_2","text":"\u89e3\u6790\u6a21\u5757\u53ea\u5904\u7406\u6570\u636e\u5305\u53c2\u6570\uff1a form-data \u3001 x-www-form-urlencoded \u3001 json \u5168\u5c40\u914d\u7f6e\u6240\u6709\u89c6\u56fe\u7c7b\u7684\u89e3\u6790\u65b9\u5f0f\uff0c\u89e3\u6790\u914d\u7f6e\u53ef\u4ee5\u914d\u7f6e\u4e09\u79cd REST_FRAMEWORK = { 'DEFAULT_PARSER_CLASSES' : [ 'rest_framework.parsers.JSONParser' , 'rest_framework.parsers.FormParser' , 'rest_framework.parsers.MultiPartParser' ], } \u5c40\u90e8\u914d\u7f6e\uff1a from rest_framework.parsers import JSONParser , FormParser , MultiPartParser class BookView ( APIView ): PARSER_CLASSES = [ JSONParser , FormParser , MultiPartParser ] = [ JSONParser , FormParser , MultiPartParser ] def get ( self , request , * args , ** kwargs ): print ( request . method ) print ( request . _request . method ) print ( request . query_params ) print ( request . data ) return Response ({ 'msg' : 'view get ok' }) \u914d\u7f6e\u7684\u67e5\u627e\u987a\u5e8f\uff1a\u5c40\u90e8(\u89c6\u56fe\u7c7b\u7684\u7c7b\u5c5e\u6027) => \u5168\u5c40(settings\u6587\u4ef6\u7684drf\u914d\u7f6e) => \u9ed8\u8ba4(drf\u7684\u9ed8\u8ba4\u914d\u7f6e)","title":"\u89e3\u6790\u6a21\u5757"},{"location":"django%20rest%20framework/02%20drf%E6%A1%86%E6%9E%B6%E4%B9%8BAPIView%E7%9A%84%E8%AF%B7%E6%B1%82%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/#_3","text":"data\uff1a \u54cd\u5e94\u6570\u636e status\uff1a \u54cd\u5e94\u7684\u7f51\u7edc\u72b6\u6001\u7801 template_name\uff1adrf\u5b8c\u6210\u524d\u540e\u7aef\u4e0d\u5206\u79bb\u8fd4\u56de\u9875\u9762\uff0c\u4f46\u662f\u5c31\u4e0d\u53ef\u4ee5\u8fd4\u56dedata headers\uff1a\u54cd\u5e94\u5934\uff0c\u4e00\u822c\u4e0d\u89c4\u5b9a\uff0c\u8d70\u9ed8\u8ba4\u7684 exception\uff1a\u4e00\u822c\u5f02\u5e38\u54cd\u5e94\uff0c\u4f1a\u5c06\u5176\u8bbe\u7f6e\u6210True\uff0c\u9ed8\u8ba4False\uff0c\u4e0d\u8bbe\u7f6e\u4e5f\u6ca1\u4e8b content_type\uff1a\u9ed8\u8ba4\u5c31\u662fapplication / json\uff0c\u4e0d\u9700\u8981\u5904\u7406","title":"\u54cd\u5e94\u6a21\u5757"},{"location":"django%20rest%20framework/02%20drf%E6%A1%86%E6%9E%B6%E4%B9%8BAPIView%E7%9A%84%E8%AF%B7%E6%B1%82%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/#_4","text":"Postman\u8bf7\u6c42\u7ed3\u679c\u662fjson\uff0c\u6d4f\u89c8\u5668\u8bf7\u6c42\u7ed3\u679c\u662f\u9875\u9762 \u5168\u5c40\u914d\u7f6e\uff1a\u53ef\u4ee5\u7528\u4e8e\u6240\u6709\u89c6\u56fe\u7c7b REST_FRAMEWORK = { 'DEFAULT_RENDERER_CLASSES' : [ 'rest_framework.renderers.JSONRenderer' , 'rest_framework.renderers.BrowsableAPIRenderer' , # \u4e0a\u7ebf\u540e\u5c3d\u91cf\u5173\u95ed ], } \u5c40\u90e8\u914d\u7f6e\uff1a\u53ea\u662f\u9002\u7528\u4e8e\u5f53\u524d\u89c6\u56fe\u7c7b from rest_framework.renderers import JSONRenderer , BrowsableAPIRenderer class BookAPIView ( APIView ): RENDERER_CLASSES = [ BrowsableAPIRenderer , JSONRenderer ] def get ( self , request , * args , ** kwargs ): print ( request . method ) print ( request . _request . method ) print ( request . query_params ) print ( request . data ) return Response ({ 'msg' : 'view get ok' })","title":"\u6e32\u67d3\u6a21\u5757"},{"location":"django%20rest%20framework/02%20drf%E6%A1%86%E6%9E%B6%E4%B9%8BAPIView%E7%9A%84%E8%AF%B7%E6%B1%82%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/#_5","text":"\u901a\u8fc7\u5f02\u5e38\u6a21\u5757\u7684\u6e90\u7801\u5206\u6790\uff0c\u77e5\u9053exception handler\u51fd\u6570\u53ea\u5904\u7406\u5ba2\u6237\u7aef\u5f02\u5e38\uff0c\u4e0d\u5904\u7406\u670d\u52a1\u7aef\u5f02\u5e38\uff0c\u6240\u4ee5\u8981\u81ea\u5df1\u91cd\u5199exception handler\u65b9\u6cd5\uff1a \u5728settings\u6587\u4ef6\u4e2d\u914d\u7f6e\u81ea\u5b9a\u4e49\u7684\u5f02\u5e38\u6a21\u5757 REST_FRAMEWORK = { 'EXCEPTION_HANDLER' : 'api.exception.exception_handler' } \u5728django\u9879\u76ee \u5e94\u7528\u4e0b\u65b0\u5efa\u4e00\u4e2a\u6587\u4ef6 exception.py \uff1a from rest_framework.views import exception_handler as drf_exception_handler from rest_framework.response import Response def exception_handler ( exc , context ): # \u5148\u7ed9drf\u5904\u7406\u5ba2\u6237\u7aef\u5f02\u5e38\uff0c\u5982\u679cresponse\u4e3aNone\uff0c\u4ee3\u8868\u670d\u52a1\u7aef\u5f02\u5e38\uff0c\u9700\u8981\u81ea\u5df1\u5904\u7406 response = drf_exception_handler ( exc , context ) detail = ' %s - %s - %s ' % ( context . get ( 'view' ), context . get ( 'request' ) . method , exc ) if not response : # \u670d\u52a1\u7aef\u9519\u8bef response = Response ({ 'detail' : detail }) else : response . data = { 'detail' : detail } # \u6838\u5fc3\uff1a \u8981\u5c06response.data.get('detail')\u4fe1\u606f\u8bb0\u5f55\u5230\u65e5\u5fd7\u6587\u4ef6\u4e2d return response","title":"\u5f02\u5e38\u6a21\u5757"},{"location":"django%20rest%20framework/03%20drf%E5%BA%8F%E5%88%97%E5%8C%96%E5%AE%B6%E6%97%8F/","text":"drf\u5e8f\u5217\u5316\u5bb6\u65cf # \u5728\u89c6\u56fe\u4e2d\u624b\u52a8\u5b8c\u6210\u5e8f\u5217\u5316\u64cd\u4f5c # # view.py class UserV1ApiView ( APIView ): def get ( self , request , * args , ** kwargs ): pk = kwargs . get ( 'pk' ) if pk : user_dic = models . User . objects . filter ( is_delete = False , pk = pk ) . values ( 'username' , 'sex' , 'img' ) . first () if not user_dic : return Response ({ 'status' : 1 , 'msg' : 'pk error' , }, status = 400 ) user_dic [ 'img' ] = ' %s%s%s ' % ( settings . BASE_URL , settings . MEDIA_URL , user_dic . get ( 'img' )) return Response ({ 'status' : 0 , 'msg' : 'ok' , 'results' : user_dic }) else : user_query = models . User . objects . filter ( is_delete = False ) . values ( 'username' , 'sex' , 'img' ) . all () for user_dic in user_query : user_dic [ 'img' ] = ' %s%s%s ' % ( settings . BASE_URL , settings . MEDIA_URL , user_dic . get ( 'img' )) user_list = list ( user_query ) return Response ({ 'status' : 0 , 'msg' : 'ok' , 'results' : user_list }) Serializer\u5e8f\u5217\u5316 # \u7b80\u5355\u6765\u8bf4\uff0c\u5e8f\u5217\u5316\u5c31\u662f\u5c06\u6570\u636e\u7ed9\u524d\u53f0\uff1b\u53cd\u5e8f\u5217\u5316\u5c31\u662f\u5b8c\u6210\u6570\u636e\u5e93\u5165\u5e93 \u89c6\u56fe\u7c7b\u5e8f\u5217\u5316\u8fc7\u7a0b\uff1a ORM\u64cd\u4f5c\u5f97\u5230\u6570\u636e \u5c06\u6570\u636e\u5e8f\u5217\u5316\u6210\u53ef\u4ee5\u8fd4\u56de\u7ed9\u524d\u7aef\u7684\u6570\u636e \u5c06\u6570\u636e\u8fd4\u56de\u7ed9\u524d\u53f0 # views.py from . import serializers class UserV2APIView ( APIView ): # \u5355\u67e5\u7fa4\u67e5 def get ( self , request , * args , ** kwargs ): pk = kwargs . get ( 'pk' ) if pk : user_obj = models . User . objects . filter ( is_delete = False , pk = pk ) . first () if not user_obj : return Response ({ 'status' : 1 , 'msg' : 'pk error' , }, status = 400 ) user_ser = serializers . UserSerializer ( user_obj , many = False ) # many\u9ed8\u8ba4\u4e3aFalse user_obj_data = user_ser . data return Response ({ 'status' : 0 , 'msg' : 'ok' , 'results' : user_obj_data }) else : # \u5c06\u5bf9\u8c61\u5bf9\u5916\u63d0\u4f9b\u7684\u5b57\u6bb5\uff0c\u5df2\u7ecf\u6574\u4e2a\u5e8f\u5217\u5316\u8fc7\u7a0b\u5c01\u88c5\uff0c\u5f62\u6210\u5e8f\u5217\u5316\u7c7b user_query = models . User . objects . filter ( is_delete = False ) . all () user_ser = serializers . UserSerializer ( user_query , many = True ) user_list_data = user_ser . data return Response ({ 'status' : 0 , 'msg' : 'ok' , 'results' : user_list_data }) # \u5e8f\u5217\u5316\u7c7b serializer.py class UserSerializer ( serializers . Serializer ): # \u5b57\u6bb5\u540d\u4e0e\u5b57\u6bb5\u7c7b\u578b\u4e0emodel\u8981\u4e00\u81f4 # \u6ca1\u6709\u7684\u5b57\u6bb5\u4e0d\u53c2\u4e0e\u5e8f\u5217\u5316\u7ed9\u524d\u7aef # \u53ef\u4ee5\u81ea\u5b9a\u4e49\u5e8f\u5217\u5316\u5b57\u6bb5\uff0c\u91c7\u7528\u65b9\u6cd5\u5e8f\u5217\u5316\uff0c\u65b9\u6cd5\u56fa\u5b9a\u4e24\u4e2a\u53c2\u6570\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u5c31\u662f\u53c2\u4e0e\u5e8f\u5217\u5316\u7684model\u5bf9\u8c61 # \u4e25\u91cd\u4e0d\u5efa\u8bae\u81ea\u5b9a\u4e49\u5b57\u6bb5\u540d\u4e0e\u6570\u636e\u5e93\u5b57\u6bb5\u540d\u91cd\u540d\uff0c\u7531get_\u81ea\u5b9a\u4e49\u5b57\u6bb5\u540d\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u63d0\u4f9b\u5b57\u6bb5\u503c username = serializers . CharField () # sex = serializers.IntegerField() # sex = serializers.SerializerMethodField() # \u4e0d\u5efa\u8bae\u8fd9\u6837\u547d\u540d gender = serializers . SerializerMethodField () def get_gender ( self , obj ): return obj . get_sex_display () # \u6ce8\uff1a\u5728\u9ad8\u7ea7\u5e8f\u5217\u5316\u4e0e\u9ad8\u7ea7\u89c6\u56fe\u7c7b\u4e2d\uff0cdrf\u9ed8\u8ba4\u5e2e\u6211\u4eec\u5904\u7406\u56fe\u7247\u7b49\u5b50\u8d44\u6e90 icon = serializers . SerializerMethodField () def get_icon ( self , obj ): return ' %s%s%s ' % ( settings . BASE_URL , settings . MEDIA_URL , obj . img ) Serializer\u5e8f\u5217\u5316\u603b\u7ed3\uff1a # \u8bbe\u7f6e\u5e8f\u5217\u5316\u5b57\u6bb5\uff0c\u5b57\u6bb5\u540d\u4e0e\u5b57\u6bb5\u7c7b\u578b\u8981\u4e0e\u5904\u7406\u7684model\u7c7b\u5c5e\u6027\u540d\u5b57\u5bf9\u5e94\uff0c\u53ea\u53c2\u4e0e\u5e8f\u5217\u5316\u7684\u7c7b\u578b\u4e0d\u9700\u8981\u8bbe\u7f6e\u6761\u4ef6 model\u6a21\u578b\u7c7b\u4e2d\u6709\u7684\u5b57\u6bb5\uff0c\u800c\u5728\u5e8f\u5217\u5316\u4e2d\u6ca1\u6709\u7684\u5bf9\u5e94\u5b57\u6bb5\uff0c\u8be5\u5b57\u6bb5\u4e0d\u53c2\u4e0e\u5e8f\u5217\u5316 \u81ea\u5b9a\u4e49\u5e8f\u5217\u5316\u5b57\u6bb5\uff0c\u5b57\u6bb5\u7c7b\u578b\u4e3aSerializerMethodField()\uff0c\u503c\u6709 get \u81ea\u5b9a\u4e49\u5b57\u6bb5\u540d(self, model obj) \u65b9\u6cd5\u63d0\u4f9b\uff0c\u4e00\u822c\u503c\u90fd\u4e0e\u53c2\u4e0e\u5e8f\u5217\u5316\u7684model\u5bf9\u8c61(model_obj)\u6709\u5173 Serializer\u53cd\u5e8f\u5217\u5316 # \u89c6\u56fe\u7c7b\u53cd\u5e8f\u5217\u5316\u8fc7\u7a0b\uff1a \u4ece\u8bf7\u6c42\u5bf9\u8c61\u4e2d\u83b7\u53d6\u524d\u53f0\u63d0\u4ea4\u7684\u6570\u636e \u4ea4\u7ed9\u5e8f\u5217\u5316\u7c7b\u5b8c\u6210\u53cd\u5e8f\u5217\u5316\uff08\u6570\u636e\u7684\u6821\u9a8c\uff09 \u501f\u52a9\u5e8f\u5217\u5316\u5b8c\u6210\u6570\u636e\u5165\u5e93 \u53cd\u9988\u7ed9\u524d\u53f0\u5904\u7406\u7ed3\u679c # views.py class UserV2ApiView ( APIView ): def get ( self , request , * args , ** kwargs ): pk = kwargs . get ( 'pk' ) if pk : user_obj = models . User . objects . filter ( is_delete = False , pk = pk ) . first () if not user_obj : return Response ({ 'status' : 1 , 'msg' : 'pk error' , }, status = 400 ) user_ser = serializer . UserSerializer ( user_obj , many = False ) user_obj . data = user_ser . data return Response ({ 'status' : 0 , 'msg' : 'ok' , 'results' : user_obj . data }) else : user_query = models . User . objects . filter ( is_delete = False ) . all () user_ser = serializer . UserSerializer ( user_query , many = True ) user_list = user_ser . data return Response ({ 'status' : 0 , 'msg' : 'ok' , 'results' : user_list }) # \u5355\u589e def post ( self , request , * args , ** kwargs ): request_data = request . data user_ser = serializer . UserDeSerializer ( data = request_data ) if user_ser . is_valid (): # \u5165\u5e93 user_obj = user_ser . save () return Response ({ 'status' : 0 , 'msg' : 'ok' , 'results' : serializer . UserSerializer ( user_obj ) . data # \u5c06\u5165\u5e93\u5f97\u5230\u7684user\u5bf9\u8c61\u91cd\u65b0\u5e8f\u5217\u5316\u7684\u6570\u636e\u8fd4\u56de\u7ed9\u524d\u53f0 }) else : return Response ({ 'status' : 1 , 'msg' : user_ser . errors }) # \u5e8f\u5217\u5316\u7c7b serializer.py class UserDeSerializer ( serializers . Serializer ): # \u7cfb\u7edf\u6821\u9a8c\u5b57\u6bb5 username = serializers . CharField ( max_length = 10 , min_length = 2 , error_messages = { 'max_length' : '\u592a\u957f' , 'min_length' : '\u592a\u5c0f' }) password = serializers . CharField ( max_length = 10 , min_length = 2 ) # \u4e0d\u5199\uff0c\u4e0d\u53c2\u4e0e\u53cd\u5e8f\u5217\u5316\uff0c\u5199\u5c31\u5fc5\u987b\u53c2\u4e0e\u53cd\u5e8f\u5217\u5316(\u4f46\u53ef\u4ee5\u8bbe\u7f6erequired=False\u53d6\u6d88\u5fc5\u987b) # required=False\u7684\u5b57\u6bb5\uff0c\u524d\u53f0\u4e0d\u63d0\u4f9b\uff0c\u8d70\u9ed8\u8ba4\u503c\uff0c\u63d0\u4f9b\u5c31\u4e00\u5b9a\u8fdb\u884c\u6821\u9a8c\uff1b\u4e0d\u5199 \u524d\u53f0\u63d0\u4e0d\u63d0\u4f9b\u90fd\u91c7\u7528\u9ed8\u8ba4\u503c sex = serializers . BooleanField ( required = False ) # \u81ea\u5b9a\u4e49\u6821\u9a8c\u5b57\u6bb5\uff1a\u8bbe\u7f6e\u8bed\u6cd5\u4e0e\u7cfb\u7edf\u5b57\u6bb5\u6ca1\u6709\u533a\u522b\uff0c\u4f46\u662f\u8fd9\u4e9b\u5b57\u6bb5\u4e0d\u80fd\u53c2\u4e0e\u5165\u5e93\u64cd\u4f5c\uff0c\u9700\u8981\u5728\u5168\u5c40\u94a9\u5b50\u4e2d\uff0c\u5c06\u5176\u53d6\u51fa re_password = serializers . CharField ( max_length = 10 , min_length = 2 ) # \u5c40\u90e8\u94a9\u5b50 def validate_username ( self , value ): if 'y' in value : raise serializers . ValidationError ( \"\u540d\u5b57\u4e2d\u4e0d\u80fd\u6709y\" ) return value # \u5168\u5c40\u94a9\u5b50 def validate ( self , attrs ): password = attrs . get ( 'password' ) re_password = attrs . pop ( 're_password' ) if re_password != password : raise serializers . ValidationError ( '\u4e24\u6b21\u5bc6\u7801\u4e0d\u4e00\u81f4' ) return attrs # \u5728\u89c6\u56fe\u7c7b\u4e2d\u8c03\u7528\u5e8f\u5217\u5316\u7c7b\u7684save\u65b9\u6cd5\u5b8c\u6210\u5165\u5e93\uff0cSerializer\u7c7b\u80fd\u505a\u7684\u5c31\u662f \u589e \u5165\u5e93\u8d70create\u65b9\u6cd5\uff0c\u6539 \u5165\u5e93\u8d70update\u65b9\u6cd5\uff0c\u4f46Serializer\u6ca1\u6709\u63d0\u4f9b\u4e24\u4e2a\u65b9\u6cd5\u7684\u5b9e\u73b0\u4f53\u3002 def create ( self , validated_data ): return models . User . objects . create ( ** validated_data ) # instance\u8981\u88ab\u4fee\u6539\u7684\u5bf9\u8c61\uff0cvalidated_data\u4ee3\u8868\u6821\u9a8c\u540e\u7528\u6765\u6539instance\u7684\u6570\u636e def update ( self , instance , validated_data ): # \u7528\u6237\u540d\u4e0d\u80fd\u4fee\u6539 validated_data . pop ( 'username' ) models . User . objects . filter ( pk = instance . id ) . update ( ** validated_data ) return instance \u5c40\u90e8\u94a9\u5b50\uff1a \u65b9\u6cd5\u5c31\u662f validate_\u6821\u9a8c\u7684\u5b57\u6bb5\u540d(self, \u6821\u9a8c\u7684\u5b57\u6bb5\u6570\u636e) \u6821\u9a8c\u89c4\u5219\uff1a\u6210\u529f\u76f4\u63a5\u8fd4\u56devalue\uff0c\u5931\u8d25\u629b\u51fa\u6821\u9a8c\u5931\u8d25\u4fe1\u606f \u5168\u5c40\u94a9\u5b50\uff1a \u65b9\u6cd5\u5c31\u662f validate(self, \u6240\u6709\u7684\u6821\u9a8c\u6570\u636e) \u6821\u9a8c\u89c4\u5219\uff1a\u6210\u529f\u76f4\u63a5\u8fd4\u56deattrs\uff0c\u5931\u8d25\u629b\u51fa\u6821\u9a8c\u5931\u8d25\u4fe1\u606f Serializer\u53cd\u5e8f\u5217\u5316\u603b\u7ed3\uff1a # \u7cfb\u7edf\u6821\u9a8c \u4e0e \u81ea\u5b9a\u4e49\u6821\u9a8c\u5b57\u6bb5\u6ca1\u6709\u533a\u522b \u81ea\u5b9a\u4e49\u6821\u9a8c\u5b57\u6bb5\u662f\u4e0d\u80fd\u76f4\u63a5\u5165\u5e93\u7684\uff0c\u9700\u8981\u8bbe\u7f6e\u5165\u5e93\u89c4\u5219\uff0c\u6216\u5c06\u5176\u79fb\u9664\u4e0d\u5165\u5e93(\u8fd9\u7c7b\u5b57\u6bb5\u5c31\u662f\u53c2\u4e0e\u5168\u5c40\u6821\u9a8c\u7528\u7684) \u6240\u6709\u5b57\u6bb5\u90fd\u53ef\u4ee5\u8bbe\u7f6e\u5bf9\u5e94\u7684\u5c40\u90e8\u94a9\u5b50\u8fdb\u884c\u6821\u9a8c\uff0c\u94a9\u5b50\u65b9\u6cd5 validate_\u5b57\u6bb5\u540d(self, \u5b57\u6bb5\u503cvalue) \u89c4\u5219\uff1a\u6210\u529f\u76f4\u63a5\u8fd4\u56devalue\uff0c\u5931\u8d25\u629b\u51fa\u6821\u9a8c\u5931\u8d25\u4fe1\u606f ValidationError('\u9519\u8bef\u4fe1\u606f') \u4e00\u4e2a\u5e8f\u5217\u5316\u7c7b\u5b58\u5728 \u4e00\u4e2a\u5168\u5c40\u94a9\u5b50 \u53ef\u4ee5\u5bf9\u6240\u6709\u5b57\u6bb5\u8fdb\u884c\u5168\u5c40\u6821\u9a8c\uff0c\u94a9\u5b50\u65b9\u6cd5 validate(self, \u6240\u6709\u5b57\u6bb5\u503c\u5b57\u5178attrs) \u91cd\u5199create\u65b9\u6cd5\u5b9e\u73b0\u589e\u5165\u5e93\uff0c\u91cd\u5199update\u65b9\u6cd5\u5b9e\u73b0\u6539\u5165\u5e93\uff0c\u90fd\u4f1a\u8fd4\u56de\u5165\u5e93\u6210\u529f\u7684\u5bf9\u8c61 ModelSerializer\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316 # # \u6a21\u578b\u7c7b class User ( models . Model ): SEX_CHOICES = ( ( 0 , '\u5973' ), ( 1 , '\u7537' ) ) username = models . CharField ( max_length = 64 , blank = True , unique = True , verbose_name = '\u59d3\u540d' ) password = models . CharField ( max_length = 64 , verbose_name = '\u5bc6\u7801' ) sex = models . IntegerField ( choices = SEX_CHOICES , default = 0 , verbose_name = '\u6027\u522b' ) img = models . ImageField ( upload_to = 'img' , default = 'img/default.jpg' , verbose_name = '\u5934\u50cf' ) # \u5f00\u53d1\u4e2d\uff0c\u6570\u636e\u4e0d\u4f1a\u76f4\u63a5\u5220\u9664\uff0c\u901a\u8fc7\u5b57\u6bb5\u63a7\u5236 is_delete = models . BooleanField ( default = False , verbose_name = '\u662f\u5426\u6ce8\u9500' ) created_time = models . DateTimeField ( auto_now_add = True , verbose_name = '\u521b\u5efa\u65f6\u95f4' ) # \u7b2c\u4e8c\u79cd\u81ea\u5b9a\u4e49\u5e8f\u5217\u5316\u5b57\u6bb5\uff08\u63d2\u62d4\u5f0f\uff0c\u63d0\u5021\u4f7f\u7528\uff09 @property def gender ( self ): return self . get_sex_display () @property def icon ( self ): from django.conf import settings return ' %s%s%s ' % ( settings . BASE_URL , settings . MEDIA_URL , self . img ) class Meta : db_table = 'table_user' verbose_name_plural = '\u7528\u6237\u8868' def __str__ ( self ): return self . username # views.py class UserV3ApiView ( APIView ): # \u5355\u67e5\u7fa4\u67e5 def get ( self , request , * args , ** kwargs ): pk = kwargs . get ( 'pk' ) if pk : user_obj = models . User . objects . filter ( is_delete = False , pk = pk ) . first () if not user_obj : return Response ({ 'status' : 1 , 'msg' : 'pk error' , }, status = 400 ) user_ser = serializer . UserModelSerializer ( user_obj , many = False ) return Response ({ 'status' : 0 , 'msg' : 'ok' , 'results' : user_ser . data }) else : user_query = models . User . objects . filter ( is_delete = False ) . all () user_ser = serializer . UserModelSerializer ( user_query , many = True ) return Response ({ 'status' : 0 , 'msg' : 'ok' , 'results' : user_ser . data }) # \u5355\u589e def post ( self , request , * args , ** kwargs ): user_ser = serializer . UserModelSerializer ( data = request . data ) if user_ser . is_valid (): user_obj = user_ser . save () return Response ({ 'status' : 0 , 'msg' : 'ok' , 'results' : serializer . UserModelSerializer ( user_obj ) . data }) else : return Response ({ 'status' : 1 , 'msg' : user_ser . errors }) # \u5e8f\u5217\u5316\u7c7b class UserModelSerializer ( serializers . ModelSerializer ): re_password = serializers . CharField ( max_length = 10 , min_length = 2 , write_only = True ) class Meta : model = models . User # fields\u91c7\u7528 \u63d2\u62d4\u5f0f \u8bbe\u7f6e\u6240\u6709\u53c2\u4e0e\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316\u5b57\u6bb5 fields = ( 'username' , 'gender' , 'icon' , 'password' , 'sex' , 're_password' ) extra_kwargs = { 'username' : { # \u7cfb\u7edf\u5b57\u6bb5\u4e0d\u8bbe\u7f6eread_only\u548cwrite_only\uff0c\u9ed8\u8ba4\u90fd\u53c2\u52a0 'min_length' : 2 , 'max_length' : 10 , 'error_messages' : { 'min_length' : '\u592a\u77ed' , 'max_length' : '\u592a\u957f' } }, 'gender' : { 'read_only' : True , # \u81ea\u5b9a\u4e49\u7684\u5e8f\u5217\u5316\u5b57\u6bb5\u9ed8\u8ba4\u5c31\u662fread_only\uff0c\u4e14\u4e0d\u80fd\u4fee\u6539\uff0c\u53ef\u4ee5\u7701\u7565 }, 'password' : { 'write_only' : True }, 'sex' : { # \u50cfsex\u6709\u9ed8\u8ba4\u503c\u7684\u5b57\u6bb5\uff0c\u4e3a\u9009\u586b\u5b57\u6bb5\uff08'required': True\u53ef\u4ee5\u5c06\u5176\u53d8\u4e3a\u5fc5\u586b\u5b57\u6bb5\uff09 'write_only' : True , # 'required': True } } # \u5c40\u90e8\u5168\u5c40\u94a9\u5b50\u540cSerializer\u7c7b\uff0c\u662f\u4e0e Meta \u540c\u7f29\u8fdb\u7684 def validate_username ( self , value ): if 'y' in value : raise serializers . ValidationError ( '\u540d\u5b57\u4e2d\u4e0d\u80fd\u6709y' ) return value def validate ( self , attrs ): password = attrs . get ( 'password' ) re_password = attrs . pop ( \"re_password\" ) if password != re_password : raise serializers . ValidationError ( '\u4e24\u6b21\u5bc6\u7801\u4e0d\u4e00\u81f4' ) return attrs ModelSerializer\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316\u603b\u7ed3\uff1a # \u5e8f\u5217\u5316\u7c7b\u7ee7\u627fModelSerializer\uff0c\u6240\u4ee5\u9700\u8981\u5728\u914d\u7f6e\u7c7bMeta\u4e2d\u8fdb\u884c\u914d\u7f6e model\u914d\u7f6e\uff1a\u7ed1\u5b9a\u5e8f\u5217\u5316\u76f8\u5173\u7684Model\u6a21\u578b\u8868 fields\u914d\u7f6e\uff1a\u91c7\u7528\u63d2\u62d4\u5f0f\u8bbe\u8ba1\uff0c \u8bbe\u7f6e\u6240\u6709\u53c2\u4e0e\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316\u5b57\u6bb5 extra_kwargs\u7684\u914d\u7f6e\uff1a \u7cfb\u7edf\u5b57\u6bb5\u5212\u5206\u4e3a\u4e09\u79cd\uff1a\u53ea\u8bfb(read only)\u3001\u53ea\u5199(write only)\u3001\u53ef\u8bfb\u53ef\u5199(\u4e0d\u8bbe\u7f6e) \u5b57\u6bb5\u662f\u5426\u5fc5\u987b\u4f7f\u7528 required\u8bbe\u7f6e\uff0c \u9009\u586b\u5b57\u6bb5\uff1a\u5728extra_kwargs\u8fdb\u884c\u914d\u7f6e\uff0c\u4f46\u4e0d\u8bbe\u7f6erequired\uff0c\u4e14\u6709\u9ed8\u8ba4\u503c \u81ea\u5b9a\u4e49\u5e8f\u5217\u5316\u5b57\u6bb5\uff1a \u7b2c\u4e00\u79cd(\u4e0d\u63d0\u5021)\uff1a\u5728\u5e8f\u5217\u5316\u7c7b\u4e2d\u7528SerializerMethodField()\u6765\u5b9e\u73b0 \u7b2c\u4e8c\u79cd(\u63d0\u5021)\uff1a\u5728\u6a21\u578b\u7c7b\u4e2d\u7528@property\u6765\u5b9e\u73b0\uff0c \u63d2\u62d4\u5f0f\u8bbe\u8ba1 \u81ea\u5b9a\u4e49\u53cd\u5e8f\u5217\u5316\u5b57\u6bb5\uff1a \u540cSerializer\u7c7b\uff0c\u4e14\u89c4\u5219\u53ea\u80fd\u5728\u6b64\u58f0\u660e\u4e2d\u8bbe\u7f6e\uff0c\u6216\u662f\u5728\u94a9\u5b50\u51fd\u6570\u4e2d\u8bbe\u7f6e\uff0c\u5728extra_kwargs\u4e2d\u5bf9\u5176\u8bbe\u7f6e\u7684\u65e0\u6548 \u81ea\u5b9a\u4e49\u53cd\u5e8f\u5217\u5316\u5b57\u6bb5\u4e0e\u7cfb\u7edf\u5b57\u6bb5\uff0c\u8bbe\u7f6e\u89c4\u5219\u4e00\u6837\uff0c\u6240\u4ee5\u5fc5\u987b\u8bbe\u7f6e write_only \u5c40\u90e8\u94a9\u5b50\u3001\u5168\u5c40\u94a9\u5b50\u548cSerializer\u7c7b\u4e00\u6837 \u4e0d\u9700\u8981\u91cd\u5199create\u548cupdate\u65b9\u6cd5","title":"03 drf\u5e8f\u5217\u5316\u5bb6\u65cf"},{"location":"django%20rest%20framework/03%20drf%E5%BA%8F%E5%88%97%E5%8C%96%E5%AE%B6%E6%97%8F/#drf","text":"","title":"drf\u5e8f\u5217\u5316\u5bb6\u65cf"},{"location":"django%20rest%20framework/03%20drf%E5%BA%8F%E5%88%97%E5%8C%96%E5%AE%B6%E6%97%8F/#_1","text":"# view.py class UserV1ApiView ( APIView ): def get ( self , request , * args , ** kwargs ): pk = kwargs . get ( 'pk' ) if pk : user_dic = models . User . objects . filter ( is_delete = False , pk = pk ) . values ( 'username' , 'sex' , 'img' ) . first () if not user_dic : return Response ({ 'status' : 1 , 'msg' : 'pk error' , }, status = 400 ) user_dic [ 'img' ] = ' %s%s%s ' % ( settings . BASE_URL , settings . MEDIA_URL , user_dic . get ( 'img' )) return Response ({ 'status' : 0 , 'msg' : 'ok' , 'results' : user_dic }) else : user_query = models . User . objects . filter ( is_delete = False ) . values ( 'username' , 'sex' , 'img' ) . all () for user_dic in user_query : user_dic [ 'img' ] = ' %s%s%s ' % ( settings . BASE_URL , settings . MEDIA_URL , user_dic . get ( 'img' )) user_list = list ( user_query ) return Response ({ 'status' : 0 , 'msg' : 'ok' , 'results' : user_list })","title":"\u5728\u89c6\u56fe\u4e2d\u624b\u52a8\u5b8c\u6210\u5e8f\u5217\u5316\u64cd\u4f5c"},{"location":"django%20rest%20framework/03%20drf%E5%BA%8F%E5%88%97%E5%8C%96%E5%AE%B6%E6%97%8F/#serializer","text":"\u7b80\u5355\u6765\u8bf4\uff0c\u5e8f\u5217\u5316\u5c31\u662f\u5c06\u6570\u636e\u7ed9\u524d\u53f0\uff1b\u53cd\u5e8f\u5217\u5316\u5c31\u662f\u5b8c\u6210\u6570\u636e\u5e93\u5165\u5e93 \u89c6\u56fe\u7c7b\u5e8f\u5217\u5316\u8fc7\u7a0b\uff1a ORM\u64cd\u4f5c\u5f97\u5230\u6570\u636e \u5c06\u6570\u636e\u5e8f\u5217\u5316\u6210\u53ef\u4ee5\u8fd4\u56de\u7ed9\u524d\u7aef\u7684\u6570\u636e \u5c06\u6570\u636e\u8fd4\u56de\u7ed9\u524d\u53f0 # views.py from . import serializers class UserV2APIView ( APIView ): # \u5355\u67e5\u7fa4\u67e5 def get ( self , request , * args , ** kwargs ): pk = kwargs . get ( 'pk' ) if pk : user_obj = models . User . objects . filter ( is_delete = False , pk = pk ) . first () if not user_obj : return Response ({ 'status' : 1 , 'msg' : 'pk error' , }, status = 400 ) user_ser = serializers . UserSerializer ( user_obj , many = False ) # many\u9ed8\u8ba4\u4e3aFalse user_obj_data = user_ser . data return Response ({ 'status' : 0 , 'msg' : 'ok' , 'results' : user_obj_data }) else : # \u5c06\u5bf9\u8c61\u5bf9\u5916\u63d0\u4f9b\u7684\u5b57\u6bb5\uff0c\u5df2\u7ecf\u6574\u4e2a\u5e8f\u5217\u5316\u8fc7\u7a0b\u5c01\u88c5\uff0c\u5f62\u6210\u5e8f\u5217\u5316\u7c7b user_query = models . User . objects . filter ( is_delete = False ) . all () user_ser = serializers . UserSerializer ( user_query , many = True ) user_list_data = user_ser . data return Response ({ 'status' : 0 , 'msg' : 'ok' , 'results' : user_list_data }) # \u5e8f\u5217\u5316\u7c7b serializer.py class UserSerializer ( serializers . Serializer ): # \u5b57\u6bb5\u540d\u4e0e\u5b57\u6bb5\u7c7b\u578b\u4e0emodel\u8981\u4e00\u81f4 # \u6ca1\u6709\u7684\u5b57\u6bb5\u4e0d\u53c2\u4e0e\u5e8f\u5217\u5316\u7ed9\u524d\u7aef # \u53ef\u4ee5\u81ea\u5b9a\u4e49\u5e8f\u5217\u5316\u5b57\u6bb5\uff0c\u91c7\u7528\u65b9\u6cd5\u5e8f\u5217\u5316\uff0c\u65b9\u6cd5\u56fa\u5b9a\u4e24\u4e2a\u53c2\u6570\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u5c31\u662f\u53c2\u4e0e\u5e8f\u5217\u5316\u7684model\u5bf9\u8c61 # \u4e25\u91cd\u4e0d\u5efa\u8bae\u81ea\u5b9a\u4e49\u5b57\u6bb5\u540d\u4e0e\u6570\u636e\u5e93\u5b57\u6bb5\u540d\u91cd\u540d\uff0c\u7531get_\u81ea\u5b9a\u4e49\u5b57\u6bb5\u540d\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u63d0\u4f9b\u5b57\u6bb5\u503c username = serializers . CharField () # sex = serializers.IntegerField() # sex = serializers.SerializerMethodField() # \u4e0d\u5efa\u8bae\u8fd9\u6837\u547d\u540d gender = serializers . SerializerMethodField () def get_gender ( self , obj ): return obj . get_sex_display () # \u6ce8\uff1a\u5728\u9ad8\u7ea7\u5e8f\u5217\u5316\u4e0e\u9ad8\u7ea7\u89c6\u56fe\u7c7b\u4e2d\uff0cdrf\u9ed8\u8ba4\u5e2e\u6211\u4eec\u5904\u7406\u56fe\u7247\u7b49\u5b50\u8d44\u6e90 icon = serializers . SerializerMethodField () def get_icon ( self , obj ): return ' %s%s%s ' % ( settings . BASE_URL , settings . MEDIA_URL , obj . img )","title":"Serializer\u5e8f\u5217\u5316"},{"location":"django%20rest%20framework/03%20drf%E5%BA%8F%E5%88%97%E5%8C%96%E5%AE%B6%E6%97%8F/#serializer_1","text":"\u8bbe\u7f6e\u5e8f\u5217\u5316\u5b57\u6bb5\uff0c\u5b57\u6bb5\u540d\u4e0e\u5b57\u6bb5\u7c7b\u578b\u8981\u4e0e\u5904\u7406\u7684model\u7c7b\u5c5e\u6027\u540d\u5b57\u5bf9\u5e94\uff0c\u53ea\u53c2\u4e0e\u5e8f\u5217\u5316\u7684\u7c7b\u578b\u4e0d\u9700\u8981\u8bbe\u7f6e\u6761\u4ef6 model\u6a21\u578b\u7c7b\u4e2d\u6709\u7684\u5b57\u6bb5\uff0c\u800c\u5728\u5e8f\u5217\u5316\u4e2d\u6ca1\u6709\u7684\u5bf9\u5e94\u5b57\u6bb5\uff0c\u8be5\u5b57\u6bb5\u4e0d\u53c2\u4e0e\u5e8f\u5217\u5316 \u81ea\u5b9a\u4e49\u5e8f\u5217\u5316\u5b57\u6bb5\uff0c\u5b57\u6bb5\u7c7b\u578b\u4e3aSerializerMethodField()\uff0c\u503c\u6709 get \u81ea\u5b9a\u4e49\u5b57\u6bb5\u540d(self, model obj) \u65b9\u6cd5\u63d0\u4f9b\uff0c\u4e00\u822c\u503c\u90fd\u4e0e\u53c2\u4e0e\u5e8f\u5217\u5316\u7684model\u5bf9\u8c61(model_obj)\u6709\u5173","title":"Serializer\u5e8f\u5217\u5316\u603b\u7ed3\uff1a"},{"location":"django%20rest%20framework/03%20drf%E5%BA%8F%E5%88%97%E5%8C%96%E5%AE%B6%E6%97%8F/#serializer_2","text":"\u89c6\u56fe\u7c7b\u53cd\u5e8f\u5217\u5316\u8fc7\u7a0b\uff1a \u4ece\u8bf7\u6c42\u5bf9\u8c61\u4e2d\u83b7\u53d6\u524d\u53f0\u63d0\u4ea4\u7684\u6570\u636e \u4ea4\u7ed9\u5e8f\u5217\u5316\u7c7b\u5b8c\u6210\u53cd\u5e8f\u5217\u5316\uff08\u6570\u636e\u7684\u6821\u9a8c\uff09 \u501f\u52a9\u5e8f\u5217\u5316\u5b8c\u6210\u6570\u636e\u5165\u5e93 \u53cd\u9988\u7ed9\u524d\u53f0\u5904\u7406\u7ed3\u679c # views.py class UserV2ApiView ( APIView ): def get ( self , request , * args , ** kwargs ): pk = kwargs . get ( 'pk' ) if pk : user_obj = models . User . objects . filter ( is_delete = False , pk = pk ) . first () if not user_obj : return Response ({ 'status' : 1 , 'msg' : 'pk error' , }, status = 400 ) user_ser = serializer . UserSerializer ( user_obj , many = False ) user_obj . data = user_ser . data return Response ({ 'status' : 0 , 'msg' : 'ok' , 'results' : user_obj . data }) else : user_query = models . User . objects . filter ( is_delete = False ) . all () user_ser = serializer . UserSerializer ( user_query , many = True ) user_list = user_ser . data return Response ({ 'status' : 0 , 'msg' : 'ok' , 'results' : user_list }) # \u5355\u589e def post ( self , request , * args , ** kwargs ): request_data = request . data user_ser = serializer . UserDeSerializer ( data = request_data ) if user_ser . is_valid (): # \u5165\u5e93 user_obj = user_ser . save () return Response ({ 'status' : 0 , 'msg' : 'ok' , 'results' : serializer . UserSerializer ( user_obj ) . data # \u5c06\u5165\u5e93\u5f97\u5230\u7684user\u5bf9\u8c61\u91cd\u65b0\u5e8f\u5217\u5316\u7684\u6570\u636e\u8fd4\u56de\u7ed9\u524d\u53f0 }) else : return Response ({ 'status' : 1 , 'msg' : user_ser . errors }) # \u5e8f\u5217\u5316\u7c7b serializer.py class UserDeSerializer ( serializers . Serializer ): # \u7cfb\u7edf\u6821\u9a8c\u5b57\u6bb5 username = serializers . CharField ( max_length = 10 , min_length = 2 , error_messages = { 'max_length' : '\u592a\u957f' , 'min_length' : '\u592a\u5c0f' }) password = serializers . CharField ( max_length = 10 , min_length = 2 ) # \u4e0d\u5199\uff0c\u4e0d\u53c2\u4e0e\u53cd\u5e8f\u5217\u5316\uff0c\u5199\u5c31\u5fc5\u987b\u53c2\u4e0e\u53cd\u5e8f\u5217\u5316(\u4f46\u53ef\u4ee5\u8bbe\u7f6erequired=False\u53d6\u6d88\u5fc5\u987b) # required=False\u7684\u5b57\u6bb5\uff0c\u524d\u53f0\u4e0d\u63d0\u4f9b\uff0c\u8d70\u9ed8\u8ba4\u503c\uff0c\u63d0\u4f9b\u5c31\u4e00\u5b9a\u8fdb\u884c\u6821\u9a8c\uff1b\u4e0d\u5199 \u524d\u53f0\u63d0\u4e0d\u63d0\u4f9b\u90fd\u91c7\u7528\u9ed8\u8ba4\u503c sex = serializers . BooleanField ( required = False ) # \u81ea\u5b9a\u4e49\u6821\u9a8c\u5b57\u6bb5\uff1a\u8bbe\u7f6e\u8bed\u6cd5\u4e0e\u7cfb\u7edf\u5b57\u6bb5\u6ca1\u6709\u533a\u522b\uff0c\u4f46\u662f\u8fd9\u4e9b\u5b57\u6bb5\u4e0d\u80fd\u53c2\u4e0e\u5165\u5e93\u64cd\u4f5c\uff0c\u9700\u8981\u5728\u5168\u5c40\u94a9\u5b50\u4e2d\uff0c\u5c06\u5176\u53d6\u51fa re_password = serializers . CharField ( max_length = 10 , min_length = 2 ) # \u5c40\u90e8\u94a9\u5b50 def validate_username ( self , value ): if 'y' in value : raise serializers . ValidationError ( \"\u540d\u5b57\u4e2d\u4e0d\u80fd\u6709y\" ) return value # \u5168\u5c40\u94a9\u5b50 def validate ( self , attrs ): password = attrs . get ( 'password' ) re_password = attrs . pop ( 're_password' ) if re_password != password : raise serializers . ValidationError ( '\u4e24\u6b21\u5bc6\u7801\u4e0d\u4e00\u81f4' ) return attrs # \u5728\u89c6\u56fe\u7c7b\u4e2d\u8c03\u7528\u5e8f\u5217\u5316\u7c7b\u7684save\u65b9\u6cd5\u5b8c\u6210\u5165\u5e93\uff0cSerializer\u7c7b\u80fd\u505a\u7684\u5c31\u662f \u589e \u5165\u5e93\u8d70create\u65b9\u6cd5\uff0c\u6539 \u5165\u5e93\u8d70update\u65b9\u6cd5\uff0c\u4f46Serializer\u6ca1\u6709\u63d0\u4f9b\u4e24\u4e2a\u65b9\u6cd5\u7684\u5b9e\u73b0\u4f53\u3002 def create ( self , validated_data ): return models . User . objects . create ( ** validated_data ) # instance\u8981\u88ab\u4fee\u6539\u7684\u5bf9\u8c61\uff0cvalidated_data\u4ee3\u8868\u6821\u9a8c\u540e\u7528\u6765\u6539instance\u7684\u6570\u636e def update ( self , instance , validated_data ): # \u7528\u6237\u540d\u4e0d\u80fd\u4fee\u6539 validated_data . pop ( 'username' ) models . User . objects . filter ( pk = instance . id ) . update ( ** validated_data ) return instance \u5c40\u90e8\u94a9\u5b50\uff1a \u65b9\u6cd5\u5c31\u662f validate_\u6821\u9a8c\u7684\u5b57\u6bb5\u540d(self, \u6821\u9a8c\u7684\u5b57\u6bb5\u6570\u636e) \u6821\u9a8c\u89c4\u5219\uff1a\u6210\u529f\u76f4\u63a5\u8fd4\u56devalue\uff0c\u5931\u8d25\u629b\u51fa\u6821\u9a8c\u5931\u8d25\u4fe1\u606f \u5168\u5c40\u94a9\u5b50\uff1a \u65b9\u6cd5\u5c31\u662f validate(self, \u6240\u6709\u7684\u6821\u9a8c\u6570\u636e) \u6821\u9a8c\u89c4\u5219\uff1a\u6210\u529f\u76f4\u63a5\u8fd4\u56deattrs\uff0c\u5931\u8d25\u629b\u51fa\u6821\u9a8c\u5931\u8d25\u4fe1\u606f","title":"Serializer\u53cd\u5e8f\u5217\u5316"},{"location":"django%20rest%20framework/03%20drf%E5%BA%8F%E5%88%97%E5%8C%96%E5%AE%B6%E6%97%8F/#serializer_3","text":"\u7cfb\u7edf\u6821\u9a8c \u4e0e \u81ea\u5b9a\u4e49\u6821\u9a8c\u5b57\u6bb5\u6ca1\u6709\u533a\u522b \u81ea\u5b9a\u4e49\u6821\u9a8c\u5b57\u6bb5\u662f\u4e0d\u80fd\u76f4\u63a5\u5165\u5e93\u7684\uff0c\u9700\u8981\u8bbe\u7f6e\u5165\u5e93\u89c4\u5219\uff0c\u6216\u5c06\u5176\u79fb\u9664\u4e0d\u5165\u5e93(\u8fd9\u7c7b\u5b57\u6bb5\u5c31\u662f\u53c2\u4e0e\u5168\u5c40\u6821\u9a8c\u7528\u7684) \u6240\u6709\u5b57\u6bb5\u90fd\u53ef\u4ee5\u8bbe\u7f6e\u5bf9\u5e94\u7684\u5c40\u90e8\u94a9\u5b50\u8fdb\u884c\u6821\u9a8c\uff0c\u94a9\u5b50\u65b9\u6cd5 validate_\u5b57\u6bb5\u540d(self, \u5b57\u6bb5\u503cvalue) \u89c4\u5219\uff1a\u6210\u529f\u76f4\u63a5\u8fd4\u56devalue\uff0c\u5931\u8d25\u629b\u51fa\u6821\u9a8c\u5931\u8d25\u4fe1\u606f ValidationError('\u9519\u8bef\u4fe1\u606f') \u4e00\u4e2a\u5e8f\u5217\u5316\u7c7b\u5b58\u5728 \u4e00\u4e2a\u5168\u5c40\u94a9\u5b50 \u53ef\u4ee5\u5bf9\u6240\u6709\u5b57\u6bb5\u8fdb\u884c\u5168\u5c40\u6821\u9a8c\uff0c\u94a9\u5b50\u65b9\u6cd5 validate(self, \u6240\u6709\u5b57\u6bb5\u503c\u5b57\u5178attrs) \u91cd\u5199create\u65b9\u6cd5\u5b9e\u73b0\u589e\u5165\u5e93\uff0c\u91cd\u5199update\u65b9\u6cd5\u5b9e\u73b0\u6539\u5165\u5e93\uff0c\u90fd\u4f1a\u8fd4\u56de\u5165\u5e93\u6210\u529f\u7684\u5bf9\u8c61","title":"Serializer\u53cd\u5e8f\u5217\u5316\u603b\u7ed3\uff1a"},{"location":"django%20rest%20framework/03%20drf%E5%BA%8F%E5%88%97%E5%8C%96%E5%AE%B6%E6%97%8F/#modelserializer","text":"# \u6a21\u578b\u7c7b class User ( models . Model ): SEX_CHOICES = ( ( 0 , '\u5973' ), ( 1 , '\u7537' ) ) username = models . CharField ( max_length = 64 , blank = True , unique = True , verbose_name = '\u59d3\u540d' ) password = models . CharField ( max_length = 64 , verbose_name = '\u5bc6\u7801' ) sex = models . IntegerField ( choices = SEX_CHOICES , default = 0 , verbose_name = '\u6027\u522b' ) img = models . ImageField ( upload_to = 'img' , default = 'img/default.jpg' , verbose_name = '\u5934\u50cf' ) # \u5f00\u53d1\u4e2d\uff0c\u6570\u636e\u4e0d\u4f1a\u76f4\u63a5\u5220\u9664\uff0c\u901a\u8fc7\u5b57\u6bb5\u63a7\u5236 is_delete = models . BooleanField ( default = False , verbose_name = '\u662f\u5426\u6ce8\u9500' ) created_time = models . DateTimeField ( auto_now_add = True , verbose_name = '\u521b\u5efa\u65f6\u95f4' ) # \u7b2c\u4e8c\u79cd\u81ea\u5b9a\u4e49\u5e8f\u5217\u5316\u5b57\u6bb5\uff08\u63d2\u62d4\u5f0f\uff0c\u63d0\u5021\u4f7f\u7528\uff09 @property def gender ( self ): return self . get_sex_display () @property def icon ( self ): from django.conf import settings return ' %s%s%s ' % ( settings . BASE_URL , settings . MEDIA_URL , self . img ) class Meta : db_table = 'table_user' verbose_name_plural = '\u7528\u6237\u8868' def __str__ ( self ): return self . username # views.py class UserV3ApiView ( APIView ): # \u5355\u67e5\u7fa4\u67e5 def get ( self , request , * args , ** kwargs ): pk = kwargs . get ( 'pk' ) if pk : user_obj = models . User . objects . filter ( is_delete = False , pk = pk ) . first () if not user_obj : return Response ({ 'status' : 1 , 'msg' : 'pk error' , }, status = 400 ) user_ser = serializer . UserModelSerializer ( user_obj , many = False ) return Response ({ 'status' : 0 , 'msg' : 'ok' , 'results' : user_ser . data }) else : user_query = models . User . objects . filter ( is_delete = False ) . all () user_ser = serializer . UserModelSerializer ( user_query , many = True ) return Response ({ 'status' : 0 , 'msg' : 'ok' , 'results' : user_ser . data }) # \u5355\u589e def post ( self , request , * args , ** kwargs ): user_ser = serializer . UserModelSerializer ( data = request . data ) if user_ser . is_valid (): user_obj = user_ser . save () return Response ({ 'status' : 0 , 'msg' : 'ok' , 'results' : serializer . UserModelSerializer ( user_obj ) . data }) else : return Response ({ 'status' : 1 , 'msg' : user_ser . errors }) # \u5e8f\u5217\u5316\u7c7b class UserModelSerializer ( serializers . ModelSerializer ): re_password = serializers . CharField ( max_length = 10 , min_length = 2 , write_only = True ) class Meta : model = models . User # fields\u91c7\u7528 \u63d2\u62d4\u5f0f \u8bbe\u7f6e\u6240\u6709\u53c2\u4e0e\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316\u5b57\u6bb5 fields = ( 'username' , 'gender' , 'icon' , 'password' , 'sex' , 're_password' ) extra_kwargs = { 'username' : { # \u7cfb\u7edf\u5b57\u6bb5\u4e0d\u8bbe\u7f6eread_only\u548cwrite_only\uff0c\u9ed8\u8ba4\u90fd\u53c2\u52a0 'min_length' : 2 , 'max_length' : 10 , 'error_messages' : { 'min_length' : '\u592a\u77ed' , 'max_length' : '\u592a\u957f' } }, 'gender' : { 'read_only' : True , # \u81ea\u5b9a\u4e49\u7684\u5e8f\u5217\u5316\u5b57\u6bb5\u9ed8\u8ba4\u5c31\u662fread_only\uff0c\u4e14\u4e0d\u80fd\u4fee\u6539\uff0c\u53ef\u4ee5\u7701\u7565 }, 'password' : { 'write_only' : True }, 'sex' : { # \u50cfsex\u6709\u9ed8\u8ba4\u503c\u7684\u5b57\u6bb5\uff0c\u4e3a\u9009\u586b\u5b57\u6bb5\uff08'required': True\u53ef\u4ee5\u5c06\u5176\u53d8\u4e3a\u5fc5\u586b\u5b57\u6bb5\uff09 'write_only' : True , # 'required': True } } # \u5c40\u90e8\u5168\u5c40\u94a9\u5b50\u540cSerializer\u7c7b\uff0c\u662f\u4e0e Meta \u540c\u7f29\u8fdb\u7684 def validate_username ( self , value ): if 'y' in value : raise serializers . ValidationError ( '\u540d\u5b57\u4e2d\u4e0d\u80fd\u6709y' ) return value def validate ( self , attrs ): password = attrs . get ( 'password' ) re_password = attrs . pop ( \"re_password\" ) if password != re_password : raise serializers . ValidationError ( '\u4e24\u6b21\u5bc6\u7801\u4e0d\u4e00\u81f4' ) return attrs","title":"ModelSerializer\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316"},{"location":"django%20rest%20framework/03%20drf%E5%BA%8F%E5%88%97%E5%8C%96%E5%AE%B6%E6%97%8F/#modelserializer_1","text":"\u5e8f\u5217\u5316\u7c7b\u7ee7\u627fModelSerializer\uff0c\u6240\u4ee5\u9700\u8981\u5728\u914d\u7f6e\u7c7bMeta\u4e2d\u8fdb\u884c\u914d\u7f6e model\u914d\u7f6e\uff1a\u7ed1\u5b9a\u5e8f\u5217\u5316\u76f8\u5173\u7684Model\u6a21\u578b\u8868 fields\u914d\u7f6e\uff1a\u91c7\u7528\u63d2\u62d4\u5f0f\u8bbe\u8ba1\uff0c \u8bbe\u7f6e\u6240\u6709\u53c2\u4e0e\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316\u5b57\u6bb5 extra_kwargs\u7684\u914d\u7f6e\uff1a \u7cfb\u7edf\u5b57\u6bb5\u5212\u5206\u4e3a\u4e09\u79cd\uff1a\u53ea\u8bfb(read only)\u3001\u53ea\u5199(write only)\u3001\u53ef\u8bfb\u53ef\u5199(\u4e0d\u8bbe\u7f6e) \u5b57\u6bb5\u662f\u5426\u5fc5\u987b\u4f7f\u7528 required\u8bbe\u7f6e\uff0c \u9009\u586b\u5b57\u6bb5\uff1a\u5728extra_kwargs\u8fdb\u884c\u914d\u7f6e\uff0c\u4f46\u4e0d\u8bbe\u7f6erequired\uff0c\u4e14\u6709\u9ed8\u8ba4\u503c \u81ea\u5b9a\u4e49\u5e8f\u5217\u5316\u5b57\u6bb5\uff1a \u7b2c\u4e00\u79cd(\u4e0d\u63d0\u5021)\uff1a\u5728\u5e8f\u5217\u5316\u7c7b\u4e2d\u7528SerializerMethodField()\u6765\u5b9e\u73b0 \u7b2c\u4e8c\u79cd(\u63d0\u5021)\uff1a\u5728\u6a21\u578b\u7c7b\u4e2d\u7528@property\u6765\u5b9e\u73b0\uff0c \u63d2\u62d4\u5f0f\u8bbe\u8ba1 \u81ea\u5b9a\u4e49\u53cd\u5e8f\u5217\u5316\u5b57\u6bb5\uff1a \u540cSerializer\u7c7b\uff0c\u4e14\u89c4\u5219\u53ea\u80fd\u5728\u6b64\u58f0\u660e\u4e2d\u8bbe\u7f6e\uff0c\u6216\u662f\u5728\u94a9\u5b50\u51fd\u6570\u4e2d\u8bbe\u7f6e\uff0c\u5728extra_kwargs\u4e2d\u5bf9\u5176\u8bbe\u7f6e\u7684\u65e0\u6548 \u81ea\u5b9a\u4e49\u53cd\u5e8f\u5217\u5316\u5b57\u6bb5\u4e0e\u7cfb\u7edf\u5b57\u6bb5\uff0c\u8bbe\u7f6e\u89c4\u5219\u4e00\u6837\uff0c\u6240\u4ee5\u5fc5\u987b\u8bbe\u7f6e write_only \u5c40\u90e8\u94a9\u5b50\u3001\u5168\u5c40\u94a9\u5b50\u548cSerializer\u7c7b\u4e00\u6837 \u4e0d\u9700\u8981\u91cd\u5199create\u548cupdate\u65b9\u6cd5","title":"ModelSerializer\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316\u603b\u7ed3\uff1a"},{"location":"django%20rest%20framework/04%20%E8%A1%A8%E5%85%B3%E7%B3%BB/","text":"\u8868\u5173\u7cfb # \u57fa\u672c\u6982\u5ff5 # \u57fa\u8868\uff1a\u4e3a\u62bd\u8c61\u8868\uff0c\u662f\u4e13\u95e8\u7528\u6765\u7ee7\u627f\uff0c\u63d0\u4f9b\u516c\u6709\u5b57\u6bb5\uff0c\u81ea\u8eab\u4e0d\u4f1a\u5b8c\u6210\u6570\u636e\u5e93\u8fc1\u79fb class BaseModel ( models . Model ): is_delete = models . BooleanField ( default = False ) created_time = models . DateTimeField ( auto_now_add = True ) class Meta : # \u57fa\u8868\uff0c\u4e3a\u62bd\u8c61\u8868\uff0c\u662f\u4e13\u95e8\u7528\u6765\u548c\u7ee7\u627f\uff0c\u63d0\u4f9b\u516c\u6709\u5b57\u6bb5\uff0c\u81ea\u8eab\u4e0d\u4f1a\u5b8c\u6210\u6570\u636e\u5e93\u8fc1\u79fb abstract = True \u65ad\u5173\u8054\u8868\u5173\u7cfb # \u4e0d\u4f1a\u5f71\u54cd\u8fde\u8868\u67e5\u8be2\u64cd\u4f5c\u6548\u7387 \u4f1a\u63d0\u5347\u8fde\u8868\u589e\u5220\u6539\u64cd\u4f5c\u6548\u7387 \u6613\u4e8e\u540e\u671f\u6570\u636e\u5e93\u8868\u7684\u91cd\u6784 \u7f3a\u70b9\u5728\u4e8e\uff0c\u6570\u636e\u5e93\u672c\u8eab\u6ca1\u6709\u8fde\u8868\u68c0\u6d4b\uff0c\u5bb9\u6613\u51fa\u73b0\u810f\u6570\u636e\uff0c\u9700\u8981\u901a\u8fc7\u4e25\u683c\u7684\u903b\u8f91\u907f\u514d\u810f\u6570\u636e\u7684\u53c2\u6570 A\u4f9d\u8d56B\uff0c\u5148\u63d2\u5165A\u8bb0\u5f55\uff0c\u8be5\u8bb0\u5f55\u5bf9\u5e94\u7684B\u8bb0\u5f55\u6ca1\u4ea7\u751f\uff0c\u5728\u6ca1\u6709\u5173\u8054\u7684\u60c5\u51b5\u4e0b\uff0c\u8be5\u64cd\u4f5c\u53ef\u4ee5\u5b9e\u73b0\uff0c\u4f46\u662f\u6570\u636e\u5c31\u662f\u810f\u6570\u636e\uff1b\u63a5\u7740\u518d\u5c06B\u6570\u636e\u6dfb\u52a0\uff0c\u810f\u6570\u636e\u5c31\u5f97\u5230\u5904\u7406\u4e86\u3002\u53cd\u8fc7\u6765\u5148\u64cd\u4f5cB\u540e\u64cd\u4f5cA\uff0c\u66f4\u6ee1\u8db3\u903b\u8f91\u601d\u7ef4\uff0c\u4e00\u6837\u53ef\u4ee5\u6267\u884c\u3002\u901a\u8fc7\u903b\u8f91\u5c06AB\u8868\u8fdb\u884c\u8fde\u8868\u67e5\u8be2\uff0c\u4e0d\u4f1a\u6709\u4efb\u4f55\u5f02\u5e38 \u5efa\u7acb\u8868\u5173\u7cfb # Book\u8868\u548c Publish\u8868 \u662f\u4e00\u5bf9\u591a\uff1a\u5916\u952e\u5728\u591a\u7684\u4e00\u65b9 Book Book\u548cAuthor\u591a\u5bf9\u591a\uff1a\u5916\u952e\u5728\u67e5\u8be2\u9891\u7387\u9ad8\u7684\u4e00\u65b9 Book Author\u548cAuthorDetail \u4e00\u5bf9\u4e00\uff1a\u5916\u952e\u8981\u6839\u636e\u5b9e\u9645\u9700\u6c42\u5efa\u7acb\u5728\u5408\u9002\u7684\u4f4d\u7f6e AuthorDetail class Book ( BaseModel ): name = models . CharField ( max_length = 64 ) price = models . DecimalField ( max_digits = 10 , decimal_places = 2 ) publish = models . ForeignKey ( to = 'Publish' , related_name = 'books' , db_constraint = False , on_delete = models . DO_NOTHING , null = True ) authors = models . ManyToManyField ( to = 'Author' , related_name = 'books' , db_constraint = False ) def __str__ ( self ): return self . name class Publish ( BaseModel ): name = models . CharField ( max_length = 64 ) address = models . CharField ( max_length = 64 ) class Author ( BaseModel ): name = models . CharField ( max_length = 64 ) class AuthorDetail ( BaseModel ): phone = models . CharField ( max_length = 64 ) author = models . OneToOneField ( to = Author , related_name = 'detail' , on_delete = models . CASCADE , db_constraint = False ) \u5916\u952e\u5b57\u6bb5\u5c5e\u6027 # related name\u5728\u5916\u952e\u4e2d\u8bbe\u7f6e\u5916\u952e\u53cd\u5411\u67e5\u8be2\u7684\u5b57\u6bb5\u540d\uff1a\u6b63\u5411\u67e5\u5b57\u6bb5\u540d\uff0c\u53cd\u5411\u67e5related name on_delete\u5728\u5916\u952e\u4e2d\u5fc5\u987b\u8bbe\u7f6e\uff0c\u8868\u793a\u7ea7\u8054\u5173\u7cfb\uff0c\u5728Django 1.x\u4e0b\uff0c \u7cfb\u7edf\u9ed8\u8ba4\u63d0\u4f9b\uff08\u503c\u4e3amodels.CASCADE\uff09\uff0cDjango 2.x\u4e0b\uff0c\u5fc5\u987b\u624b\u52a8\u660e\u786e CASCADE\uff1a\u9ed8\u8ba4\u503c\uff0c\u7ea7\u8054 DO_NOTHING\uff1a\u5916\u952e\u4e0d\u4f1a\u88ab\u7ea7\u8054\uff0c\u5047\u8bbeA\u8868\u4f9d\u8d56B\u8868\uff0cB\u8bb0\u5f55\u5220\u9664\uff0cA\u8868\u7684\u5916\u952e\u5b57\u6bb5\u4e0d\u505a\u4efb\u4f55\u5904\u7406 SET_DEFAULT\uff1a\u5047\u8bbeA\u8868\u4f9d\u8d56B\u8868\uff0cB\u8bb0\u5f55\u5220\u9664\uff0cA\u8868\u7684\u5916\u952e\u5b57\u6bb5\u8bbe\u7f6e\u4e3adefault\u5c5e\u6027\u8bbe\u7f6e\u7684\u503c\uff0c\u6240\u4ee5\u5fc5\u987b\u914d\u5408default\u5c5e\u6027\u4f7f\u7528 SET_NULL\uff1a\u5047\u8bbeA\u8868\u4f9d\u8d56B\u8868\uff0cB\u8bb0\u5f55\u5220\u9664\uff0cA\u8868\u7684\u5916\u952e\u5b57\u6bb5\u503c\u8bbe\u7f6e\u4e3anull\uff0c\u5fc5\u987b\u914d\u5408\u4f7f\u7528null=True\u5c5e\u6027\u6765\u4f7f\u7528 \u591a\u5bf9\u591a\u5b57\u6bb5\u4e0d\u80fd\u8bbe\u7f6eon_delete\u7ea7\u8054\u5173\u7cfb\uff0c\u9ed8\u8ba4\u4e3a\u7ea7\u8054\uff0c\u5982\u679c\u8981\u5904\u7406\u7ea7\u8054\u5173\u7cfb\uff0c\u9700\u8981\u624b\u52a8\u660e\u786e\u5173\u7cfb\u8868\uff0c\u5904\u7406\u5173\u7cfb\u8868\u4e2d\u591a\u4e2a\u5916\u952e db_constraint\u5728\u5916\u952e\u4e2d\u63a7\u5236\u8868\u5173\u8054\uff0c\u9ed8\u8ba4\u4e3aTrue\u8868\u793a\u5173\u8054\uff0c\u8bbe\u7f6eFalse\u8868\u793a\u65ad\u5f00\u5173\u8054 \u5b50\u5e8f\u5217\u5316\uff1a # \u53ea\u80fd\u5728\u5e8f\u5217\u5316\u4e2d\u4f7f\u7528 \u5b57\u6bb5\u540d\u5fc5\u987b\u662f\u5916\u952e\u5b57\u6bb5 \u76f8\u5bf9\u4e8e\u81ea\u5b9a\u4e49\u5e8f\u5217\u5316\u5916\u952e\u5b57\u6bb5\uff0c\u81ea\u5b9a\u4e49\u5e8f\u5217\u5316\u5b57\u6bb5\u662f\u4e0d\u80fd\u53c2\u4e0e\u53cd\u5e8f\u5217\u5316\u7684\uff0c\u800c\u5b50\u5e8f\u5217\u5316\u5fc5\u987b\u4e3a\u5916\u952e\u540d\uff0c\u6240\u4ee5\u5c31\u65e0\u6cd5\u5165\u5e93 \u5728\u5916\u952e\u5173\u8054\u6570\u636e\u662f\u591a\u4f59\u65f6\uff0c\u9700\u8981\u660e\u786e many=True \u5b50\u5e8f\u5217\u5316\u662f\u5355\u5411\u64cd\u4f5c\uff0c\u56e0\u4e3a\u4f5c\u4e3a\u5b50\u5e8f\u5217\u7684\u7c7b\u5fc5\u987b\u5199\u5728\u4e0a\u65b9\uff0c\u6240\u4ee5\u4e0d\u80fd\u4ea7\u751f\u9006\u65b9\u5411\u7684\u5b50\u5e8f\u5217\u5316 from rest_framework import serializers from . import models class BookModelSerializers ( serializers . ModelSerializer ): class Meta : model = models . Book fields = '__all__' class PublishModelSerializers ( serializers . ModelSerializer ): books = BookModelSerializers ( many = True ) class Meta : model = models . Publish # fields = '__all__' fields = [ 'name' , 'address' , 'books' ]","title":"04 \u8868\u5173\u7cfb"},{"location":"django%20rest%20framework/04%20%E8%A1%A8%E5%85%B3%E7%B3%BB/#_1","text":"","title":"\u8868\u5173\u7cfb"},{"location":"django%20rest%20framework/04%20%E8%A1%A8%E5%85%B3%E7%B3%BB/#_2","text":"\u57fa\u8868\uff1a\u4e3a\u62bd\u8c61\u8868\uff0c\u662f\u4e13\u95e8\u7528\u6765\u7ee7\u627f\uff0c\u63d0\u4f9b\u516c\u6709\u5b57\u6bb5\uff0c\u81ea\u8eab\u4e0d\u4f1a\u5b8c\u6210\u6570\u636e\u5e93\u8fc1\u79fb class BaseModel ( models . Model ): is_delete = models . BooleanField ( default = False ) created_time = models . DateTimeField ( auto_now_add = True ) class Meta : # \u57fa\u8868\uff0c\u4e3a\u62bd\u8c61\u8868\uff0c\u662f\u4e13\u95e8\u7528\u6765\u548c\u7ee7\u627f\uff0c\u63d0\u4f9b\u516c\u6709\u5b57\u6bb5\uff0c\u81ea\u8eab\u4e0d\u4f1a\u5b8c\u6210\u6570\u636e\u5e93\u8fc1\u79fb abstract = True","title":"\u57fa\u672c\u6982\u5ff5"},{"location":"django%20rest%20framework/04%20%E8%A1%A8%E5%85%B3%E7%B3%BB/#_3","text":"\u4e0d\u4f1a\u5f71\u54cd\u8fde\u8868\u67e5\u8be2\u64cd\u4f5c\u6548\u7387 \u4f1a\u63d0\u5347\u8fde\u8868\u589e\u5220\u6539\u64cd\u4f5c\u6548\u7387 \u6613\u4e8e\u540e\u671f\u6570\u636e\u5e93\u8868\u7684\u91cd\u6784 \u7f3a\u70b9\u5728\u4e8e\uff0c\u6570\u636e\u5e93\u672c\u8eab\u6ca1\u6709\u8fde\u8868\u68c0\u6d4b\uff0c\u5bb9\u6613\u51fa\u73b0\u810f\u6570\u636e\uff0c\u9700\u8981\u901a\u8fc7\u4e25\u683c\u7684\u903b\u8f91\u907f\u514d\u810f\u6570\u636e\u7684\u53c2\u6570 A\u4f9d\u8d56B\uff0c\u5148\u63d2\u5165A\u8bb0\u5f55\uff0c\u8be5\u8bb0\u5f55\u5bf9\u5e94\u7684B\u8bb0\u5f55\u6ca1\u4ea7\u751f\uff0c\u5728\u6ca1\u6709\u5173\u8054\u7684\u60c5\u51b5\u4e0b\uff0c\u8be5\u64cd\u4f5c\u53ef\u4ee5\u5b9e\u73b0\uff0c\u4f46\u662f\u6570\u636e\u5c31\u662f\u810f\u6570\u636e\uff1b\u63a5\u7740\u518d\u5c06B\u6570\u636e\u6dfb\u52a0\uff0c\u810f\u6570\u636e\u5c31\u5f97\u5230\u5904\u7406\u4e86\u3002\u53cd\u8fc7\u6765\u5148\u64cd\u4f5cB\u540e\u64cd\u4f5cA\uff0c\u66f4\u6ee1\u8db3\u903b\u8f91\u601d\u7ef4\uff0c\u4e00\u6837\u53ef\u4ee5\u6267\u884c\u3002\u901a\u8fc7\u903b\u8f91\u5c06AB\u8868\u8fdb\u884c\u8fde\u8868\u67e5\u8be2\uff0c\u4e0d\u4f1a\u6709\u4efb\u4f55\u5f02\u5e38","title":"\u65ad\u5173\u8054\u8868\u5173\u7cfb"},{"location":"django%20rest%20framework/04%20%E8%A1%A8%E5%85%B3%E7%B3%BB/#_4","text":"Book\u8868\u548c Publish\u8868 \u662f\u4e00\u5bf9\u591a\uff1a\u5916\u952e\u5728\u591a\u7684\u4e00\u65b9 Book Book\u548cAuthor\u591a\u5bf9\u591a\uff1a\u5916\u952e\u5728\u67e5\u8be2\u9891\u7387\u9ad8\u7684\u4e00\u65b9 Book Author\u548cAuthorDetail \u4e00\u5bf9\u4e00\uff1a\u5916\u952e\u8981\u6839\u636e\u5b9e\u9645\u9700\u6c42\u5efa\u7acb\u5728\u5408\u9002\u7684\u4f4d\u7f6e AuthorDetail class Book ( BaseModel ): name = models . CharField ( max_length = 64 ) price = models . DecimalField ( max_digits = 10 , decimal_places = 2 ) publish = models . ForeignKey ( to = 'Publish' , related_name = 'books' , db_constraint = False , on_delete = models . DO_NOTHING , null = True ) authors = models . ManyToManyField ( to = 'Author' , related_name = 'books' , db_constraint = False ) def __str__ ( self ): return self . name class Publish ( BaseModel ): name = models . CharField ( max_length = 64 ) address = models . CharField ( max_length = 64 ) class Author ( BaseModel ): name = models . CharField ( max_length = 64 ) class AuthorDetail ( BaseModel ): phone = models . CharField ( max_length = 64 ) author = models . OneToOneField ( to = Author , related_name = 'detail' , on_delete = models . CASCADE , db_constraint = False )","title":"\u5efa\u7acb\u8868\u5173\u7cfb"},{"location":"django%20rest%20framework/04%20%E8%A1%A8%E5%85%B3%E7%B3%BB/#_5","text":"related name\u5728\u5916\u952e\u4e2d\u8bbe\u7f6e\u5916\u952e\u53cd\u5411\u67e5\u8be2\u7684\u5b57\u6bb5\u540d\uff1a\u6b63\u5411\u67e5\u5b57\u6bb5\u540d\uff0c\u53cd\u5411\u67e5related name on_delete\u5728\u5916\u952e\u4e2d\u5fc5\u987b\u8bbe\u7f6e\uff0c\u8868\u793a\u7ea7\u8054\u5173\u7cfb\uff0c\u5728Django 1.x\u4e0b\uff0c \u7cfb\u7edf\u9ed8\u8ba4\u63d0\u4f9b\uff08\u503c\u4e3amodels.CASCADE\uff09\uff0cDjango 2.x\u4e0b\uff0c\u5fc5\u987b\u624b\u52a8\u660e\u786e CASCADE\uff1a\u9ed8\u8ba4\u503c\uff0c\u7ea7\u8054 DO_NOTHING\uff1a\u5916\u952e\u4e0d\u4f1a\u88ab\u7ea7\u8054\uff0c\u5047\u8bbeA\u8868\u4f9d\u8d56B\u8868\uff0cB\u8bb0\u5f55\u5220\u9664\uff0cA\u8868\u7684\u5916\u952e\u5b57\u6bb5\u4e0d\u505a\u4efb\u4f55\u5904\u7406 SET_DEFAULT\uff1a\u5047\u8bbeA\u8868\u4f9d\u8d56B\u8868\uff0cB\u8bb0\u5f55\u5220\u9664\uff0cA\u8868\u7684\u5916\u952e\u5b57\u6bb5\u8bbe\u7f6e\u4e3adefault\u5c5e\u6027\u8bbe\u7f6e\u7684\u503c\uff0c\u6240\u4ee5\u5fc5\u987b\u914d\u5408default\u5c5e\u6027\u4f7f\u7528 SET_NULL\uff1a\u5047\u8bbeA\u8868\u4f9d\u8d56B\u8868\uff0cB\u8bb0\u5f55\u5220\u9664\uff0cA\u8868\u7684\u5916\u952e\u5b57\u6bb5\u503c\u8bbe\u7f6e\u4e3anull\uff0c\u5fc5\u987b\u914d\u5408\u4f7f\u7528null=True\u5c5e\u6027\u6765\u4f7f\u7528 \u591a\u5bf9\u591a\u5b57\u6bb5\u4e0d\u80fd\u8bbe\u7f6eon_delete\u7ea7\u8054\u5173\u7cfb\uff0c\u9ed8\u8ba4\u4e3a\u7ea7\u8054\uff0c\u5982\u679c\u8981\u5904\u7406\u7ea7\u8054\u5173\u7cfb\uff0c\u9700\u8981\u624b\u52a8\u660e\u786e\u5173\u7cfb\u8868\uff0c\u5904\u7406\u5173\u7cfb\u8868\u4e2d\u591a\u4e2a\u5916\u952e db_constraint\u5728\u5916\u952e\u4e2d\u63a7\u5236\u8868\u5173\u8054\uff0c\u9ed8\u8ba4\u4e3aTrue\u8868\u793a\u5173\u8054\uff0c\u8bbe\u7f6eFalse\u8868\u793a\u65ad\u5f00\u5173\u8054","title":"\u5916\u952e\u5b57\u6bb5\u5c5e\u6027"},{"location":"django%20rest%20framework/04%20%E8%A1%A8%E5%85%B3%E7%B3%BB/#_6","text":"\u53ea\u80fd\u5728\u5e8f\u5217\u5316\u4e2d\u4f7f\u7528 \u5b57\u6bb5\u540d\u5fc5\u987b\u662f\u5916\u952e\u5b57\u6bb5 \u76f8\u5bf9\u4e8e\u81ea\u5b9a\u4e49\u5e8f\u5217\u5316\u5916\u952e\u5b57\u6bb5\uff0c\u81ea\u5b9a\u4e49\u5e8f\u5217\u5316\u5b57\u6bb5\u662f\u4e0d\u80fd\u53c2\u4e0e\u53cd\u5e8f\u5217\u5316\u7684\uff0c\u800c\u5b50\u5e8f\u5217\u5316\u5fc5\u987b\u4e3a\u5916\u952e\u540d\uff0c\u6240\u4ee5\u5c31\u65e0\u6cd5\u5165\u5e93 \u5728\u5916\u952e\u5173\u8054\u6570\u636e\u662f\u591a\u4f59\u65f6\uff0c\u9700\u8981\u660e\u786e many=True \u5b50\u5e8f\u5217\u5316\u662f\u5355\u5411\u64cd\u4f5c\uff0c\u56e0\u4e3a\u4f5c\u4e3a\u5b50\u5e8f\u5217\u7684\u7c7b\u5fc5\u987b\u5199\u5728\u4e0a\u65b9\uff0c\u6240\u4ee5\u4e0d\u80fd\u4ea7\u751f\u9006\u65b9\u5411\u7684\u5b50\u5e8f\u5217\u5316 from rest_framework import serializers from . import models class BookModelSerializers ( serializers . ModelSerializer ): class Meta : model = models . Book fields = '__all__' class PublishModelSerializers ( serializers . ModelSerializer ): books = BookModelSerializers ( many = True ) class Meta : model = models . Publish # fields = '__all__' fields = [ 'name' , 'address' , 'books' ]","title":"\u5b50\u5e8f\u5217\u5316\uff1a"},{"location":"django%20rest%20framework/05%20drf%E5%BA%8F%E5%88%97%E5%8C%96%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%8D%81%E5%A4%A7%E6%8E%A5%E5%8F%A3/","text":"drf\u5e8f\u5217\u5316\u7ec4\u4ef6\u5b9e\u73b0\u5341\u5927\u63a5\u53e3 # \u5e8f\u5217\u5316\u5b57\u6bb5\u4e86\u89e3\u914d\u7f6e # \u4e86\u89e3\u914d\u7f6e\uff1a fields = '__all__' exclude = ['name'] \u6392\u9664name\u5b57\u6bb5 depth = 2 \u81ea\u52a8\u6df1\u5ea6\uff0c\u503c\u4ee3\u8868\u6df1\u5ea6\u6b21\u6570\uff0c\u4f46\u662f\u88ab\u6df1\u5ea6\u7684\u5916\u952e\u91c7\u7528__all__\uff0c\u663e\u793a\u6240\u6709\u5b57\u6bb5 response\u4e8c\u6b21\u5c01\u88c5 # from rest_framework.response import Response class APIResponse ( Response ): def __init__ ( self , status = 0 , msg = 'ok' , results = None , http_status = None , headers = None , exception = False , content_type = None , ** kwargs ): # \u5c06status\u3001msg\u3001results\u3001kwargs\u683c\u5f0f\u5316\u6210data data = { 'status' : status , 'msg' : msg , } # results\u53ea\u8981\u4e0d\u4e3a\u7a7a\u90fd\u662f\u6570\u636e\uff1aFalse\u30010\u3001'' \u90fd\u662f\u6570\u636e => \u6761\u4ef6\u4e0d\u80fd\u5199if results if results is not None : data [ 'results' ] = results # \u5c06kwargs\u4e2d\u989d\u5916\u7684k-v\u6570\u636e\u6dfb\u52a0\u5230data\u4e2d data . update ( ** kwargs ) super () . __init__ ( data = data , status = http_status , headers = headers , exception = exception , content_type = content_type ) \u8fde\u8868\u6df1\u5ea6\u67e5\u8be2 # \u5916\u952e\u5b57\u6bb5\u9ed8\u8ba4\u663e\u793a\u7684\u662f\u5916\u952e\u503c\uff08int\u7c7b\u578b\uff09\uff0c\u4e0d\u4f1a\u81ea\u5df1\u8fdb\u884c\u6df1\u5ea6\u67e5\u8be2 \u6df1\u5ea6\u67e5\u8be2\u65b9\u5f0f\uff1a \u5b50\u5e8f\u5217\u5316\uff1a\u5fc5\u987b\u6709\u5b50\u5e8f\u5217\u5316\u7c7b\u914d\u5408\uff0c\u4e0d\u80fd\u53cd\u5e8f\u5217\u5316 \u914d\u7f6edepth\uff1a\u81ea\u52a8\u6df1\u5ea6\u67e5\u8be2\u7684\u662f\u5173\u8054\u8868\u6d4b\u6240\u6709\u5b57\u6bb5\uff0c\u6570\u636e\u91cf\u592a\u591a \u63d2\u62d4\u5f0f@property\uff1a\u540d\u5b57\u4e0d\u80fd\u4e0e\u5916\u952e\u540d\u540c\u540d from django.db import models from django.contrib.auth.models import User class BaseModel ( models . Model ): is_delete = models . BooleanField ( default = False ) created_time = models . DateTimeField ( auto_now_add = True ) class Meta : # \u57fa\u8868\uff0c\u4e3a\u62bd\u8c61\u8868\uff0c\u662f\u4e13\u95e8\u7528\u6765\u88ab\u7ee7\u627f\uff0c\u63d0\u4f9b\u516c\u6709\u5b57\u6bb5\u7684\uff0c\u81ea\u8eab\u4e0d\u4f1a\u5b8c\u6210\u6570\u636e\u5e93\u8fc1\u79fb abstract = True class Book ( BaseModel ): name = models . CharField ( max_length = 64 ) price = models . DecimalField ( max_digits = 10 , decimal_places = 2 ) publish = models . ForeignKey ( to = 'Publish' , related_name = 'books' , db_constraint = False , on_delete = models . DO_NOTHING , null = True ) authors = models . ManyToManyField ( to = 'Author' , related_name = 'books' , db_constraint = False ) @property def publish_info ( self ): # \u5355\u4e2a\u6570\u636e return { 'name' : self . publish . name , 'address' : self . publish . address , } @property def author_list ( self ): author_list_temp = [] # \u5b58\u653e\u6240\u6709\u4f5c\u8005\u683c\u5f0f\u5316\u6210\u6570\u636e\u7684\u5217\u8868 authors = self . authors . all () # \u6240\u6709\u4f5c\u8005 for author in authors : # \u904d\u5386\u5904\u7406\u6240\u6709\u4f5c\u8005 author_dic = { 'name' : author . name , } try : # \u6709\u8be6\u60c5\u624d\u5904\u7406\u8be6\u60c5\u4fe1\u606f author_dic [ 'mobile' ] = author . detail . mobile except : author_dic [ 'mobile' ] = '\u65e0' author_list_temp . append ( author_dic ) # \u5c06\u5904\u7406\u8fc7\u7684\u6570\u636e\u6dfb\u52a0\u5230\u6570\u636e\u5217\u8868\u4e2d return author_list_temp # \u8fd4\u56de\u5904\u7406\u540e\u7684\u7ed3\u679c def __str__ ( self ): return self . name class Publish ( BaseModel ): name = models . CharField ( max_length = 64 ) address = models . CharField ( max_length = 64 ) class Author ( BaseModel ): name = models . CharField ( max_length = 64 ) class AuthorDetail ( BaseModel ): mobile = models . CharField ( max_length = 64 ) author = models . OneToOneField ( to = Author , related_name = 'detail' , db_constraint = False , on_delete = models . CASCADE ) \u5355\u67e5\u7fa4\u67e5 # class BookAPIView ( APIView ): # \u5355\u67e5\u7fa4\u67e5 def get ( self , request , * args , ** kwargs ): pk = kwargs . get ( 'pk' ) if pk : book_obj = models . Book . objects . filter ( is_delete = False , pk = pk ) . first () book_ser = serializers . BookModelSerializer ( book_obj ) else : book_query = models . Book . objects . filter ( is_delete = False ) . all () book_ser = serializers . BookModelSerializer ( book_query , many = True ) return APIResponse ( results = book_ser . data ) \u5355\u589e\u7fa4\u589e # class BookAPIView ( APIView ): def post ( self , request , * args , ** kwargs ): \"\"\" \u5355\u589e\uff1a\u63a5\u53e3\uff1a/books/ \u6570\u636e\uff1a{...} \u7fa4\u589e\uff1a\u63a5\u53e3\uff1a/books/ \u6570\u636e\uff1a[{...}, ..., {...}] \u903b\u8f91\uff1a\u5c06\u6570\u636e\u7ed9\u7cfb\u5217\u5316\u7c7b\u5904\u7406\uff0c\u6570\u636e\u7684\u7c7b\u578b\u5173\u7cfb\u5230 many \u5c5e\u6027\u662f\u5426\u4e3aTrue \"\"\" if isinstance ( request . data , dict ): many = False elif isinstance ( request . data , list ): many = True else : return Response ( data = { 'detail' : '\u6570\u636e\u6709\u8bef' }, status = 400 ) book_ser = serializers . BookModelSerializer ( data = request . data , many = many ) book_ser . is_valid ( raise_exception = True ) book_obj_or_list = book_ser . save () return APIResponse ( results = serializers . BookModelSerializer ( book_obj_or_list , many = many ) . data ) \u6ce8\u610f\uff1aModelSerializer\u53ea\u80fd\u5b8c\u6210\u5355\u589e\uff0c\u9700\u8981\u501f\u52a9ListSerializer\u624d\u80fd\u5b8c\u6210\u7fa4\u589e\u3002 from rest_framework import serializers from . import models # \u591a\u8868\u64cd\u4f5c class BookListSerializer ( serializers . ListSerializer ): # \u81ea\u5b9a\u4e49\u7684\u7fa4\u589e\u7fa4\u6539\u8f85\u52a9\u7c7b\uff0c\u6ca1\u6709\u5fc5\u8981\u91cd\u5199create\u65b9\u6cd5 def create ( self , validated_data ): return super () . create ( validated_data ) def update ( self , instance_list , validated_data_list ): return [ self . child . update ( instance_list [ index ], attrs ) for index , attrs in enumerate ( validated_data_list ) ] class BookModelSerializer ( serializers . ModelSerializer ): class Meta : # ModelSerializer\u9ed8\u8ba4\u914d\u7f6e\u4e86ListSerializer\u8f85\u52a9\u7c7b\uff0c\u5e2e\u52a9\u5b8c\u6210\u7fa4\u589e\u7fa4\u6539 # list_serializer_class = serializers.ListSerializer # \u5982\u679c\u53ea\u6709\u7fa4\u589e\uff0c\u662f\u4e0d\u9700\u8981\u81ea\u5b9a\u4e49\u914d\u7f6e\u7684\uff0c\u4f46\u8981\u5b8c\u6210\u7fa4\u6539\uff0c\u5fc5\u987b\u81ea\u5b9a\u4e49\u914d\u7f6e list_serializer_class = BookListSerializer model = models . Book fields = [ 'name' , 'price' , 'publish' , 'authors' , 'publish_info' , 'author_list' ] extra_kwargs = { 'publish' : { 'write_only' : True }, 'authors' : { 'write_only' : True } } \u5355\u5220\u7fa4\u5220 # class BookAPIView ( APIView ): def delete ( self , request , * args , ** kwargs ): \"\"\" \u5355\u5220\uff1a\u63a5\u53e3\uff1a/books/(pk)/ \u6570\u636e\uff1a\u7a7a \u7fa4\u5220\uff1a\u63a5\u53e3\uff1a/books/ \u6570\u636e\uff1a[pk1, ..., pkn] \u903b\u8f91\uff1a\u4fee\u6539is_delete\u5b57\u6bb5\uff0c\u4fee\u6539\u6210\u529f\u4ee3\u8868\u5220\u9664\u6210\u529f\uff0c\u4fee\u6539\u5931\u8d25\u4ee3\u8868\u5220\u9664\u5931\u8d25 \"\"\" pk = kwargs . get ( 'pk' ) if pk : pks = [ pk ] # \u5c06\u5355\u5220\u683c\u5f0f\u5316\u6210\u7fa4\u5220\u4e00\u6761 else : pks = request . data # \u7fa4\u5220 try : # \u6570\u636e\u5982\u679c\u6709\u8bef\uff0c\u6570\u636e\u5e93\u6267\u884c\u4f1a\u51fa\u9519 rows = models . Book . objects . filter ( is_delete = False , pk__in = pks ) . update ( is_delete = True ) except : return APIResponse ( 1 , '\u6570\u636e\u6709\u8bef' ) if rows : return APIResponse ( 0 , '\u5220\u9664\u6210\u529f' ) return APIResponse ( 1 , '\u5220\u9664\u5931\u8d25' ) \u6574\u4f53\u5355\u6539\u7fa4\u6539 # class BookAPIView ( APIView ): def put ( self , request , * args , ** kwargs ): \"\"\" \u5355\u6539\uff1a\u63a5\u53e3\uff1a/books/(pk)/ \u6570\u636e\uff1a{...} \u7fa4\u6539\uff1a\u63a5\u53e3\uff1a/books/ \u6570\u636e\uff1a[{pk, ...}, ..., {pk, ...}] \u903b\u8f91\uff1a\u5c06\u6570\u636e\u7ed9\u7cfb\u5217\u5316\u7c7b\u5904\u7406\uff0c\u6570\u636e\u7684\u7c7b\u578b\u5173\u7cfb\u5230 many \u5c5e\u6027\u662f\u5426\u4e3aTrue \"\"\" pk = kwargs . get ( 'pk' ) if pk : # \u5355\u6539 try : # \u4e0e\u589e\u7684\u533a\u522b\u5728\u4e8e\uff0c\u9700\u8981\u660e\u786e\u88ab\u4fee\u6539\u7684\u5bf9\u8c61\uff0c\u4ea4\u7ed9\u5e8f\u5217\u5316\u7c7b book_instance = models . Book . objects . get ( is_delete = False , pk = pk ) except : return Response ({ 'detail' : 'pk error' }, status = 400 ) book_ser = serializers . BookModelSerializer ( instance = book_instance , data = request . data ) book_ser . is_valid ( raise_exception = True ) book_obj = book_ser . save () return APIResponse ( results = serializers . BookModelSerializer ( book_obj ) . data ) else : # \u7fa4\u6539 # \u5206\u6790\uff08\u91cd\u70b9\uff09\uff1a # 1\uff09\u6570\u636e\u662f\u5217\u8868\u5957\u5b57\u5178\uff0c\u6bcf\u4e2a\u5b57\u5178\u5fc5\u987b\u5e26pk\uff0c\u5c31\u662f\u6307\u5b9a\u8981\u4fee\u6539\u7684\u5bf9\u8c61\uff0c\u5982\u679c\u6709\u4e00\u6761\u6ca1\u5e26pk\uff0c\u6574\u4e2a\u6570\u636e\u6709\u8bef # 2\uff09\u5982\u679cpk\u5bf9\u5e94\u7684\u5bf9\u8c61\u5df2\u88ab\u5220\u9664\uff0c\u6216\u662f\u5bf9\u5e94\u7684\u5bf9\u8c61\u4e0d\u5b58\u5728\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u6574\u4e2a\u6570\u636e\u6709\u8bef(\u5efa\u8bae)\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u5c06\u8fd9\u4e9b\u9519\u8bef\u6570\u636e\u629b\u51fa\u5373\u53ef request_data = request . data try : pks = [] for dic in request_data : pk = dic . pop ( 'pk' ) # \u89e3\u51b3\u5206\u67901\uff0c\u6ca1\u6709pk pop\u65b9\u6cd5\u5c31\u4f1a\u629b\u5f02\u5e38 pks . append ( pk ) book_query = models . Book . objects . filter ( is_delete = False , pk__in = pks ) . all () if len ( pks ) != len ( book_query ): raise Exception ( 'pk\u5bf9\u5e94\u7684\u6570\u636e\u4e0d\u5b58\u5728' ) except Exception as e : return Response ({ 'detail' : ' %s ' % e }, status = 400 ) book_ser = serializers . BookModelSerializer ( instance = book_query , data = request_data , many = True ) book_ser . is_valid ( raise_exception = True ) book_list = book_ser . save () return APIResponse ( results = serializers . BookModelSerializer ( book_list , many = True ) . data ) \u5c40\u90e8\u5355\u6539\u7fa4\u6539 # # \u5c40\u90e8\u5355\u6539\u7fa4\u6539 def patch ( self , request , * args , ** kwargs ): pk = kwargs . get ( 'pk' ) if pk : # \u5355\u6539 try : book_instance = models . Book . objects . get ( is_delete = False , pk = pk ) except : return Response ({ 'detail' : 'pk error' }, status = 400 ) # \u8bbe\u7f6epartial=True\u7684\u5e8f\u5217\u5316\u7c7b\uff0c\u53c2\u4e0e\u53cd\u5e8f\u5217\u5316\u7684\u5b57\u6bb5\uff0c\u90fd\u4f1a\u7f6e\u4e3a\u9009\u586b\u5b57\u6bb5 # 1\uff09\u63d0\u4f9b\u4e86\u503c\u7684\u5b57\u6bb5\u53d1\u751f\u4fee\u6539\u3002 # 2\uff09\u6ca1\u6709\u63d0\u4f9b\u7684\u5b57\u6bb5\u91c7\u7528\u88ab\u4fee\u6539\u5bf9\u8c61\u539f\u6765\u7684\u503c # \u8bbe\u7f6econtext\u7684\u503c\uff0c\u76ee\u7684\uff1a\u5728\u5e8f\u5217\u5316\u5b8c\u6210\u81ea\u5b9a\u4e49\u6821\u9a8c(\u5c40\u90e8\u4e0e\u5168\u5c40\u94a9\u5b50)\u65f6\uff0c\u53ef\u80fd\u9700\u8981\u89c6\u56fe\u7c7b\u4e2d\u7684\u53d8\u91cf\uff0c\u5982\u8bf7\u6c42\u5bf9\u8c61request # \u53ef\u4ee5\u901a\u8fc7context\u5c06\u5176\u4f20\u5165\uff0c\u5728\u5e8f\u5217\u5316\u6821\u9a8c\u65b9\u6cd5\u4e2d\uff0cself.context\u5c31\u80fd\u62ff\u5230\u4f20\u5165\u7684\u89c6\u56fe\u7c7b\u4e2d\u7684\u53d8\u91cf book_ser = serializers . BookModelSerializer ( instance = book_instance , data = request . data , partial = True , context = { 'request' : request }) book_ser . is_valid ( raise_exception = True ) book_obj = book_ser . save () return APIResponse ( results = serializers . BookModelSerializer ( book_obj ) . data ) else : # \u7fa4\u6539 request_data = request . data try : pks = [] for dic in request_data : pk = dic . pop ( 'pk' ) pks . append ( pk ) book_query = models . Book . objects . filter ( is_delete = False , pk__in = pks ) . all () if len ( pks ) != len ( book_query ): raise Exception ( 'pk\u5bf9\u5e94\u7684\u6570\u636e\u4e0d\u5b58\u5728' ) except Exception as e : return Response ({ 'detail' : ' %s ' % e }, status = 400 ) book_ser = serializers . BookModelSerializer ( instance = book_query , data = request_data , many = True , partial = True ) book_ser . is_valid ( raise_exception = True ) book_list = book_ser . save () return APIResponse ( results = serializers . BookModelSerializer ( book_list , many = True ) . data ) \u8bbe\u7f6econtext\u7684\u503c\uff0c\u76ee\u7684\uff1a\u5728\u5e8f\u5217\u5316\u5b8c\u6210\u81ea\u5b9a\u4e49\u6821\u9a8c(\u5c40\u90e8\u4e0e\u5168\u5c40\u94a9\u5b50)\u65f6\uff0c\u53ef\u80fd\u9700\u8981\u89c6\u56fe\u7c7b\u4e2d\u7684\u53d8\u91cf\uff0c\u8fd9\u662f\u5c31\u53ef\u4ee5\u901a\u8fc7context\u5c06\u53d8\u91cf\u4f20\u5165\uff0c \u5982\u628arequest\u4f20\u5165 \u5e8f\u5217\u5316\u7c7b class BookModelSerializer ( serializers . ModelSerializer ): class Meta : list_serializer_class = BookListerSerializer model = models . Book fields = [ 'name' , 'price' , 'publish' , 'authors' , 'publish_info' , 'author_list' ] extra_kwargs = { 'publish' : { 'write_only' : True }, . 'authors' : { 'write_only' : True } } # \u9a8c\u8bc1\u89c6\u56fe\u7c7b\u662f\u5426\u5c06request\u8bf7\u6c42\u53c2\u6570\u901a\u8fc7context\u4f20\u5165 def validate ( self , attrs ): print ( \"\u4f20\u5165\u7684request\u53c2\u6570\uff1a %s \" % self . context . get ( 'request' )) return attrs","title":"05 drf\u5e8f\u5217\u5316\u7ec4\u4ef6\u5b9e\u73b0\u5341\u5927\u63a5\u53e3"},{"location":"django%20rest%20framework/05%20drf%E5%BA%8F%E5%88%97%E5%8C%96%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%8D%81%E5%A4%A7%E6%8E%A5%E5%8F%A3/#drf","text":"","title":"drf\u5e8f\u5217\u5316\u7ec4\u4ef6\u5b9e\u73b0\u5341\u5927\u63a5\u53e3"},{"location":"django%20rest%20framework/05%20drf%E5%BA%8F%E5%88%97%E5%8C%96%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%8D%81%E5%A4%A7%E6%8E%A5%E5%8F%A3/#_1","text":"\u4e86\u89e3\u914d\u7f6e\uff1a fields = '__all__' exclude = ['name'] \u6392\u9664name\u5b57\u6bb5 depth = 2 \u81ea\u52a8\u6df1\u5ea6\uff0c\u503c\u4ee3\u8868\u6df1\u5ea6\u6b21\u6570\uff0c\u4f46\u662f\u88ab\u6df1\u5ea6\u7684\u5916\u952e\u91c7\u7528__all__\uff0c\u663e\u793a\u6240\u6709\u5b57\u6bb5","title":"\u5e8f\u5217\u5316\u5b57\u6bb5\u4e86\u89e3\u914d\u7f6e"},{"location":"django%20rest%20framework/05%20drf%E5%BA%8F%E5%88%97%E5%8C%96%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%8D%81%E5%A4%A7%E6%8E%A5%E5%8F%A3/#response","text":"from rest_framework.response import Response class APIResponse ( Response ): def __init__ ( self , status = 0 , msg = 'ok' , results = None , http_status = None , headers = None , exception = False , content_type = None , ** kwargs ): # \u5c06status\u3001msg\u3001results\u3001kwargs\u683c\u5f0f\u5316\u6210data data = { 'status' : status , 'msg' : msg , } # results\u53ea\u8981\u4e0d\u4e3a\u7a7a\u90fd\u662f\u6570\u636e\uff1aFalse\u30010\u3001'' \u90fd\u662f\u6570\u636e => \u6761\u4ef6\u4e0d\u80fd\u5199if results if results is not None : data [ 'results' ] = results # \u5c06kwargs\u4e2d\u989d\u5916\u7684k-v\u6570\u636e\u6dfb\u52a0\u5230data\u4e2d data . update ( ** kwargs ) super () . __init__ ( data = data , status = http_status , headers = headers , exception = exception , content_type = content_type )","title":"response\u4e8c\u6b21\u5c01\u88c5"},{"location":"django%20rest%20framework/05%20drf%E5%BA%8F%E5%88%97%E5%8C%96%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%8D%81%E5%A4%A7%E6%8E%A5%E5%8F%A3/#_2","text":"\u5916\u952e\u5b57\u6bb5\u9ed8\u8ba4\u663e\u793a\u7684\u662f\u5916\u952e\u503c\uff08int\u7c7b\u578b\uff09\uff0c\u4e0d\u4f1a\u81ea\u5df1\u8fdb\u884c\u6df1\u5ea6\u67e5\u8be2 \u6df1\u5ea6\u67e5\u8be2\u65b9\u5f0f\uff1a \u5b50\u5e8f\u5217\u5316\uff1a\u5fc5\u987b\u6709\u5b50\u5e8f\u5217\u5316\u7c7b\u914d\u5408\uff0c\u4e0d\u80fd\u53cd\u5e8f\u5217\u5316 \u914d\u7f6edepth\uff1a\u81ea\u52a8\u6df1\u5ea6\u67e5\u8be2\u7684\u662f\u5173\u8054\u8868\u6d4b\u6240\u6709\u5b57\u6bb5\uff0c\u6570\u636e\u91cf\u592a\u591a \u63d2\u62d4\u5f0f@property\uff1a\u540d\u5b57\u4e0d\u80fd\u4e0e\u5916\u952e\u540d\u540c\u540d from django.db import models from django.contrib.auth.models import User class BaseModel ( models . Model ): is_delete = models . BooleanField ( default = False ) created_time = models . DateTimeField ( auto_now_add = True ) class Meta : # \u57fa\u8868\uff0c\u4e3a\u62bd\u8c61\u8868\uff0c\u662f\u4e13\u95e8\u7528\u6765\u88ab\u7ee7\u627f\uff0c\u63d0\u4f9b\u516c\u6709\u5b57\u6bb5\u7684\uff0c\u81ea\u8eab\u4e0d\u4f1a\u5b8c\u6210\u6570\u636e\u5e93\u8fc1\u79fb abstract = True class Book ( BaseModel ): name = models . CharField ( max_length = 64 ) price = models . DecimalField ( max_digits = 10 , decimal_places = 2 ) publish = models . ForeignKey ( to = 'Publish' , related_name = 'books' , db_constraint = False , on_delete = models . DO_NOTHING , null = True ) authors = models . ManyToManyField ( to = 'Author' , related_name = 'books' , db_constraint = False ) @property def publish_info ( self ): # \u5355\u4e2a\u6570\u636e return { 'name' : self . publish . name , 'address' : self . publish . address , } @property def author_list ( self ): author_list_temp = [] # \u5b58\u653e\u6240\u6709\u4f5c\u8005\u683c\u5f0f\u5316\u6210\u6570\u636e\u7684\u5217\u8868 authors = self . authors . all () # \u6240\u6709\u4f5c\u8005 for author in authors : # \u904d\u5386\u5904\u7406\u6240\u6709\u4f5c\u8005 author_dic = { 'name' : author . name , } try : # \u6709\u8be6\u60c5\u624d\u5904\u7406\u8be6\u60c5\u4fe1\u606f author_dic [ 'mobile' ] = author . detail . mobile except : author_dic [ 'mobile' ] = '\u65e0' author_list_temp . append ( author_dic ) # \u5c06\u5904\u7406\u8fc7\u7684\u6570\u636e\u6dfb\u52a0\u5230\u6570\u636e\u5217\u8868\u4e2d return author_list_temp # \u8fd4\u56de\u5904\u7406\u540e\u7684\u7ed3\u679c def __str__ ( self ): return self . name class Publish ( BaseModel ): name = models . CharField ( max_length = 64 ) address = models . CharField ( max_length = 64 ) class Author ( BaseModel ): name = models . CharField ( max_length = 64 ) class AuthorDetail ( BaseModel ): mobile = models . CharField ( max_length = 64 ) author = models . OneToOneField ( to = Author , related_name = 'detail' , db_constraint = False , on_delete = models . CASCADE )","title":"\u8fde\u8868\u6df1\u5ea6\u67e5\u8be2"},{"location":"django%20rest%20framework/05%20drf%E5%BA%8F%E5%88%97%E5%8C%96%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%8D%81%E5%A4%A7%E6%8E%A5%E5%8F%A3/#_3","text":"class BookAPIView ( APIView ): # \u5355\u67e5\u7fa4\u67e5 def get ( self , request , * args , ** kwargs ): pk = kwargs . get ( 'pk' ) if pk : book_obj = models . Book . objects . filter ( is_delete = False , pk = pk ) . first () book_ser = serializers . BookModelSerializer ( book_obj ) else : book_query = models . Book . objects . filter ( is_delete = False ) . all () book_ser = serializers . BookModelSerializer ( book_query , many = True ) return APIResponse ( results = book_ser . data )","title":"\u5355\u67e5\u7fa4\u67e5"},{"location":"django%20rest%20framework/05%20drf%E5%BA%8F%E5%88%97%E5%8C%96%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%8D%81%E5%A4%A7%E6%8E%A5%E5%8F%A3/#_4","text":"class BookAPIView ( APIView ): def post ( self , request , * args , ** kwargs ): \"\"\" \u5355\u589e\uff1a\u63a5\u53e3\uff1a/books/ \u6570\u636e\uff1a{...} \u7fa4\u589e\uff1a\u63a5\u53e3\uff1a/books/ \u6570\u636e\uff1a[{...}, ..., {...}] \u903b\u8f91\uff1a\u5c06\u6570\u636e\u7ed9\u7cfb\u5217\u5316\u7c7b\u5904\u7406\uff0c\u6570\u636e\u7684\u7c7b\u578b\u5173\u7cfb\u5230 many \u5c5e\u6027\u662f\u5426\u4e3aTrue \"\"\" if isinstance ( request . data , dict ): many = False elif isinstance ( request . data , list ): many = True else : return Response ( data = { 'detail' : '\u6570\u636e\u6709\u8bef' }, status = 400 ) book_ser = serializers . BookModelSerializer ( data = request . data , many = many ) book_ser . is_valid ( raise_exception = True ) book_obj_or_list = book_ser . save () return APIResponse ( results = serializers . BookModelSerializer ( book_obj_or_list , many = many ) . data ) \u6ce8\u610f\uff1aModelSerializer\u53ea\u80fd\u5b8c\u6210\u5355\u589e\uff0c\u9700\u8981\u501f\u52a9ListSerializer\u624d\u80fd\u5b8c\u6210\u7fa4\u589e\u3002 from rest_framework import serializers from . import models # \u591a\u8868\u64cd\u4f5c class BookListSerializer ( serializers . ListSerializer ): # \u81ea\u5b9a\u4e49\u7684\u7fa4\u589e\u7fa4\u6539\u8f85\u52a9\u7c7b\uff0c\u6ca1\u6709\u5fc5\u8981\u91cd\u5199create\u65b9\u6cd5 def create ( self , validated_data ): return super () . create ( validated_data ) def update ( self , instance_list , validated_data_list ): return [ self . child . update ( instance_list [ index ], attrs ) for index , attrs in enumerate ( validated_data_list ) ] class BookModelSerializer ( serializers . ModelSerializer ): class Meta : # ModelSerializer\u9ed8\u8ba4\u914d\u7f6e\u4e86ListSerializer\u8f85\u52a9\u7c7b\uff0c\u5e2e\u52a9\u5b8c\u6210\u7fa4\u589e\u7fa4\u6539 # list_serializer_class = serializers.ListSerializer # \u5982\u679c\u53ea\u6709\u7fa4\u589e\uff0c\u662f\u4e0d\u9700\u8981\u81ea\u5b9a\u4e49\u914d\u7f6e\u7684\uff0c\u4f46\u8981\u5b8c\u6210\u7fa4\u6539\uff0c\u5fc5\u987b\u81ea\u5b9a\u4e49\u914d\u7f6e list_serializer_class = BookListSerializer model = models . Book fields = [ 'name' , 'price' , 'publish' , 'authors' , 'publish_info' , 'author_list' ] extra_kwargs = { 'publish' : { 'write_only' : True }, 'authors' : { 'write_only' : True } }","title":"\u5355\u589e\u7fa4\u589e"},{"location":"django%20rest%20framework/05%20drf%E5%BA%8F%E5%88%97%E5%8C%96%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%8D%81%E5%A4%A7%E6%8E%A5%E5%8F%A3/#_5","text":"class BookAPIView ( APIView ): def delete ( self , request , * args , ** kwargs ): \"\"\" \u5355\u5220\uff1a\u63a5\u53e3\uff1a/books/(pk)/ \u6570\u636e\uff1a\u7a7a \u7fa4\u5220\uff1a\u63a5\u53e3\uff1a/books/ \u6570\u636e\uff1a[pk1, ..., pkn] \u903b\u8f91\uff1a\u4fee\u6539is_delete\u5b57\u6bb5\uff0c\u4fee\u6539\u6210\u529f\u4ee3\u8868\u5220\u9664\u6210\u529f\uff0c\u4fee\u6539\u5931\u8d25\u4ee3\u8868\u5220\u9664\u5931\u8d25 \"\"\" pk = kwargs . get ( 'pk' ) if pk : pks = [ pk ] # \u5c06\u5355\u5220\u683c\u5f0f\u5316\u6210\u7fa4\u5220\u4e00\u6761 else : pks = request . data # \u7fa4\u5220 try : # \u6570\u636e\u5982\u679c\u6709\u8bef\uff0c\u6570\u636e\u5e93\u6267\u884c\u4f1a\u51fa\u9519 rows = models . Book . objects . filter ( is_delete = False , pk__in = pks ) . update ( is_delete = True ) except : return APIResponse ( 1 , '\u6570\u636e\u6709\u8bef' ) if rows : return APIResponse ( 0 , '\u5220\u9664\u6210\u529f' ) return APIResponse ( 1 , '\u5220\u9664\u5931\u8d25' )","title":"\u5355\u5220\u7fa4\u5220"},{"location":"django%20rest%20framework/05%20drf%E5%BA%8F%E5%88%97%E5%8C%96%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%8D%81%E5%A4%A7%E6%8E%A5%E5%8F%A3/#_6","text":"class BookAPIView ( APIView ): def put ( self , request , * args , ** kwargs ): \"\"\" \u5355\u6539\uff1a\u63a5\u53e3\uff1a/books/(pk)/ \u6570\u636e\uff1a{...} \u7fa4\u6539\uff1a\u63a5\u53e3\uff1a/books/ \u6570\u636e\uff1a[{pk, ...}, ..., {pk, ...}] \u903b\u8f91\uff1a\u5c06\u6570\u636e\u7ed9\u7cfb\u5217\u5316\u7c7b\u5904\u7406\uff0c\u6570\u636e\u7684\u7c7b\u578b\u5173\u7cfb\u5230 many \u5c5e\u6027\u662f\u5426\u4e3aTrue \"\"\" pk = kwargs . get ( 'pk' ) if pk : # \u5355\u6539 try : # \u4e0e\u589e\u7684\u533a\u522b\u5728\u4e8e\uff0c\u9700\u8981\u660e\u786e\u88ab\u4fee\u6539\u7684\u5bf9\u8c61\uff0c\u4ea4\u7ed9\u5e8f\u5217\u5316\u7c7b book_instance = models . Book . objects . get ( is_delete = False , pk = pk ) except : return Response ({ 'detail' : 'pk error' }, status = 400 ) book_ser = serializers . BookModelSerializer ( instance = book_instance , data = request . data ) book_ser . is_valid ( raise_exception = True ) book_obj = book_ser . save () return APIResponse ( results = serializers . BookModelSerializer ( book_obj ) . data ) else : # \u7fa4\u6539 # \u5206\u6790\uff08\u91cd\u70b9\uff09\uff1a # 1\uff09\u6570\u636e\u662f\u5217\u8868\u5957\u5b57\u5178\uff0c\u6bcf\u4e2a\u5b57\u5178\u5fc5\u987b\u5e26pk\uff0c\u5c31\u662f\u6307\u5b9a\u8981\u4fee\u6539\u7684\u5bf9\u8c61\uff0c\u5982\u679c\u6709\u4e00\u6761\u6ca1\u5e26pk\uff0c\u6574\u4e2a\u6570\u636e\u6709\u8bef # 2\uff09\u5982\u679cpk\u5bf9\u5e94\u7684\u5bf9\u8c61\u5df2\u88ab\u5220\u9664\uff0c\u6216\u662f\u5bf9\u5e94\u7684\u5bf9\u8c61\u4e0d\u5b58\u5728\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u6574\u4e2a\u6570\u636e\u6709\u8bef(\u5efa\u8bae)\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u5c06\u8fd9\u4e9b\u9519\u8bef\u6570\u636e\u629b\u51fa\u5373\u53ef request_data = request . data try : pks = [] for dic in request_data : pk = dic . pop ( 'pk' ) # \u89e3\u51b3\u5206\u67901\uff0c\u6ca1\u6709pk pop\u65b9\u6cd5\u5c31\u4f1a\u629b\u5f02\u5e38 pks . append ( pk ) book_query = models . Book . objects . filter ( is_delete = False , pk__in = pks ) . all () if len ( pks ) != len ( book_query ): raise Exception ( 'pk\u5bf9\u5e94\u7684\u6570\u636e\u4e0d\u5b58\u5728' ) except Exception as e : return Response ({ 'detail' : ' %s ' % e }, status = 400 ) book_ser = serializers . BookModelSerializer ( instance = book_query , data = request_data , many = True ) book_ser . is_valid ( raise_exception = True ) book_list = book_ser . save () return APIResponse ( results = serializers . BookModelSerializer ( book_list , many = True ) . data )","title":"\u6574\u4f53\u5355\u6539\u7fa4\u6539"},{"location":"django%20rest%20framework/05%20drf%E5%BA%8F%E5%88%97%E5%8C%96%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%8D%81%E5%A4%A7%E6%8E%A5%E5%8F%A3/#_7","text":"# \u5c40\u90e8\u5355\u6539\u7fa4\u6539 def patch ( self , request , * args , ** kwargs ): pk = kwargs . get ( 'pk' ) if pk : # \u5355\u6539 try : book_instance = models . Book . objects . get ( is_delete = False , pk = pk ) except : return Response ({ 'detail' : 'pk error' }, status = 400 ) # \u8bbe\u7f6epartial=True\u7684\u5e8f\u5217\u5316\u7c7b\uff0c\u53c2\u4e0e\u53cd\u5e8f\u5217\u5316\u7684\u5b57\u6bb5\uff0c\u90fd\u4f1a\u7f6e\u4e3a\u9009\u586b\u5b57\u6bb5 # 1\uff09\u63d0\u4f9b\u4e86\u503c\u7684\u5b57\u6bb5\u53d1\u751f\u4fee\u6539\u3002 # 2\uff09\u6ca1\u6709\u63d0\u4f9b\u7684\u5b57\u6bb5\u91c7\u7528\u88ab\u4fee\u6539\u5bf9\u8c61\u539f\u6765\u7684\u503c # \u8bbe\u7f6econtext\u7684\u503c\uff0c\u76ee\u7684\uff1a\u5728\u5e8f\u5217\u5316\u5b8c\u6210\u81ea\u5b9a\u4e49\u6821\u9a8c(\u5c40\u90e8\u4e0e\u5168\u5c40\u94a9\u5b50)\u65f6\uff0c\u53ef\u80fd\u9700\u8981\u89c6\u56fe\u7c7b\u4e2d\u7684\u53d8\u91cf\uff0c\u5982\u8bf7\u6c42\u5bf9\u8c61request # \u53ef\u4ee5\u901a\u8fc7context\u5c06\u5176\u4f20\u5165\uff0c\u5728\u5e8f\u5217\u5316\u6821\u9a8c\u65b9\u6cd5\u4e2d\uff0cself.context\u5c31\u80fd\u62ff\u5230\u4f20\u5165\u7684\u89c6\u56fe\u7c7b\u4e2d\u7684\u53d8\u91cf book_ser = serializers . BookModelSerializer ( instance = book_instance , data = request . data , partial = True , context = { 'request' : request }) book_ser . is_valid ( raise_exception = True ) book_obj = book_ser . save () return APIResponse ( results = serializers . BookModelSerializer ( book_obj ) . data ) else : # \u7fa4\u6539 request_data = request . data try : pks = [] for dic in request_data : pk = dic . pop ( 'pk' ) pks . append ( pk ) book_query = models . Book . objects . filter ( is_delete = False , pk__in = pks ) . all () if len ( pks ) != len ( book_query ): raise Exception ( 'pk\u5bf9\u5e94\u7684\u6570\u636e\u4e0d\u5b58\u5728' ) except Exception as e : return Response ({ 'detail' : ' %s ' % e }, status = 400 ) book_ser = serializers . BookModelSerializer ( instance = book_query , data = request_data , many = True , partial = True ) book_ser . is_valid ( raise_exception = True ) book_list = book_ser . save () return APIResponse ( results = serializers . BookModelSerializer ( book_list , many = True ) . data ) \u8bbe\u7f6econtext\u7684\u503c\uff0c\u76ee\u7684\uff1a\u5728\u5e8f\u5217\u5316\u5b8c\u6210\u81ea\u5b9a\u4e49\u6821\u9a8c(\u5c40\u90e8\u4e0e\u5168\u5c40\u94a9\u5b50)\u65f6\uff0c\u53ef\u80fd\u9700\u8981\u89c6\u56fe\u7c7b\u4e2d\u7684\u53d8\u91cf\uff0c\u8fd9\u662f\u5c31\u53ef\u4ee5\u901a\u8fc7context\u5c06\u53d8\u91cf\u4f20\u5165\uff0c \u5982\u628arequest\u4f20\u5165 \u5e8f\u5217\u5316\u7c7b class BookModelSerializer ( serializers . ModelSerializer ): class Meta : list_serializer_class = BookListerSerializer model = models . Book fields = [ 'name' , 'price' , 'publish' , 'authors' , 'publish_info' , 'author_list' ] extra_kwargs = { 'publish' : { 'write_only' : True }, . 'authors' : { 'write_only' : True } } # \u9a8c\u8bc1\u89c6\u56fe\u7c7b\u662f\u5426\u5c06request\u8bf7\u6c42\u53c2\u6570\u901a\u8fc7context\u4f20\u5165 def validate ( self , attrs ): print ( \"\u4f20\u5165\u7684request\u53c2\u6570\uff1a %s \" % self . context . get ( 'request' )) return attrs","title":"\u5c40\u90e8\u5355\u6539\u7fa4\u6539"},{"location":"django%20rest%20framework/06%20%E8%A7%86%E5%9B%BE%E5%AE%B6%E6%97%8F/","text":"\u89c6\u56fe\u5bb6\u65cf # \u89c6\u56fe\u5bb6\u65cf\u7b80\u4ecb # from rest_framework import views , mixins , generics , viewsets views \uff1a\u89c6\u56fe\u7c7b APIView\uff0cGenericAPIView(generics\u4e2d) mixins \uff1a\u89c6\u56fe\u5de5\u5177\u7c7b CreateModelMixin\uff0cListModelMixin\uff0cRetrieveModelMixin\uff0cUpdateModelMixin\uff0cDestroyModelMixin generics \uff1a\u5de5\u5177\u89c6\u56fe\u7c7b \u6709\u4e5d\u4e2a\u7c7b viewsets \uff1a\u89c6\u56fe\u96c6 \u4e24\u4e2a\u89c6\u56fe\u96c6\u57fa\u7c7b\uff0c\u4e24\u4e2a\u89c6\u56fe\u96c6\u5b50\u7c7b\uff0c\u4e00\u4e2a\u5de5\u5177\u7c7b \u89c6\u56fe\u7c7bAPIView # \u7ee7\u627fView\uff0c\u62e5\u6709View\u7684\u6240\u6709 \u91cd\u5199\u4e86as_view\u65b9\u6cd5\uff0c\u5c40\u90e8\u7981\u7528csrf\u8ba4\u8bc1 \u91cd\u5199dispatch \u589e\u52a0\u4e00\u7cfb\u5217\u7c7b\u5c5e\u6027\uff0c\u5c40\u90e8 \u6e32\u67d3\u548c\u89e3\u6790\u914d\u7f6e \u89c6\u56fe\u7c7bGenericAPIView # GenericAPIView \u7ee7\u627fAPIView\uff0c\u62e5\u6709APIView\u7684\u6240\u6709\u65b9\u6cd5\u3001\u5c5e\u6027 # \u5de5\u5177\u89c6\u56fe\u7c7b from rest_framework.generics import GenericAPIView class CarGenericAPIView ( GenericAPIView ): # \u4e0d\u80fd\u76f4\u63a5\u5199\u5230objects\u7ed3\u675f\uff0c\u56e0\u4e3aobjects\u7ed3\u675f\u65f6\uff0c\u4e0d\u662fQuerySet\u5bf9\u8c61\uff0c\u800c\u662fManager\u5bf9\u8c61\uff0c\u4f46 .all() \u548c .filter() \u540e\u4e00\u5b9a\u662fQuerySet\u5bf9\u8c61 queryset = models . Car . objects . filter ( is_delete = False ) . all () serializer_class = serializer . CarModelSerializer lookup_url_kwarg = 'pk' # \u7fa4\u67e5 \"\"\" def get(self, request, *args, **kwargs): car_query = self.get_queryset() car_ser = self.get_serializer(car_query, many=True) return APIResponse(results=car_ser.data) \"\"\" # \u5355\u67e5 def get ( self , request , * args , ** kwargs ): car_obj = self . get_object () car_ser = self . get_serializer ( car_obj ) return APIResponse ( results = car_ser . data ) GenericAPIView\u603b\u7ed3\uff1a \u7ee7\u627fAPIView\uff0c\u62e5\u6709APIView\u7684\u6240\u6709 get_queryset \u65b9\u6cd5\uff0c\u914d\u7f6e queryset \u7c7b\u5c5e\u6027\uff0c\u63d0\u4f9b\u89c6\u56fe\u7c7b\u76f8\u5173\u7684Models \u5728 get_queryset \u65b9\u6cd5\u7684\u57fa\u7840\u4e0a\uff0c\u6709\u4e86 get_object \u65b9\u6cd5\uff0c\u914d\u7f6e lookup_url_kwarg \u5c5e\u6027\uff0c\u63d0\u4f9b\u89c6\u56fe\u7c7b\u76f8\u5173\u7684\u5177\u4f53\u7684models get_serializer \u65b9\u6cd5\uff0c\u914d\u7f6e serializer_class \u7c7b\u5c5e\u6027\uff0c\u63d0\u4f9b\u89c6\u56fe\u7c7b\u76f8\u5173\u7684\u5e8f\u5217\u5316\u5bf9\u8c61 GenericAPIView\u5c31\u662f\u5728APIView\u7684\u57fa\u7840\u4e0a\u989d\u5916\u63d0\u4f9b\u4e86\u4e09\u4e2a\u65b9\u6cd5\u3001\u4e09\u4e2a\u7c7b\u5c5e\u6027\uff0c\u5982\u679c\u4e0d\u914d\u5408\u89c6\u56fe\u5de5\u5177\u7c7b\uff0c\u4f53\u73b0\u4e0d\u51fa\u4f18\u52bf \u5176\u76ee\u7684\uff1a\u89c6\u56fe\u4e2d\u7684\u589e\u5220\u6539\u67e5\u903b\u8f91\u76f8\u4f3c\uff0c\u4f46\u64cd\u4f5c\u7684\u8d44\u6e90\u4e0d\u4e00\u81f4\uff0c\u64cd\u4f5c\u8d44\u6e90\u5c31\u662f\u64cd\u4f5c \u8d44\u6e90\u5bf9\u8c61\u4eec\u3001\u8d44\u6e90\u5bf9\u8c61\u4ee5\u53ca\u8d44\u6e90\u76f8\u5173\u7684\u5e8f\u5217\u5316\u7c7b\uff0c\u5c06\u8fd9\u4e09\u8005\u5f62\u6210\u914d\u7f6e\uff0c\u90a3\u64cd\u4f5c\u903b\u8f91\u5c31\u4e00\u81f4\uff0c\u5c31\u53ef\u4ee5\u8fdb\u884c\u5c01\u88c5\u3002 \u89c6\u56fe\u5de5\u5177\u7c7bmixins # # mixins\u89c6\u56fe\u5de5\u5177\u7c7b from rest_framework.mixins import RetrieveModelMixin , ListModelMixin , CreateModelMixin class CarReadCreateGenericAPIView ( RetrieveModelMixin , ListModelMixin , CreateModelMixin , GenericAPIView ): queryset = models . Car . objects . filter ( is_delete = False ) . all () serializer_class = serializer . CarModelSerializer lookup_url_kwarg = 'pk' # \u7fa4\u67e5 \"\"\" def get(self, request, *args, **kwargs): return self.list(request, *args, **kwargs) \"\"\" # \u5355\u67e5 def get ( self , request , * args , ** kwargs ): response = self . retrieve ( request , * args , ** kwargs ) return APIResponse ( results = response . data ) # \u5355\u589e def post ( self , request , * args , ** kwargs ): return self . create ( request , * args , ** kwargs ) mixins\u89c6\u56fe\u5de5\u5177\u7c7b\uff1a\u6709\u4e94\u4e2a\u7c7b\u3001\u516d\u4e2a\u65b9\u6cd5 \u9700\u8981\u914d\u5408 GenericAPIView \u7c7b\u4f7f\u7528\uff0c\u5c06\u5355\u67e5\u3001\u7fa4\u67e5\u3001\u5355\u589e\u3001\u6574\u4f53\u5355\u6539\u3001\u5c40\u90e8\u5355\u6539\u3001\u5355\u5220\u516d\u4e2a\u63a5\u53e3\u5c01\u88c5\u6210 retrieve \u3001 list \u3001 create \u3001 update \u3001 partial_update \u3001 destroy \u516d\u4e2a\u65b9\u6cd5 \u8c03\u7528\u7684\u65b9\u6cd5\u5c31\u662f GenericAPIView \u63d0\u4f9b\u7684\uff0c\u914d\u5408 GenericAPIView \u7c7b\u4f7f\u7528 \u5de5\u5177\u89c6\u56fe\u7c7bgenerics # # \u5355\u72ec\u5b8c\u6210\u5355\u67e5\u63a5\u53e3 from rest_framework.generics import RetrieveAPIView class CarRetrieveAPIView ( RetrieveAPIView ): queryset = models . Car . objects . filter ( is_delete = False ) . all () serializer_class = serializer . CarModelSerializer lookup_url_kwarg = 'pk' # \u5355\u72ec\u5b8c\u6210\u7fa4\u67e5\u63a5\u53e3 from rest_framework.generics import ListAPIView class CarListAPIView ( ListAPIView ): queryset = models . Car . objects . filter ( is_delete = False ) . all () serializer_class = serializer . CarModelSerializer # \u5b8c\u6210\u5355\u67e5\u63a5\u53e3\u3001\u6574\u4f53\u5355\u6539\u63a5\u53e3\u3001\u5c40\u90e8\u5355\u6539\u63a5\u53e3\u3001\u5355\u5220\u63a5\u53e3 from rest_framework.generics import RetrieveUpdateDestroyAPIView class CarRetrieveUpdateDestroyAPIView ( RetrieveUpdateDestroyAPIView ): queryset = models . Car . objects . filter ( is_delete = False ) . all () serializer_class = serializer . CarModelSerializer generics \u5de5\u5177\u89c6\u56fe\u7c7b \u6709\u4e5d\u79cd\u7ec4\u5408 \u5e2e\u6211\u4eec\u5c06\u4e0d\u540c\u79cd\u7c7b\u7684 mixins \u4e0e GenericAPIView \u8fdb\u884c\u7ec4\u5408 \u4e0d\u540c\u7684\u7ec4\u5408\u5e2e\u6211\u4eec\u5b9e\u73b0\u597d\u5bf9\u5e94\u7684 get \u3001 post \u3001 put \u3001 patch \u3001 delete \u65b9\u6cd5 \u53ea\u8981\u6211\u4eec\u81ea\u5df1\u914d\u7f6e\u4e09\u4e2a\u7c7b\u5c5e\u6027\u5373\u53ef\uff1a queryset \u3001 serializer_class \u3001 lookup_url_kwarg \u89c6\u56fe\u96c6viewsets # \u8fd9\u91cc\u7684 ViewSetMixin \u91cd\u5199\u4e86 as_view \u65b9\u6cd5 # \u89c6\u56fe\u96c6 from rest_framework.viewsets import ViewSetMixin , ViewSet , GenericViewSet , ModelViewSet class CarReadOnlyAPIView ( RetrieveModelMixin , ListModelMixin , GenericViewSet ): queryset = models . Car . objects . filter ( is_delete = False ) . all () serializer_class = serializer . CarModelSerializer # urls.py url ( r '^v7/cars/$' , views . CarReadOnlyAPIView . as_view ({ 'get' : 'list' })), url ( r '^v7/cars/(?P<pk>\\d+)/$' , views . CarReadOnlyAPIView . as_view ({ 'get' : 'retrieve' })), \u89c6\u56fe\u96c6\u5b9e\u73b0\u516d\u5927\u63a5\u53e3 # # \u5b9e\u73b0\u4e86\u516d\u5927\u63a5\u53e3\uff0c\u5355\u67e5\u3001\u7fa4\u67e5\u3001\u5355\u589e\u3001\u6574\u4f53\u5355\u6539\u3001\u5c40\u90e8\u5355\u6539\u3001\u5355\u5220 class CarModelViewSet ( ModelViewSet ): queryset = models . Car . objects . filter ( is_delete = False ) . all () serializer_class = serializer . CarModelSerializer # urls.py url ( r '^v8/cars/$' , views . CarModelViewSet . as_view ({ 'get' : 'list' , 'post' : 'create' })), url ( r '^v8/cars/(?P<pk>\\d+)/$' , views . CarModelViewSet . as_view ({ 'get' : 'retrieve' , 'put' : 'update' , 'patch' : 'partial_update' , 'delete' : 'destroy' })) \u8fd9\u6837\u8bbe\u8ba1\u7684\u4e0d\u5408\u7406\u70b9\uff1a \u6ca1\u6709\u7fa4\u589e\u3001\u6574\u4f53\u7fa4\u6539\u3001\u5c40\u90e8\u7fa4\u6539\u3001\u7fa4\u5220 \u56db\u4e2a\u63a5\u53e3 \u5220\u9664\u64cd\u4f5c\u89c6\u56fe\u96c6\u9ed8\u8ba4 \u8d70\u7684\u662f destroy \u65b9\u6cd5\uff0c \u662f\u5c06\u8d44\u6e90\u4ece\u6570\u636e\u5e93\u4e2d\u5220\u9664\uff0c\u800c\u4e0d\u662f\u5c06\u4e00\u4e2a\u5b57\u6bb5 is_delete \u5b57\u6bb5\u4fee\u6539 \u54cd\u5e94\u7684\u7ed3\u679c\u53ea\u6709\u6570\u636e\uff0c\u6ca1\u6709\u6570\u636e\u72b6\u6001\u7801\u548c\u72b6\u6001\u4fe1\u606f \u89e3\u51b3\u89c6\u56fe\u96c6\u7684\u4e0d\u5408\u7406 # # \u5b9e\u73b0\u4e86\u516d\u5927\u63a5\u53e3\uff0c\u5355\u67e5\u3001\u7fa4\u67e5\u3001\u5355\u589e\u3001\u6574\u4f53\u5355\u6539\u3001\u5c40\u90e8\u5355\u6539\u3001\u5355\u5220 class CarModelViewSet ( ModelViewSet ): queryset = models . Car . objects . filter ( is_delete = False ) . all () serializer_class = serializer . CarModelSerializer # \u7fa4\u6574\u4f53\u6539\uff0c\u7fa4\u5c40\u90e8\u6539\uff0c\u5168\u5220\u4e09\u4e2a\u63a5\u53e3\u53ef\u4ee5\u72ec\u7acb\u6210\u4e09\u4e2a\u65b9\u6cd5 def many_update ( self , request , * args , ** kwargs ): request_data = request . data try : pks = [] for dic in request_data : pk = dic . pop ( 'pk' ) pks . append ( pk ) car_query = models . Car . objects . filter ( is_delete = False , pk__in = pks ) . all () if len ( pks ) != len ( car_query ): raise Exception ( 'pk\u5bf9\u5e94\u7684\u6570\u636e\u4e0d\u5b58\u5728' ) except Exception as e : return Response ({ 'detail' : ' %s ' % e }, status = 400 ) car_ser = serializer . CarModelSerializer ( instance = car_query , data = request_data , many = True ) car_ser . is_valid ( raise_exception = True ) car_list = car_ser . save () return APIResponse ( results = serializer . CarModelSerializer ( instance = car_list , many = True ) . data ) def many_partial_update ( self , request , * args , ** kwargs ): request_data = request . data try : pks = [] for dic in request_data : pk = dic . pop ( 'pk' ) pks . append ( pk ) car_query = models . Car . objects . filter ( is_delete = False , pk__in = pks ) . all () if len ( pks ) != len ( car_query ): raise Exception ( 'pk\u5bf9\u5e94\u7684\u6570\u636e\u4e0d\u5b58\u5728' ) except Exception as e : return Response ({ 'detail' : ' %s ' % e }, status = 400 ) car_ser = serializer . CarModelSerializer ( instance = car_query , data = request_data , partial = True , many = True ) car_ser . is_valid ( raise_exception = True ) car_list = car_ser . save () return APIResponse ( results = serializer . CarModelSerializer ( instance = car_list , many = True ) . data ) def many_destroy ( self , request , * args , ** kwargs ): pks = request . data try : rows = models . Car . objects . filter ( is_delete = False , pk__in = pks ) . update ( is_delete = True ) except : return APIResponse ( 1 , '\u6570\u636e\u6709\u8bef' ) if rows : return APIResponse ( 0 , '\u5220\u9664\u6210\u529f' ) return APIResponse ( 1 , '\u5220\u9664\u5931\u8d25' ) # \u7fa4\u589e\u4e0e\u5355\u589e\u5fc5\u987b\u516c\u7528\u4e00\u4e2a\u63a5\u53e3\uff0c\u90fd\u8981\u8d70create\u65b9\u6cd5 - \u91cd\u5199create\u65b9\u6cd5\uff0c\u7528\u903b\u8f91\u8fdb\u884c\u62c6\u5206 def create ( self , request , * args , ** kwargs ): if isinstance ( request . data , list ): car_ser = serializer . CarModelSerializer ( data = request . data , many = True ) car_ser . is_valid ( raise_exception = True ) car_obj = car_ser . save () return APIResponse ( results = serializer . CarModelSerializer ( car_obj , many = True ) . data ) return super () . create ( request , * args , ** kwargs ) # destroy\u65b9\u6cd5\u662f\u5b8c\u6210is_delete\u5b57\u6bb5\u503c\u4fee\u6539 - \u91cd\u5199destroy\u65b9\u6cd5\uff0c\u81ea\u5b9a\u4e49\u5b9e\u73b0\u4f53 def destroy ( self , request , * args , ** kwargs ): car_obj = self . get_object () car_obj . is_delete = True car_obj . save () return APIResponse ( msg = '\u5220\u9664\u6210\u529f' ) # \u8ba9\u7fa4\u67e5\u6709\u72b6\u6001\u7801\u548c\u72b6\u6001\u4fe1\u606f - \u91cd\u5199list\u65b9\u6cd5 def list ( self , request , * args , ** kwargs ): response = super () . list ( request , * args , ** kwargs ) return APIResponse ( results = response . data ) # \u91cd\u5199retrieve\u65b9\u6cd5 def retrieve ( self , request , * args , ** kwargs ): response = super () . retrieve ( request , * args , ** kwargs ) return APIResponse ( results = response . data ) # urls.py url ( r '^v8/cars/$' , views . CarModelViewSet . as_view ({ 'get' : 'list' , 'post' : 'create' , 'put' : 'many_update' , 'patch' : 'many_partial_update' , 'delete' : 'many_destroy' })), url ( r '^v8/cars/(?P<pk>\\d+)/$' , views . CarModelViewSet . as_view ({ 'get' : 'retrieve' , 'put' : 'update' , 'patch' : 'partial_update' , 'delete' : 'destroy' })) \u89c6\u56fe\u96c6\u603b\u7ed3\uff1a \u6838\u5fc3\uff1a\u89c6\u56fe\u96c6\u90fd\u7ee7\u627f\u4e86 ViewSetMixin \u7c7b\uff0c\u8be5\u7c7b\u91cd\u5199\u4e86 as_view \u65b9\u6cd5\uff0c\u76f8\u6bd4 APIView\u7684as_view \u65b9\u6cd5\uff0c\u989d\u5916\u591a\u51fa\u4e86\u4e00\u4e2a\u53c2\u6570 actions \uff0c as_view({'get': 'list'}) \u4f20\u5165\u7684 {'get': 'list'} \u5c31\u88ab actions\u53c2\u6570 \u63a5\u6536\uff0c\u539f\u7406\u662f\u5c06get\u8bf7\u6c42\u6620\u5c04\u5230\u89c6\u56fe\u7c7b\u7684list \u51fd\u6570\u8fdb\u884c\u5904\u7406 \u5728\u6e90\u7801\u4e2d GenericViewSet \u548c ViewSet \u4e24\u4e2a\u89c6\u56fe\u96c6\u57fa\u7c7b GenericViewSet(ViewSetMixin, GenericAPIView) \uff0c\u8be5\u5206\u652f\u4e25\u683c\u6ee1\u8db3\u8d44\u6e90\u63a5\u53e3 ViewSet(ViewSetMixin, views.APIView) \uff0c \u8be5\u5206\u652f\u5417\uff0c\u6ee1\u8db3\u7684\u63a5\u53e3\u4e0e\u8d44\u6e90Model\u7c7b\u5173\u7cfb \u4e0d\u662f\u7279\u522b\u5bc6\u5207\uff1a\u5982\u767b\u5f55\u63a5\u53e3\u3001\u77ed\u4fe1\u9a8c\u8bc1\u7801\u63a5\u53e3 ReadOnlyModelViewSet \u4e0e ModelViewSet \u4e24\u4e2a\u89c6\u56fe\u96c6\u5b50\u7c7b\uff0c\u5c31\u662f\u505a\u4e00\u5806 mixins\u4e0eGenericViewSet \u7684\u7ec4\u5408\uff0c\u81ea\u5df1\u5728 urls.py \u6587\u4ef6\u4e2d\u914d\u7f6e as_view \u8bbe\u7f6e\u6620\u5c04\u5173\u7cfb\u3002 \u8865\u5145\u8def\u7531\u5c42\u5199\u6cd5 # # urls.py from rest_framework.routers import SimpleRouter router = SimpleRouter () router . register ( 'v8/cars' , views . CarModelViewSet , basename = 'car' ) url ( r '' , include ( router . urls ))","title":"06 \u89c6\u56fe\u5bb6\u65cf"},{"location":"django%20rest%20framework/06%20%E8%A7%86%E5%9B%BE%E5%AE%B6%E6%97%8F/#_1","text":"","title":"\u89c6\u56fe\u5bb6\u65cf"},{"location":"django%20rest%20framework/06%20%E8%A7%86%E5%9B%BE%E5%AE%B6%E6%97%8F/#_2","text":"from rest_framework import views , mixins , generics , viewsets views \uff1a\u89c6\u56fe\u7c7b APIView\uff0cGenericAPIView(generics\u4e2d) mixins \uff1a\u89c6\u56fe\u5de5\u5177\u7c7b CreateModelMixin\uff0cListModelMixin\uff0cRetrieveModelMixin\uff0cUpdateModelMixin\uff0cDestroyModelMixin generics \uff1a\u5de5\u5177\u89c6\u56fe\u7c7b \u6709\u4e5d\u4e2a\u7c7b viewsets \uff1a\u89c6\u56fe\u96c6 \u4e24\u4e2a\u89c6\u56fe\u96c6\u57fa\u7c7b\uff0c\u4e24\u4e2a\u89c6\u56fe\u96c6\u5b50\u7c7b\uff0c\u4e00\u4e2a\u5de5\u5177\u7c7b","title":"\u89c6\u56fe\u5bb6\u65cf\u7b80\u4ecb"},{"location":"django%20rest%20framework/06%20%E8%A7%86%E5%9B%BE%E5%AE%B6%E6%97%8F/#apiview","text":"\u7ee7\u627fView\uff0c\u62e5\u6709View\u7684\u6240\u6709 \u91cd\u5199\u4e86as_view\u65b9\u6cd5\uff0c\u5c40\u90e8\u7981\u7528csrf\u8ba4\u8bc1 \u91cd\u5199dispatch \u589e\u52a0\u4e00\u7cfb\u5217\u7c7b\u5c5e\u6027\uff0c\u5c40\u90e8 \u6e32\u67d3\u548c\u89e3\u6790\u914d\u7f6e","title":"\u89c6\u56fe\u7c7bAPIView"},{"location":"django%20rest%20framework/06%20%E8%A7%86%E5%9B%BE%E5%AE%B6%E6%97%8F/#genericapiview","text":"GenericAPIView \u7ee7\u627fAPIView\uff0c\u62e5\u6709APIView\u7684\u6240\u6709\u65b9\u6cd5\u3001\u5c5e\u6027 # \u5de5\u5177\u89c6\u56fe\u7c7b from rest_framework.generics import GenericAPIView class CarGenericAPIView ( GenericAPIView ): # \u4e0d\u80fd\u76f4\u63a5\u5199\u5230objects\u7ed3\u675f\uff0c\u56e0\u4e3aobjects\u7ed3\u675f\u65f6\uff0c\u4e0d\u662fQuerySet\u5bf9\u8c61\uff0c\u800c\u662fManager\u5bf9\u8c61\uff0c\u4f46 .all() \u548c .filter() \u540e\u4e00\u5b9a\u662fQuerySet\u5bf9\u8c61 queryset = models . Car . objects . filter ( is_delete = False ) . all () serializer_class = serializer . CarModelSerializer lookup_url_kwarg = 'pk' # \u7fa4\u67e5 \"\"\" def get(self, request, *args, **kwargs): car_query = self.get_queryset() car_ser = self.get_serializer(car_query, many=True) return APIResponse(results=car_ser.data) \"\"\" # \u5355\u67e5 def get ( self , request , * args , ** kwargs ): car_obj = self . get_object () car_ser = self . get_serializer ( car_obj ) return APIResponse ( results = car_ser . data ) GenericAPIView\u603b\u7ed3\uff1a \u7ee7\u627fAPIView\uff0c\u62e5\u6709APIView\u7684\u6240\u6709 get_queryset \u65b9\u6cd5\uff0c\u914d\u7f6e queryset \u7c7b\u5c5e\u6027\uff0c\u63d0\u4f9b\u89c6\u56fe\u7c7b\u76f8\u5173\u7684Models \u5728 get_queryset \u65b9\u6cd5\u7684\u57fa\u7840\u4e0a\uff0c\u6709\u4e86 get_object \u65b9\u6cd5\uff0c\u914d\u7f6e lookup_url_kwarg \u5c5e\u6027\uff0c\u63d0\u4f9b\u89c6\u56fe\u7c7b\u76f8\u5173\u7684\u5177\u4f53\u7684models get_serializer \u65b9\u6cd5\uff0c\u914d\u7f6e serializer_class \u7c7b\u5c5e\u6027\uff0c\u63d0\u4f9b\u89c6\u56fe\u7c7b\u76f8\u5173\u7684\u5e8f\u5217\u5316\u5bf9\u8c61 GenericAPIView\u5c31\u662f\u5728APIView\u7684\u57fa\u7840\u4e0a\u989d\u5916\u63d0\u4f9b\u4e86\u4e09\u4e2a\u65b9\u6cd5\u3001\u4e09\u4e2a\u7c7b\u5c5e\u6027\uff0c\u5982\u679c\u4e0d\u914d\u5408\u89c6\u56fe\u5de5\u5177\u7c7b\uff0c\u4f53\u73b0\u4e0d\u51fa\u4f18\u52bf \u5176\u76ee\u7684\uff1a\u89c6\u56fe\u4e2d\u7684\u589e\u5220\u6539\u67e5\u903b\u8f91\u76f8\u4f3c\uff0c\u4f46\u64cd\u4f5c\u7684\u8d44\u6e90\u4e0d\u4e00\u81f4\uff0c\u64cd\u4f5c\u8d44\u6e90\u5c31\u662f\u64cd\u4f5c \u8d44\u6e90\u5bf9\u8c61\u4eec\u3001\u8d44\u6e90\u5bf9\u8c61\u4ee5\u53ca\u8d44\u6e90\u76f8\u5173\u7684\u5e8f\u5217\u5316\u7c7b\uff0c\u5c06\u8fd9\u4e09\u8005\u5f62\u6210\u914d\u7f6e\uff0c\u90a3\u64cd\u4f5c\u903b\u8f91\u5c31\u4e00\u81f4\uff0c\u5c31\u53ef\u4ee5\u8fdb\u884c\u5c01\u88c5\u3002","title":"\u89c6\u56fe\u7c7bGenericAPIView"},{"location":"django%20rest%20framework/06%20%E8%A7%86%E5%9B%BE%E5%AE%B6%E6%97%8F/#mixins","text":"# mixins\u89c6\u56fe\u5de5\u5177\u7c7b from rest_framework.mixins import RetrieveModelMixin , ListModelMixin , CreateModelMixin class CarReadCreateGenericAPIView ( RetrieveModelMixin , ListModelMixin , CreateModelMixin , GenericAPIView ): queryset = models . Car . objects . filter ( is_delete = False ) . all () serializer_class = serializer . CarModelSerializer lookup_url_kwarg = 'pk' # \u7fa4\u67e5 \"\"\" def get(self, request, *args, **kwargs): return self.list(request, *args, **kwargs) \"\"\" # \u5355\u67e5 def get ( self , request , * args , ** kwargs ): response = self . retrieve ( request , * args , ** kwargs ) return APIResponse ( results = response . data ) # \u5355\u589e def post ( self , request , * args , ** kwargs ): return self . create ( request , * args , ** kwargs ) mixins\u89c6\u56fe\u5de5\u5177\u7c7b\uff1a\u6709\u4e94\u4e2a\u7c7b\u3001\u516d\u4e2a\u65b9\u6cd5 \u9700\u8981\u914d\u5408 GenericAPIView \u7c7b\u4f7f\u7528\uff0c\u5c06\u5355\u67e5\u3001\u7fa4\u67e5\u3001\u5355\u589e\u3001\u6574\u4f53\u5355\u6539\u3001\u5c40\u90e8\u5355\u6539\u3001\u5355\u5220\u516d\u4e2a\u63a5\u53e3\u5c01\u88c5\u6210 retrieve \u3001 list \u3001 create \u3001 update \u3001 partial_update \u3001 destroy \u516d\u4e2a\u65b9\u6cd5 \u8c03\u7528\u7684\u65b9\u6cd5\u5c31\u662f GenericAPIView \u63d0\u4f9b\u7684\uff0c\u914d\u5408 GenericAPIView \u7c7b\u4f7f\u7528","title":"\u89c6\u56fe\u5de5\u5177\u7c7bmixins"},{"location":"django%20rest%20framework/06%20%E8%A7%86%E5%9B%BE%E5%AE%B6%E6%97%8F/#generics","text":"# \u5355\u72ec\u5b8c\u6210\u5355\u67e5\u63a5\u53e3 from rest_framework.generics import RetrieveAPIView class CarRetrieveAPIView ( RetrieveAPIView ): queryset = models . Car . objects . filter ( is_delete = False ) . all () serializer_class = serializer . CarModelSerializer lookup_url_kwarg = 'pk' # \u5355\u72ec\u5b8c\u6210\u7fa4\u67e5\u63a5\u53e3 from rest_framework.generics import ListAPIView class CarListAPIView ( ListAPIView ): queryset = models . Car . objects . filter ( is_delete = False ) . all () serializer_class = serializer . CarModelSerializer # \u5b8c\u6210\u5355\u67e5\u63a5\u53e3\u3001\u6574\u4f53\u5355\u6539\u63a5\u53e3\u3001\u5c40\u90e8\u5355\u6539\u63a5\u53e3\u3001\u5355\u5220\u63a5\u53e3 from rest_framework.generics import RetrieveUpdateDestroyAPIView class CarRetrieveUpdateDestroyAPIView ( RetrieveUpdateDestroyAPIView ): queryset = models . Car . objects . filter ( is_delete = False ) . all () serializer_class = serializer . CarModelSerializer generics \u5de5\u5177\u89c6\u56fe\u7c7b \u6709\u4e5d\u79cd\u7ec4\u5408 \u5e2e\u6211\u4eec\u5c06\u4e0d\u540c\u79cd\u7c7b\u7684 mixins \u4e0e GenericAPIView \u8fdb\u884c\u7ec4\u5408 \u4e0d\u540c\u7684\u7ec4\u5408\u5e2e\u6211\u4eec\u5b9e\u73b0\u597d\u5bf9\u5e94\u7684 get \u3001 post \u3001 put \u3001 patch \u3001 delete \u65b9\u6cd5 \u53ea\u8981\u6211\u4eec\u81ea\u5df1\u914d\u7f6e\u4e09\u4e2a\u7c7b\u5c5e\u6027\u5373\u53ef\uff1a queryset \u3001 serializer_class \u3001 lookup_url_kwarg","title":"\u5de5\u5177\u89c6\u56fe\u7c7bgenerics"},{"location":"django%20rest%20framework/06%20%E8%A7%86%E5%9B%BE%E5%AE%B6%E6%97%8F/#viewsets","text":"\u8fd9\u91cc\u7684 ViewSetMixin \u91cd\u5199\u4e86 as_view \u65b9\u6cd5 # \u89c6\u56fe\u96c6 from rest_framework.viewsets import ViewSetMixin , ViewSet , GenericViewSet , ModelViewSet class CarReadOnlyAPIView ( RetrieveModelMixin , ListModelMixin , GenericViewSet ): queryset = models . Car . objects . filter ( is_delete = False ) . all () serializer_class = serializer . CarModelSerializer # urls.py url ( r '^v7/cars/$' , views . CarReadOnlyAPIView . as_view ({ 'get' : 'list' })), url ( r '^v7/cars/(?P<pk>\\d+)/$' , views . CarReadOnlyAPIView . as_view ({ 'get' : 'retrieve' })),","title":"\u89c6\u56fe\u96c6viewsets"},{"location":"django%20rest%20framework/06%20%E8%A7%86%E5%9B%BE%E5%AE%B6%E6%97%8F/#_3","text":"# \u5b9e\u73b0\u4e86\u516d\u5927\u63a5\u53e3\uff0c\u5355\u67e5\u3001\u7fa4\u67e5\u3001\u5355\u589e\u3001\u6574\u4f53\u5355\u6539\u3001\u5c40\u90e8\u5355\u6539\u3001\u5355\u5220 class CarModelViewSet ( ModelViewSet ): queryset = models . Car . objects . filter ( is_delete = False ) . all () serializer_class = serializer . CarModelSerializer # urls.py url ( r '^v8/cars/$' , views . CarModelViewSet . as_view ({ 'get' : 'list' , 'post' : 'create' })), url ( r '^v8/cars/(?P<pk>\\d+)/$' , views . CarModelViewSet . as_view ({ 'get' : 'retrieve' , 'put' : 'update' , 'patch' : 'partial_update' , 'delete' : 'destroy' })) \u8fd9\u6837\u8bbe\u8ba1\u7684\u4e0d\u5408\u7406\u70b9\uff1a \u6ca1\u6709\u7fa4\u589e\u3001\u6574\u4f53\u7fa4\u6539\u3001\u5c40\u90e8\u7fa4\u6539\u3001\u7fa4\u5220 \u56db\u4e2a\u63a5\u53e3 \u5220\u9664\u64cd\u4f5c\u89c6\u56fe\u96c6\u9ed8\u8ba4 \u8d70\u7684\u662f destroy \u65b9\u6cd5\uff0c \u662f\u5c06\u8d44\u6e90\u4ece\u6570\u636e\u5e93\u4e2d\u5220\u9664\uff0c\u800c\u4e0d\u662f\u5c06\u4e00\u4e2a\u5b57\u6bb5 is_delete \u5b57\u6bb5\u4fee\u6539 \u54cd\u5e94\u7684\u7ed3\u679c\u53ea\u6709\u6570\u636e\uff0c\u6ca1\u6709\u6570\u636e\u72b6\u6001\u7801\u548c\u72b6\u6001\u4fe1\u606f","title":"\u89c6\u56fe\u96c6\u5b9e\u73b0\u516d\u5927\u63a5\u53e3"},{"location":"django%20rest%20framework/06%20%E8%A7%86%E5%9B%BE%E5%AE%B6%E6%97%8F/#_4","text":"# \u5b9e\u73b0\u4e86\u516d\u5927\u63a5\u53e3\uff0c\u5355\u67e5\u3001\u7fa4\u67e5\u3001\u5355\u589e\u3001\u6574\u4f53\u5355\u6539\u3001\u5c40\u90e8\u5355\u6539\u3001\u5355\u5220 class CarModelViewSet ( ModelViewSet ): queryset = models . Car . objects . filter ( is_delete = False ) . all () serializer_class = serializer . CarModelSerializer # \u7fa4\u6574\u4f53\u6539\uff0c\u7fa4\u5c40\u90e8\u6539\uff0c\u5168\u5220\u4e09\u4e2a\u63a5\u53e3\u53ef\u4ee5\u72ec\u7acb\u6210\u4e09\u4e2a\u65b9\u6cd5 def many_update ( self , request , * args , ** kwargs ): request_data = request . data try : pks = [] for dic in request_data : pk = dic . pop ( 'pk' ) pks . append ( pk ) car_query = models . Car . objects . filter ( is_delete = False , pk__in = pks ) . all () if len ( pks ) != len ( car_query ): raise Exception ( 'pk\u5bf9\u5e94\u7684\u6570\u636e\u4e0d\u5b58\u5728' ) except Exception as e : return Response ({ 'detail' : ' %s ' % e }, status = 400 ) car_ser = serializer . CarModelSerializer ( instance = car_query , data = request_data , many = True ) car_ser . is_valid ( raise_exception = True ) car_list = car_ser . save () return APIResponse ( results = serializer . CarModelSerializer ( instance = car_list , many = True ) . data ) def many_partial_update ( self , request , * args , ** kwargs ): request_data = request . data try : pks = [] for dic in request_data : pk = dic . pop ( 'pk' ) pks . append ( pk ) car_query = models . Car . objects . filter ( is_delete = False , pk__in = pks ) . all () if len ( pks ) != len ( car_query ): raise Exception ( 'pk\u5bf9\u5e94\u7684\u6570\u636e\u4e0d\u5b58\u5728' ) except Exception as e : return Response ({ 'detail' : ' %s ' % e }, status = 400 ) car_ser = serializer . CarModelSerializer ( instance = car_query , data = request_data , partial = True , many = True ) car_ser . is_valid ( raise_exception = True ) car_list = car_ser . save () return APIResponse ( results = serializer . CarModelSerializer ( instance = car_list , many = True ) . data ) def many_destroy ( self , request , * args , ** kwargs ): pks = request . data try : rows = models . Car . objects . filter ( is_delete = False , pk__in = pks ) . update ( is_delete = True ) except : return APIResponse ( 1 , '\u6570\u636e\u6709\u8bef' ) if rows : return APIResponse ( 0 , '\u5220\u9664\u6210\u529f' ) return APIResponse ( 1 , '\u5220\u9664\u5931\u8d25' ) # \u7fa4\u589e\u4e0e\u5355\u589e\u5fc5\u987b\u516c\u7528\u4e00\u4e2a\u63a5\u53e3\uff0c\u90fd\u8981\u8d70create\u65b9\u6cd5 - \u91cd\u5199create\u65b9\u6cd5\uff0c\u7528\u903b\u8f91\u8fdb\u884c\u62c6\u5206 def create ( self , request , * args , ** kwargs ): if isinstance ( request . data , list ): car_ser = serializer . CarModelSerializer ( data = request . data , many = True ) car_ser . is_valid ( raise_exception = True ) car_obj = car_ser . save () return APIResponse ( results = serializer . CarModelSerializer ( car_obj , many = True ) . data ) return super () . create ( request , * args , ** kwargs ) # destroy\u65b9\u6cd5\u662f\u5b8c\u6210is_delete\u5b57\u6bb5\u503c\u4fee\u6539 - \u91cd\u5199destroy\u65b9\u6cd5\uff0c\u81ea\u5b9a\u4e49\u5b9e\u73b0\u4f53 def destroy ( self , request , * args , ** kwargs ): car_obj = self . get_object () car_obj . is_delete = True car_obj . save () return APIResponse ( msg = '\u5220\u9664\u6210\u529f' ) # \u8ba9\u7fa4\u67e5\u6709\u72b6\u6001\u7801\u548c\u72b6\u6001\u4fe1\u606f - \u91cd\u5199list\u65b9\u6cd5 def list ( self , request , * args , ** kwargs ): response = super () . list ( request , * args , ** kwargs ) return APIResponse ( results = response . data ) # \u91cd\u5199retrieve\u65b9\u6cd5 def retrieve ( self , request , * args , ** kwargs ): response = super () . retrieve ( request , * args , ** kwargs ) return APIResponse ( results = response . data ) # urls.py url ( r '^v8/cars/$' , views . CarModelViewSet . as_view ({ 'get' : 'list' , 'post' : 'create' , 'put' : 'many_update' , 'patch' : 'many_partial_update' , 'delete' : 'many_destroy' })), url ( r '^v8/cars/(?P<pk>\\d+)/$' , views . CarModelViewSet . as_view ({ 'get' : 'retrieve' , 'put' : 'update' , 'patch' : 'partial_update' , 'delete' : 'destroy' })) \u89c6\u56fe\u96c6\u603b\u7ed3\uff1a \u6838\u5fc3\uff1a\u89c6\u56fe\u96c6\u90fd\u7ee7\u627f\u4e86 ViewSetMixin \u7c7b\uff0c\u8be5\u7c7b\u91cd\u5199\u4e86 as_view \u65b9\u6cd5\uff0c\u76f8\u6bd4 APIView\u7684as_view \u65b9\u6cd5\uff0c\u989d\u5916\u591a\u51fa\u4e86\u4e00\u4e2a\u53c2\u6570 actions \uff0c as_view({'get': 'list'}) \u4f20\u5165\u7684 {'get': 'list'} \u5c31\u88ab actions\u53c2\u6570 \u63a5\u6536\uff0c\u539f\u7406\u662f\u5c06get\u8bf7\u6c42\u6620\u5c04\u5230\u89c6\u56fe\u7c7b\u7684list \u51fd\u6570\u8fdb\u884c\u5904\u7406 \u5728\u6e90\u7801\u4e2d GenericViewSet \u548c ViewSet \u4e24\u4e2a\u89c6\u56fe\u96c6\u57fa\u7c7b GenericViewSet(ViewSetMixin, GenericAPIView) \uff0c\u8be5\u5206\u652f\u4e25\u683c\u6ee1\u8db3\u8d44\u6e90\u63a5\u53e3 ViewSet(ViewSetMixin, views.APIView) \uff0c \u8be5\u5206\u652f\u5417\uff0c\u6ee1\u8db3\u7684\u63a5\u53e3\u4e0e\u8d44\u6e90Model\u7c7b\u5173\u7cfb \u4e0d\u662f\u7279\u522b\u5bc6\u5207\uff1a\u5982\u767b\u5f55\u63a5\u53e3\u3001\u77ed\u4fe1\u9a8c\u8bc1\u7801\u63a5\u53e3 ReadOnlyModelViewSet \u4e0e ModelViewSet \u4e24\u4e2a\u89c6\u56fe\u96c6\u5b50\u7c7b\uff0c\u5c31\u662f\u505a\u4e00\u5806 mixins\u4e0eGenericViewSet \u7684\u7ec4\u5408\uff0c\u81ea\u5df1\u5728 urls.py \u6587\u4ef6\u4e2d\u914d\u7f6e as_view \u8bbe\u7f6e\u6620\u5c04\u5173\u7cfb\u3002","title":"\u89e3\u51b3\u89c6\u56fe\u96c6\u7684\u4e0d\u5408\u7406"},{"location":"django%20rest%20framework/06%20%E8%A7%86%E5%9B%BE%E5%AE%B6%E6%97%8F/#_5","text":"# urls.py from rest_framework.routers import SimpleRouter router = SimpleRouter () router . register ( 'v8/cars' , views . CarModelViewSet , basename = 'car' ) url ( r '' , include ( router . urls ))","title":"\u8865\u5145\u8def\u7531\u5c42\u5199\u6cd5"},{"location":"django%20rest%20framework/07%20jwt%E8%AE%A4%E8%AF%81/","text":"jwt\u8ba4\u8bc1 # admin\u540e\u53f0\u5173\u8054\u81ea\u5b9a\u4e49\u7528\u6237\u8868 # from django.contrib import admin from django.contrib.auth.admin import UserAdmin as AuthUserAdmin from . import models class UserAdmin ( AuthUserAdmin ): # \u6dfb\u52a0\u7528\u6237\u9875\u9762\u53ef\u63a7\u5236\u5b57\u6bb5 add_fieldsets = ( ( None , { 'classes' : ( 'wide' ,), 'fields' : ( 'username' , 'password1' , 'password2' , 'phone' , 'is_staff' , 'is_active' ), }), ) # \u7528\u6237\u5217\u8868\u5c55\u793a\u9875\u9762\u663e\u793a\u5b57\u6bb5 list_display = ( 'username' , 'email' , 'mobile' , 'is_staff' , 'is_active' ) # \u6ce8\u518c\u81ea\u5b9a\u4e49User\u8868\uff0c\u7528admin\u7ba1\u7406\uff0c\u914d\u7f6eUserAdmin\uff0c\u5b9a\u5236\u5316\u7ba1\u7406\u9875\u9762 admin . site . register ( models . User , AuthUserAdmin ) \u7528\u6237\u6743\u9650\u5173\u7cfb RBAC\uff08Role-BasedAccessControl\uff09 # \u8868\uff1a User\u3001Group\u3001Permission\u3001UG\u5173\u7cfb\u8868\u3001UP\u5173\u7cfb\u8868\u3001GP\u5173\u7cfb\u8868 \u4f20\u7edf\u7684RBAC \u6709\u4e24\u79cd\uff1a\u6743\u9650\u4e09\u8868 => \u6743\u9650\u4e94\u8868(\u6ca1\u6709UP\u5173\u7cfb\u8868) Django\u4e2dAuth\u7ec4\u4ef6\u91c7\u7528\u7684\u662f \u6743\u9650\u516d\u8868 \uff08\u5728\u4f20\u7edfRBAC\u57fa\u7840\u4e0a\u589e\u52a0UP\u5173\u7cfb\u8868\uff09 \u6743\u9650\u4e09\u8868 # \u6743\u9650\u516d\u8868 # \u57fa\u4e8e\u540e\u53f0seesion\u7684token\u8ba4\u8bc1 # \u672a\u767b\u5f55\u72b6\u6001\u53d1\u9001\u767b\u5f55\u8bf7\u6c42\uff0c\u63d0\u4ea4\u8d26\u53f7\u5bc6\u7801\u6570\u636e\uff0c\u540e\u7aef \u5bf9\u8d26\u53f7\u5bc6\u7801\u8fdb\u884c\u6821\u9a8c \u540e\u7aef\u4e3a\u5f53\u524d\u8d26\u53f7\u4ee5\u53ca\u5f53\u524d\u5ba2\u6237\u7aef\u521b\u5efasession\u8868\uff0c\u5b58\u5230session\u8868\u4e2d \u670d\u52a1\u7aef\u505a\u51fa\u54cd\u5e94\uff0c\u5c06session\u4e2d\u7684\u8ba4\u8bc1\u5b57\u7b26\u4e32token\u4f20\u7ed9\u524d\u7aef\uff0c\u5b58\u5230cookie\u4e2d \u6d4f\u89c8\u5668 cookie\u5b58\u50a8\u670d\u52a1\u7aef\u8fd4\u56de\u7684token\uff0c\u4e0b\u4e00\u6b21\u8bf7\u6c42\u643a\u5e26\u7740token\u3002\u670d\u52a1\u7aef\u63a5\u6536\u524d\u53f0token\uff0c\u5e76\u62ff\u7740session\u4e0euser\u8868\u8fdb\u884c\u6821\u9a8c\u3002 \u9700\u8981\u4f18\u5316\u7684\u5730\u65b9\uff1a \u5ba2\u6237\u7aef\u670d\u52a1\u7aef\u90fd\u4f1a\u5b58\u50a8session\u76f8\u5173\u7684token \u670d\u52a1\u7aef\u8981\u5b58token\uff0c\u4e00\u5b9a\u4f1a\u8fdb\u884cIO\u64cd\u4f5c\uff0c\u5b58token\u662fIO\u5199\u64cd\u4f5c\uff0c\u670d\u52a1\u5668\u5e76\u53d1\u538b\u529b\u5f88\u5927 \u57fa\u4e8esession\u7684token\u8ba4\u8bc1\u670d\u52a1\u5668\u96c6\u7fa4 # \u5ba2\u6237\u7aef\u8bbf\u95ee\u670d\u52a1\u7aef\u8d44\u6e90\uff0c\u9700\u8981\u901a\u8fc7Nginx\u8fdb\u884c\u5206\u53d1\u8d44\u6e90\u7684\u8bbf\u95ee\uff0cNginx\u80fd\u505a\u5230\u8d1f\u8f7d\u5747\u8861\uff0c\u5c06\u591a\u4e2a\u5ba2\u6237\u7aef\u8bbf\u95ee\u7684\u8bf7\u6c42\u538b\u529b\u8ba9\u591a\u53f0\u670d\u52a1\u5668\u627f\u53d7\uff0c\u5e76\u4e14Nginx\u5b58\u50a8\u9759\u6001\u8d44\u6e90\uff0c\u5ba2\u6237\u7aef\u8bbf\u95ee\u7684\u9759\u6001\u8d44\u6e90\u4e0d\u9700\u8981\u4ece\u670d\u52a1\u7aef\u62ff\uff0c\u76f4\u63a5\u4eceNginx\u670d\u52a1\u5668\u4e0a\u62ff\u9759\u6001\u8d44\u6e90\uff0c\u5927\u5927\u964d\u4f4e\u4e86\u670d\u52a1\u5668\u7684\u538b\u529b\u3002 \u90e8\u7f72\u591a\u53f0\u670d\u52a1\u5668\uff0c\u4e00\u4e2a\u7528\u6765\u4ea7\u751ftoken\uff0c\u4e00\u4e2a\u6821\u9a8ctoken\uff0c\u5b83\u4eec\u9700\u8981\u6570\u636e\u540c\u6b65 jwt\u8ba4\u8bc1\u89c4\u5219 json web token # \u4f18\u70b9\uff1a \u6570\u636e\u5e93\u4e0d\u9700\u8981\u5b58\u50a8token\uff0c\u6240\u6709\u670d\u52a1\u5668\u7684IO\u64cd\u4f5c\u4f1a\u51cf\u5c11\uff08\u6ca1\u6709IO\u5199\u64cd\u4f5c\uff09 \u5ba2\u6237\u7aef\u5b58token\uff0c\u670d\u52a1\u5668\u53ea\u5b58\u50a8\u7b7e\u53d1\u4e0e\u6821\u9a8c\u7b97\u6cd5\uff0c\u6267\u884c\u6548\u7387\u9ad8 \u7b7e\u53d1\u4e0e\u6821\u9a8c\u7b97\u6cd5\u5728\u591a\u4e2a\u670d\u52a1\u5668\u53ef\u4ee5\u76f4\u63a5\u7edf\u4e00\uff0c\u5728jwt\u8ba4\u8bc1\u89c4\u5219\u4e0b\uff0c\u670d\u52a1\u5668\u505a\u96c6\u7fa4\u975e\u5e38\u4fbf\u6377 \u7a81\u7834\u70b9\uff1a token\u5fc5\u987b\u8981\u6709\u591a\u4e2a\u90e8\u5206\u7ec4\u6210\uff0c\u6709\u80fd\u53cd\u89e3\u7684\u90e8\u5206\uff0c\u4e5f\u6709\u4e0d\u80fd\u53cd\u89e3\u7684\u90e8\u5206\u3002jwt\u4e00\u822c\u91c7\u7528\u4e09\u6bb5\u5f0f token\u4e2d\u5fc5\u987b\u5305\u542b\u8fc7\u671f\u65f6\u95f4\uff0c\u4fdd\u8bc1token\u7684\u5b89\u5168\u6027\u4e0e\u65f6\u6548\u6027 jwt\u539f\u7406 # jwt\u7531 \u5934.\u8f7d\u8377.\u7b7e\u540d \u4e09\u90e8\u5206\u7ec4\u6210 \u6bcf\u4e00\u4e2a\u90e8\u5206\u90fd\u662f\u4e00\u4e2ajson\u5b57\u5178\uff0c \u5934\u548c\u8f7d\u8377\u91c7\u7528 base64 \u53ef\u9006\u52a0\u5bc6\u7b97\u6cd5\u52a0\u5bc6\uff0c\u7b7e\u540d\u91c7\u7528HS256\u4e0d\u53ef\u9006\u52a0\u5bc6 \u5185\u5bb9\uff1a \u5934\uff08\u57fa\u672c\u4fe1\u606f\uff09\uff1a\u53ef\u9006\u4e0d\u53ef\u9006\u91c7\u7528\u7684\u52a0\u5bc6\u7b97\u6cd5\u3001\u516c\u53f8\u540d\u79f0\u3001\u9879\u76ee\u7ec4\u4fe1\u606f\u3001\u5f00\u53d1\u8005\u4fe1\u606f\u2026\u2026 \u8f7d\u8377\uff08\u6838\u5fc3\u4fe1\u606f\uff09\uff1a\u7528\u6237\u4e3b\u952e\u3001\u7528\u6237\u8d26\u53f7\u3001\u5ba2\u6237\u7aef\u8bbe\u5907\u4fe1\u606f\u3001\u8fc7\u671f\u65f6\u95f4\u2026\u2026 \u7b7e\u540d\uff08\u5b89\u5168\u4fe1\u606f\uff09\uff1a\u5934\u7684\u52a0\u5bc6\u7ed3\u679c\u3001\u8f7d\u8377\u7684\u52a0\u5bc6\u7ed3\u679c\u3001\u670d\u52a1\u5668\u7684\u5b89\u5168\u7801\uff08\u76d0\uff09\u2026\u2026 \u57fa\u4e8ejwt\u7684token\u8ba4\u8bc1\u96c6\u7fa4 # \u7b7e\u53d1\u7b97\u6cd5\uff1a # \u5934\u5185\u5bb9\u5199\u6b7b\uff08\u53ef\u4ee5\u4e3a\u7a7a{}\uff09\uff1a\u516c\u53f8\u3001\u9879\u76ee\u7ec4\u4fe1\u606f\u90fd\u662f\u56fa\u5b9a\u4e0d\u53d8\u7684 \u5c06\u6570\u636e\u5b57\u5178\u8f6c\u5316\u4e3ajson\u5b57\u7b26\u4e32\uff0c\u518d\u5c06json\u5b57\u7b26\u4e32\u52a0\u5bc6\u6210base64\u5b57\u7b26\u4e32 \u8f7d\u8377\u7684\u5185\u5bb9\uff0c\u7528\u6237\u8d26\u53f7\u3001\u5ba2\u6237\u7aef\u8bbe\u5907\u4fe1\u606f\u662f\u7531\u5ba2\u6237\u7aef\u63d0\u4f9b\uff0c\u7528\u6237\u4e3b\u952e\u662f\u5ba2\u6237\u7aef\u63d0\u4f9b\u8d26\u53f7\u5bc6\u7801\u6821\u9a8cUser\u8868\u901a\u8fc7\u540e\u624d\u80fd\u786e\u5b9a\uff0c\u8fc7\u671f\u65f6\u95f4\u6839\u636e\u5f53\u524d\u65f6\u95f4\u4e0e\u914d\u7f6e\u7684\u8fc7\u671f\u65f6\u957f\u76f8\u7ed3\u5408\u4ea7\u751f\u3002 \u5c06\u6570\u636e\u5b57\u5178\u8f6c\u5316\u4e3ajson\u5b57\u7b26\u4e32\uff0c\u518d\u5c06json\u5b57\u7b26\u4e32\u52a0\u5bc6\u6210base64\u5b57\u7b26\u4e32 \u7b7e\u540d\u7684\u5185\u5bb9\uff0c\u5148\u5c06\u5934\u7684\u52a0\u5bc6\u7ed3\u679c\u3001\u8f7d\u8377\u7684\u52a0\u5bc6\u7ed3\u679c\u4f5c\u4e3a\u6210\u5458\uff0c\u518d\u4ece\u670d\u52a1\u5668\u4e0a\u62ff\u5b89\u5168\u7801\uff08\u4e0d\u80fd\u8ba9\u4efb\u4f55\u5ba2\u6237\u7aef\u77e5\u9053\uff09\uff0c\u4e5f\u53ef\u4ee5\u989d\u5916\u5305\u542b\u8f7d\u8377\u7684\u90e8\u5206\uff08\u7528\u6237\u4fe1\u606f\uff0c\u8bbe\u5907\u4fe1\u606f\uff09 \u5c06\u6570\u636e\u5b57\u5178\u8f6c\u5316\u4e3ajson\u5b57\u7b26\u4e32\uff0c\u518d\u5c06json\u5b57\u7b26\u4e32\u4e0d\u53ef\u9006\u52a0\u5bc6\u6210SH256\u5b57\u7b26\u4e32 \u5c06\u4e09\u4e2a\u5b57\u7b26\u4e32\u7528 . \u8fde\u63a5\u4ea7\u751f\u4e09\u6bb5\u5f0ftoken \u6821\u9a8c\u7b97\u6cd5\uff1a # \u4ece\u5ba2\u6237\u7aef\u63d0\u4ea4\u7684\u8bf7\u6c42\u4e2d\u62ff\u5230token\uff0c\u7528 . \u5206\u5272\u6210\u4e09\u6bb5 \uff08\u5982\u679c\u4e0d\u662f\u4e09\u6bb5\uff0c\u975e\u6cd5\uff09 \u5934\uff08\u7b2c\u4e00\u6bb5\uff09\u53ef\u4ee5\u4e0d\u7528\u89e3\u5bc6 \u8f7d\u8377\uff08\u7b2c\u4e8c\u6bb5\uff09\u4e00\u5b9a\u8981\u89e3\u5bc6\uff0c\u5148base64\u89e3\u5bc6\u6210json\u5b57\u7b26\u4e32\uff0c\u518d\u8f6c\u5316\u6210json\u5b57\u5178\u6570\u636e \u7528\u6237\u4e3b\u952e\u4e0e\u7528\u6237\u8d26\u53f7\u67e5\u8be2User\u8868\u786e\u5b9a\u7528\u6237\u662f\u5426\u5b58\u5728 \u8bbe\u5907\u4fe1\u606f\u7528\u672c\u6b21\u8bf7\u6c42\u63d0\u4ea4\u7684\u8bbe\u5907\u4fe1\u606f\u6bd4\u5bf9\uff0c\u786e\u5b9a\u524d\u540e\u662f\u5426\u662f\u7edf\u4e00\u8bbe\u5907\uff0c\u51b3\u5b9a\u662f\u5426\u5bf9\u7528\u6237\u505a\u5b89\u5168\u63d0\u793a\uff0c\u6bd4\u5982\u77ed\u4fe1\u90ae\u7bb1\u63d0\u793a\u5f02\u5730\u767b\u5f55 \u8fc7\u671f\u65f6\u95f4\u4e0e\u5f53\u524d\u65f6\u95f4\u6bd4\u5bf9\uff0c\u8be5token\u662f\u5426\u5728\u6709\u6548\u671f\u5185 \u7b7e\u540d\uff08\u7b2c\u4e09\u6bb5\uff09\u91c7\u7528\u52a0\u5bc6\u78b0\u649e\u6821\u9a8c\uff0c \u540c\u6837\u5c06\u5934\u3001\u8f7d\u8377\u52a0\u5bc6\u5b57\u7b26\u4e32\u548c\u6570\u636e\u5b89\u5168\u7801\u5f62\u6210json\u5b57\u5178\uff0c\u8f6c\u6362\u6210json\u5b57\u7b26\u4e32 \u91c7\u7528\u4e0d\u53ef\u9006HS256\u52a0\u5bc6\u5f62\u6210\u52a0\u5bc6\u5b57\u7b26\u4e32 \u65b0\u7684\u52a0\u5bc6\u5b57\u7b26\u4e32\u4e0e\u7b2c\u4e09\u6bb5\u7b7e\u540d\u78b0\u649e\u6bd4\u5bf9\uff0c\u4e00\u81f4\u624d\u80fd\u786e\u4fddtoken\u662f\u5408\u6cd5\u7684 \u524d\u9762\u7684\u7b97\u6cd5\u90fd\u901a\u8fc7\u540e\uff0c\u8f7d\u8377\u6821\u9a8c\u5f97\u5230\u7684User\u5bf9\u8c61\uff0c\u5c31\u662f\u8be5token\u4ee3\u8868\u7684\u767b\u5f55\u7528\u6237\uff0cdjango\u9879\u76ee\u4e00\u822c\u628a\u767b\u5f55\u7528\u6237\u5b58\u653e\u5728 request.user \u4e2d \u5237\u65b0\u7b97\u6cd5\uff1a # \u8981\u5728\u7b7e\u53d1token\u7684\u8f7d\u8377\u4e2d\uff0c\u989d\u5916\u6dfb\u52a0\u4e24\u4e2a\u65f6\u95f4\u4fe1\u606f\uff1a\u7b2c\u4e00\u6b21\u7b7e\u53d1token\u7684\u65f6\u95f4\u3001\u6700\u591a\u5f80\u540e\u5237\u65b0\u7684\u6709\u6548\u65f6\u95f4\u3002 \u6bcf\u4e00\u6b21\u8bf7\u6c42\u643a\u5e26token\uff0c\u4e0d\u4ec5\u8d70\u6821\u9a8c\u7b97\u6cd5\u9a8c\u8bc1token\u662f\u5426\u5408\u6cd5\uff0c\u8fd8\u8981\u989d\u5916\u8bf7\u6c42\u5237\u65b0token\u7684\u63a5\u53e3\uff0c\u5b8c\u6210token\u7684\u5237\u65b0\uff1a\u6821\u9a8c\u89c4\u5219\u4e0e\u6821\u9a8c\u7b97\u6cd5\u5dee\u4e0d\u591a\uff0c\u4f46\u662f\u8981\u5c06\u8fc7\u671f\u65f6\u95f4\u540e\u79fb\uff08\u6ca1\u6709\u8d85\u8fc7\u6709\u6548\u65f6\u95f4\uff0c\u4ea7\u751f\u65b0token\u7ed9\u5ba2\u6237\u7aef\uff0c\u5982\u679c\u8d85\u8fc7\u4e86\uff0c\u5237\u65b0\u5931\u8d25\uff09 \u6240\u4ee5\u670d\u52a1\u5668\u4e0d\u4ec5\u8981\u914d\u7f6e\u8fc7\u671f\u65f6\u95f4\uff0c\u8fd8\u8981\u914d\u7f6e\u6700\u957f\u5237\u65b0\u65f6\u95f4 drf-jwt \u63d2\u4ef6\u7b80\u5355\u4f7f\u7528 # \u5b89\u88c5\u63d2\u4ef6 pip3 install djangorestframework-jwt \u5728settings\u6587\u4ef6\u4e2d\u81ea\u5b9a\u4e49\u914d\u7f6ejwt # drf-jwt\u81ea\u5b9a\u4e49\u914d\u7f6e import datetime JWT_AUTH = { # \u8fc7\u671f\u65f6\u95f4 'JWT_EXPIRATION_DELTA' : datetime . timedelta ( seconds = 300 ), # \u662f\u5426\u5141\u8bb8\u5237\u65b0 'JWT_ALLOW_REFRESH' : False , # \u6700\u5927\u5237\u65b0\u7684\u8fc7\u671f\u65f6\u95f4 'JWT_REFRESH_EXPIRATION_DELTA' : datetime . timedelta ( days = 7 ), } \u5728\u8def\u7531\u4e2d\u8bbe\u7f6e # urls.py from django.conf.urls import url , include from .router import router # router.register('users', UserModelViewSet, basename='user') from rest_framework_jwt.views import ObtainJSONWebToken , RefreshJSONWebToken , VerifyJSONWebToken urlpatterns = [ # \u767b\u5f55\u63a5\u53e3\uff0c\u7b7e\u53d1token url ( r '^login/$' , ObtainJSONWebToken . as_view ()), # \u5237\u65b0token url ( r '^refresh/$' , RefreshJSONWebToken . as_view ()), # \u9a8c\u8bc1token url ( r '^verify/$' , VerifyJSONWebToken . as_view ()), url ( '' , include ( router . urls )) ]","title":"07 jwt\u8ba4\u8bc1"},{"location":"django%20rest%20framework/07%20jwt%E8%AE%A4%E8%AF%81/#jwt","text":"","title":"jwt\u8ba4\u8bc1"},{"location":"django%20rest%20framework/07%20jwt%E8%AE%A4%E8%AF%81/#admin","text":"from django.contrib import admin from django.contrib.auth.admin import UserAdmin as AuthUserAdmin from . import models class UserAdmin ( AuthUserAdmin ): # \u6dfb\u52a0\u7528\u6237\u9875\u9762\u53ef\u63a7\u5236\u5b57\u6bb5 add_fieldsets = ( ( None , { 'classes' : ( 'wide' ,), 'fields' : ( 'username' , 'password1' , 'password2' , 'phone' , 'is_staff' , 'is_active' ), }), ) # \u7528\u6237\u5217\u8868\u5c55\u793a\u9875\u9762\u663e\u793a\u5b57\u6bb5 list_display = ( 'username' , 'email' , 'mobile' , 'is_staff' , 'is_active' ) # \u6ce8\u518c\u81ea\u5b9a\u4e49User\u8868\uff0c\u7528admin\u7ba1\u7406\uff0c\u914d\u7f6eUserAdmin\uff0c\u5b9a\u5236\u5316\u7ba1\u7406\u9875\u9762 admin . site . register ( models . User , AuthUserAdmin )","title":"admin\u540e\u53f0\u5173\u8054\u81ea\u5b9a\u4e49\u7528\u6237\u8868"},{"location":"django%20rest%20framework/07%20jwt%E8%AE%A4%E8%AF%81/#rbacrole-basedaccesscontrol","text":"\u8868\uff1a User\u3001Group\u3001Permission\u3001UG\u5173\u7cfb\u8868\u3001UP\u5173\u7cfb\u8868\u3001GP\u5173\u7cfb\u8868 \u4f20\u7edf\u7684RBAC \u6709\u4e24\u79cd\uff1a\u6743\u9650\u4e09\u8868 => \u6743\u9650\u4e94\u8868(\u6ca1\u6709UP\u5173\u7cfb\u8868) Django\u4e2dAuth\u7ec4\u4ef6\u91c7\u7528\u7684\u662f \u6743\u9650\u516d\u8868 \uff08\u5728\u4f20\u7edfRBAC\u57fa\u7840\u4e0a\u589e\u52a0UP\u5173\u7cfb\u8868\uff09","title":"\u7528\u6237\u6743\u9650\u5173\u7cfb  RBAC\uff08Role-BasedAccessControl\uff09"},{"location":"django%20rest%20framework/07%20jwt%E8%AE%A4%E8%AF%81/#_1","text":"","title":"\u6743\u9650\u4e09\u8868"},{"location":"django%20rest%20framework/07%20jwt%E8%AE%A4%E8%AF%81/#_2","text":"","title":"\u6743\u9650\u516d\u8868"},{"location":"django%20rest%20framework/07%20jwt%E8%AE%A4%E8%AF%81/#seesiontoken","text":"\u672a\u767b\u5f55\u72b6\u6001\u53d1\u9001\u767b\u5f55\u8bf7\u6c42\uff0c\u63d0\u4ea4\u8d26\u53f7\u5bc6\u7801\u6570\u636e\uff0c\u540e\u7aef \u5bf9\u8d26\u53f7\u5bc6\u7801\u8fdb\u884c\u6821\u9a8c \u540e\u7aef\u4e3a\u5f53\u524d\u8d26\u53f7\u4ee5\u53ca\u5f53\u524d\u5ba2\u6237\u7aef\u521b\u5efasession\u8868\uff0c\u5b58\u5230session\u8868\u4e2d \u670d\u52a1\u7aef\u505a\u51fa\u54cd\u5e94\uff0c\u5c06session\u4e2d\u7684\u8ba4\u8bc1\u5b57\u7b26\u4e32token\u4f20\u7ed9\u524d\u7aef\uff0c\u5b58\u5230cookie\u4e2d \u6d4f\u89c8\u5668 cookie\u5b58\u50a8\u670d\u52a1\u7aef\u8fd4\u56de\u7684token\uff0c\u4e0b\u4e00\u6b21\u8bf7\u6c42\u643a\u5e26\u7740token\u3002\u670d\u52a1\u7aef\u63a5\u6536\u524d\u53f0token\uff0c\u5e76\u62ff\u7740session\u4e0euser\u8868\u8fdb\u884c\u6821\u9a8c\u3002 \u9700\u8981\u4f18\u5316\u7684\u5730\u65b9\uff1a \u5ba2\u6237\u7aef\u670d\u52a1\u7aef\u90fd\u4f1a\u5b58\u50a8session\u76f8\u5173\u7684token \u670d\u52a1\u7aef\u8981\u5b58token\uff0c\u4e00\u5b9a\u4f1a\u8fdb\u884cIO\u64cd\u4f5c\uff0c\u5b58token\u662fIO\u5199\u64cd\u4f5c\uff0c\u670d\u52a1\u5668\u5e76\u53d1\u538b\u529b\u5f88\u5927","title":"\u57fa\u4e8e\u540e\u53f0seesion\u7684token\u8ba4\u8bc1"},{"location":"django%20rest%20framework/07%20jwt%E8%AE%A4%E8%AF%81/#sessiontoken","text":"\u5ba2\u6237\u7aef\u8bbf\u95ee\u670d\u52a1\u7aef\u8d44\u6e90\uff0c\u9700\u8981\u901a\u8fc7Nginx\u8fdb\u884c\u5206\u53d1\u8d44\u6e90\u7684\u8bbf\u95ee\uff0cNginx\u80fd\u505a\u5230\u8d1f\u8f7d\u5747\u8861\uff0c\u5c06\u591a\u4e2a\u5ba2\u6237\u7aef\u8bbf\u95ee\u7684\u8bf7\u6c42\u538b\u529b\u8ba9\u591a\u53f0\u670d\u52a1\u5668\u627f\u53d7\uff0c\u5e76\u4e14Nginx\u5b58\u50a8\u9759\u6001\u8d44\u6e90\uff0c\u5ba2\u6237\u7aef\u8bbf\u95ee\u7684\u9759\u6001\u8d44\u6e90\u4e0d\u9700\u8981\u4ece\u670d\u52a1\u7aef\u62ff\uff0c\u76f4\u63a5\u4eceNginx\u670d\u52a1\u5668\u4e0a\u62ff\u9759\u6001\u8d44\u6e90\uff0c\u5927\u5927\u964d\u4f4e\u4e86\u670d\u52a1\u5668\u7684\u538b\u529b\u3002 \u90e8\u7f72\u591a\u53f0\u670d\u52a1\u5668\uff0c\u4e00\u4e2a\u7528\u6765\u4ea7\u751ftoken\uff0c\u4e00\u4e2a\u6821\u9a8ctoken\uff0c\u5b83\u4eec\u9700\u8981\u6570\u636e\u540c\u6b65","title":"\u57fa\u4e8esession\u7684token\u8ba4\u8bc1\u670d\u52a1\u5668\u96c6\u7fa4"},{"location":"django%20rest%20framework/07%20jwt%E8%AE%A4%E8%AF%81/#jwt-json-web-token","text":"\u4f18\u70b9\uff1a \u6570\u636e\u5e93\u4e0d\u9700\u8981\u5b58\u50a8token\uff0c\u6240\u6709\u670d\u52a1\u5668\u7684IO\u64cd\u4f5c\u4f1a\u51cf\u5c11\uff08\u6ca1\u6709IO\u5199\u64cd\u4f5c\uff09 \u5ba2\u6237\u7aef\u5b58token\uff0c\u670d\u52a1\u5668\u53ea\u5b58\u50a8\u7b7e\u53d1\u4e0e\u6821\u9a8c\u7b97\u6cd5\uff0c\u6267\u884c\u6548\u7387\u9ad8 \u7b7e\u53d1\u4e0e\u6821\u9a8c\u7b97\u6cd5\u5728\u591a\u4e2a\u670d\u52a1\u5668\u53ef\u4ee5\u76f4\u63a5\u7edf\u4e00\uff0c\u5728jwt\u8ba4\u8bc1\u89c4\u5219\u4e0b\uff0c\u670d\u52a1\u5668\u505a\u96c6\u7fa4\u975e\u5e38\u4fbf\u6377 \u7a81\u7834\u70b9\uff1a token\u5fc5\u987b\u8981\u6709\u591a\u4e2a\u90e8\u5206\u7ec4\u6210\uff0c\u6709\u80fd\u53cd\u89e3\u7684\u90e8\u5206\uff0c\u4e5f\u6709\u4e0d\u80fd\u53cd\u89e3\u7684\u90e8\u5206\u3002jwt\u4e00\u822c\u91c7\u7528\u4e09\u6bb5\u5f0f token\u4e2d\u5fc5\u987b\u5305\u542b\u8fc7\u671f\u65f6\u95f4\uff0c\u4fdd\u8bc1token\u7684\u5b89\u5168\u6027\u4e0e\u65f6\u6548\u6027","title":"jwt\u8ba4\u8bc1\u89c4\u5219    json  web  token"},{"location":"django%20rest%20framework/07%20jwt%E8%AE%A4%E8%AF%81/#jwt_1","text":"jwt\u7531 \u5934.\u8f7d\u8377.\u7b7e\u540d \u4e09\u90e8\u5206\u7ec4\u6210 \u6bcf\u4e00\u4e2a\u90e8\u5206\u90fd\u662f\u4e00\u4e2ajson\u5b57\u5178\uff0c \u5934\u548c\u8f7d\u8377\u91c7\u7528 base64 \u53ef\u9006\u52a0\u5bc6\u7b97\u6cd5\u52a0\u5bc6\uff0c\u7b7e\u540d\u91c7\u7528HS256\u4e0d\u53ef\u9006\u52a0\u5bc6 \u5185\u5bb9\uff1a \u5934\uff08\u57fa\u672c\u4fe1\u606f\uff09\uff1a\u53ef\u9006\u4e0d\u53ef\u9006\u91c7\u7528\u7684\u52a0\u5bc6\u7b97\u6cd5\u3001\u516c\u53f8\u540d\u79f0\u3001\u9879\u76ee\u7ec4\u4fe1\u606f\u3001\u5f00\u53d1\u8005\u4fe1\u606f\u2026\u2026 \u8f7d\u8377\uff08\u6838\u5fc3\u4fe1\u606f\uff09\uff1a\u7528\u6237\u4e3b\u952e\u3001\u7528\u6237\u8d26\u53f7\u3001\u5ba2\u6237\u7aef\u8bbe\u5907\u4fe1\u606f\u3001\u8fc7\u671f\u65f6\u95f4\u2026\u2026 \u7b7e\u540d\uff08\u5b89\u5168\u4fe1\u606f\uff09\uff1a\u5934\u7684\u52a0\u5bc6\u7ed3\u679c\u3001\u8f7d\u8377\u7684\u52a0\u5bc6\u7ed3\u679c\u3001\u670d\u52a1\u5668\u7684\u5b89\u5168\u7801\uff08\u76d0\uff09\u2026\u2026","title":"jwt\u539f\u7406"},{"location":"django%20rest%20framework/07%20jwt%E8%AE%A4%E8%AF%81/#jwttoken","text":"","title":"\u57fa\u4e8ejwt\u7684token\u8ba4\u8bc1\u96c6\u7fa4"},{"location":"django%20rest%20framework/07%20jwt%E8%AE%A4%E8%AF%81/#_3","text":"\u5934\u5185\u5bb9\u5199\u6b7b\uff08\u53ef\u4ee5\u4e3a\u7a7a{}\uff09\uff1a\u516c\u53f8\u3001\u9879\u76ee\u7ec4\u4fe1\u606f\u90fd\u662f\u56fa\u5b9a\u4e0d\u53d8\u7684 \u5c06\u6570\u636e\u5b57\u5178\u8f6c\u5316\u4e3ajson\u5b57\u7b26\u4e32\uff0c\u518d\u5c06json\u5b57\u7b26\u4e32\u52a0\u5bc6\u6210base64\u5b57\u7b26\u4e32 \u8f7d\u8377\u7684\u5185\u5bb9\uff0c\u7528\u6237\u8d26\u53f7\u3001\u5ba2\u6237\u7aef\u8bbe\u5907\u4fe1\u606f\u662f\u7531\u5ba2\u6237\u7aef\u63d0\u4f9b\uff0c\u7528\u6237\u4e3b\u952e\u662f\u5ba2\u6237\u7aef\u63d0\u4f9b\u8d26\u53f7\u5bc6\u7801\u6821\u9a8cUser\u8868\u901a\u8fc7\u540e\u624d\u80fd\u786e\u5b9a\uff0c\u8fc7\u671f\u65f6\u95f4\u6839\u636e\u5f53\u524d\u65f6\u95f4\u4e0e\u914d\u7f6e\u7684\u8fc7\u671f\u65f6\u957f\u76f8\u7ed3\u5408\u4ea7\u751f\u3002 \u5c06\u6570\u636e\u5b57\u5178\u8f6c\u5316\u4e3ajson\u5b57\u7b26\u4e32\uff0c\u518d\u5c06json\u5b57\u7b26\u4e32\u52a0\u5bc6\u6210base64\u5b57\u7b26\u4e32 \u7b7e\u540d\u7684\u5185\u5bb9\uff0c\u5148\u5c06\u5934\u7684\u52a0\u5bc6\u7ed3\u679c\u3001\u8f7d\u8377\u7684\u52a0\u5bc6\u7ed3\u679c\u4f5c\u4e3a\u6210\u5458\uff0c\u518d\u4ece\u670d\u52a1\u5668\u4e0a\u62ff\u5b89\u5168\u7801\uff08\u4e0d\u80fd\u8ba9\u4efb\u4f55\u5ba2\u6237\u7aef\u77e5\u9053\uff09\uff0c\u4e5f\u53ef\u4ee5\u989d\u5916\u5305\u542b\u8f7d\u8377\u7684\u90e8\u5206\uff08\u7528\u6237\u4fe1\u606f\uff0c\u8bbe\u5907\u4fe1\u606f\uff09 \u5c06\u6570\u636e\u5b57\u5178\u8f6c\u5316\u4e3ajson\u5b57\u7b26\u4e32\uff0c\u518d\u5c06json\u5b57\u7b26\u4e32\u4e0d\u53ef\u9006\u52a0\u5bc6\u6210SH256\u5b57\u7b26\u4e32 \u5c06\u4e09\u4e2a\u5b57\u7b26\u4e32\u7528 . \u8fde\u63a5\u4ea7\u751f\u4e09\u6bb5\u5f0ftoken","title":"\u7b7e\u53d1\u7b97\u6cd5\uff1a"},{"location":"django%20rest%20framework/07%20jwt%E8%AE%A4%E8%AF%81/#_4","text":"\u4ece\u5ba2\u6237\u7aef\u63d0\u4ea4\u7684\u8bf7\u6c42\u4e2d\u62ff\u5230token\uff0c\u7528 . \u5206\u5272\u6210\u4e09\u6bb5 \uff08\u5982\u679c\u4e0d\u662f\u4e09\u6bb5\uff0c\u975e\u6cd5\uff09 \u5934\uff08\u7b2c\u4e00\u6bb5\uff09\u53ef\u4ee5\u4e0d\u7528\u89e3\u5bc6 \u8f7d\u8377\uff08\u7b2c\u4e8c\u6bb5\uff09\u4e00\u5b9a\u8981\u89e3\u5bc6\uff0c\u5148base64\u89e3\u5bc6\u6210json\u5b57\u7b26\u4e32\uff0c\u518d\u8f6c\u5316\u6210json\u5b57\u5178\u6570\u636e \u7528\u6237\u4e3b\u952e\u4e0e\u7528\u6237\u8d26\u53f7\u67e5\u8be2User\u8868\u786e\u5b9a\u7528\u6237\u662f\u5426\u5b58\u5728 \u8bbe\u5907\u4fe1\u606f\u7528\u672c\u6b21\u8bf7\u6c42\u63d0\u4ea4\u7684\u8bbe\u5907\u4fe1\u606f\u6bd4\u5bf9\uff0c\u786e\u5b9a\u524d\u540e\u662f\u5426\u662f\u7edf\u4e00\u8bbe\u5907\uff0c\u51b3\u5b9a\u662f\u5426\u5bf9\u7528\u6237\u505a\u5b89\u5168\u63d0\u793a\uff0c\u6bd4\u5982\u77ed\u4fe1\u90ae\u7bb1\u63d0\u793a\u5f02\u5730\u767b\u5f55 \u8fc7\u671f\u65f6\u95f4\u4e0e\u5f53\u524d\u65f6\u95f4\u6bd4\u5bf9\uff0c\u8be5token\u662f\u5426\u5728\u6709\u6548\u671f\u5185 \u7b7e\u540d\uff08\u7b2c\u4e09\u6bb5\uff09\u91c7\u7528\u52a0\u5bc6\u78b0\u649e\u6821\u9a8c\uff0c \u540c\u6837\u5c06\u5934\u3001\u8f7d\u8377\u52a0\u5bc6\u5b57\u7b26\u4e32\u548c\u6570\u636e\u5b89\u5168\u7801\u5f62\u6210json\u5b57\u5178\uff0c\u8f6c\u6362\u6210json\u5b57\u7b26\u4e32 \u91c7\u7528\u4e0d\u53ef\u9006HS256\u52a0\u5bc6\u5f62\u6210\u52a0\u5bc6\u5b57\u7b26\u4e32 \u65b0\u7684\u52a0\u5bc6\u5b57\u7b26\u4e32\u4e0e\u7b2c\u4e09\u6bb5\u7b7e\u540d\u78b0\u649e\u6bd4\u5bf9\uff0c\u4e00\u81f4\u624d\u80fd\u786e\u4fddtoken\u662f\u5408\u6cd5\u7684 \u524d\u9762\u7684\u7b97\u6cd5\u90fd\u901a\u8fc7\u540e\uff0c\u8f7d\u8377\u6821\u9a8c\u5f97\u5230\u7684User\u5bf9\u8c61\uff0c\u5c31\u662f\u8be5token\u4ee3\u8868\u7684\u767b\u5f55\u7528\u6237\uff0cdjango\u9879\u76ee\u4e00\u822c\u628a\u767b\u5f55\u7528\u6237\u5b58\u653e\u5728 request.user \u4e2d","title":"\u6821\u9a8c\u7b97\u6cd5\uff1a"},{"location":"django%20rest%20framework/07%20jwt%E8%AE%A4%E8%AF%81/#_5","text":"\u8981\u5728\u7b7e\u53d1token\u7684\u8f7d\u8377\u4e2d\uff0c\u989d\u5916\u6dfb\u52a0\u4e24\u4e2a\u65f6\u95f4\u4fe1\u606f\uff1a\u7b2c\u4e00\u6b21\u7b7e\u53d1token\u7684\u65f6\u95f4\u3001\u6700\u591a\u5f80\u540e\u5237\u65b0\u7684\u6709\u6548\u65f6\u95f4\u3002 \u6bcf\u4e00\u6b21\u8bf7\u6c42\u643a\u5e26token\uff0c\u4e0d\u4ec5\u8d70\u6821\u9a8c\u7b97\u6cd5\u9a8c\u8bc1token\u662f\u5426\u5408\u6cd5\uff0c\u8fd8\u8981\u989d\u5916\u8bf7\u6c42\u5237\u65b0token\u7684\u63a5\u53e3\uff0c\u5b8c\u6210token\u7684\u5237\u65b0\uff1a\u6821\u9a8c\u89c4\u5219\u4e0e\u6821\u9a8c\u7b97\u6cd5\u5dee\u4e0d\u591a\uff0c\u4f46\u662f\u8981\u5c06\u8fc7\u671f\u65f6\u95f4\u540e\u79fb\uff08\u6ca1\u6709\u8d85\u8fc7\u6709\u6548\u65f6\u95f4\uff0c\u4ea7\u751f\u65b0token\u7ed9\u5ba2\u6237\u7aef\uff0c\u5982\u679c\u8d85\u8fc7\u4e86\uff0c\u5237\u65b0\u5931\u8d25\uff09 \u6240\u4ee5\u670d\u52a1\u5668\u4e0d\u4ec5\u8981\u914d\u7f6e\u8fc7\u671f\u65f6\u95f4\uff0c\u8fd8\u8981\u914d\u7f6e\u6700\u957f\u5237\u65b0\u65f6\u95f4","title":"\u5237\u65b0\u7b97\u6cd5\uff1a"},{"location":"django%20rest%20framework/07%20jwt%E8%AE%A4%E8%AF%81/#drf-jwt","text":"\u5b89\u88c5\u63d2\u4ef6 pip3 install djangorestframework-jwt \u5728settings\u6587\u4ef6\u4e2d\u81ea\u5b9a\u4e49\u914d\u7f6ejwt # drf-jwt\u81ea\u5b9a\u4e49\u914d\u7f6e import datetime JWT_AUTH = { # \u8fc7\u671f\u65f6\u95f4 'JWT_EXPIRATION_DELTA' : datetime . timedelta ( seconds = 300 ), # \u662f\u5426\u5141\u8bb8\u5237\u65b0 'JWT_ALLOW_REFRESH' : False , # \u6700\u5927\u5237\u65b0\u7684\u8fc7\u671f\u65f6\u95f4 'JWT_REFRESH_EXPIRATION_DELTA' : datetime . timedelta ( days = 7 ), } \u5728\u8def\u7531\u4e2d\u8bbe\u7f6e # urls.py from django.conf.urls import url , include from .router import router # router.register('users', UserModelViewSet, basename='user') from rest_framework_jwt.views import ObtainJSONWebToken , RefreshJSONWebToken , VerifyJSONWebToken urlpatterns = [ # \u767b\u5f55\u63a5\u53e3\uff0c\u7b7e\u53d1token url ( r '^login/$' , ObtainJSONWebToken . as_view ()), # \u5237\u65b0token url ( r '^refresh/$' , RefreshJSONWebToken . as_view ()), # \u9a8c\u8bc1token url ( r '^verify/$' , VerifyJSONWebToken . as_view ()), url ( '' , include ( router . urls )) ]","title":"drf-jwt  \u63d2\u4ef6\u7b80\u5355\u4f7f\u7528"},{"location":"django%20rest%20framework/08%20%E4%B8%89%E5%A4%A7%E8%AE%A4%E8%AF%81%E3%80%81%E5%A4%9A%E6%96%B9%E5%BC%8F%E7%99%BB%E5%BD%95/","text":"\u4e09\u5927\u8ba4\u8bc1\u3001\u591a\u65b9\u5f0f\u767b\u5f55 # \u4e09\u5927\u8ba4\u8bc1\u6d41\u7a0b\u56fe # \u8def\u7531\u914d\u7f6e # \u5728\u5e94\u7528\u4e0b\u65b0\u5efa\u6587\u4ef6 router.py # router.py from rest_framework.routers import Route , DynamicRoute , SimpleRouter as DRFSimpleRouter class SimpleRouter ( DRFSimpleRouter ): routes = [ # List route. Route ( url = r '^ {prefix}{trailing_slash} $' , mapping = { 'get' : 'list' , 'post' : 'create' , 'put' : 'multiply_update' , 'patch' : 'multiply_partial_update' , 'delete' : 'multiply_destroy' }, name = ' {basename} -list' , detail = False , initkwargs = { 'suffix' : 'List' } ), # Dynamically generated list routes. Generated using # @action(detail=False) decorator on methods of the viewset. DynamicRoute ( url = r '^ {prefix} / {url_path}{trailing_slash} $' , name = ' {basename} - {url_name} ' , detail = False , initkwargs = {} ), # Detail route. Route ( url = r '^ {prefix} / {lookup}{trailing_slash} $' , mapping = { 'get' : 'retrieve' , 'put' : 'update' , 'patch' : 'partial_update' , 'delete' : 'destroy' }, name = ' {basename} -detail' , detail = True , initkwargs = { 'suffix' : 'Instance' } ), # Dynamically generated detail routes. Generated using # @action(detail=True) decorator on methods of the viewset. DynamicRoute ( url = r '^ {prefix} / {lookup} / {url_path}{trailing_slash} $' , name = ' {basename} - {url_name} ' , detail = True , initkwargs = {} ), ] router = SimpleRouter () urls.py # urls.py from django.conf.urls import url , include from .router import router from . import views router . register ( 'users' , views . UserListAPIViewSet , basename = 'user' ) urlpatterns = [ url ( r '' , include ( router . urls )) ] \u8ba4\u8bc1\u7ec4\u4ef6 # \u914d\u7f6e drf-jwt \u6846\u67b6\u7684\u8ba4\u8bc1\u7c7b \u8ba4\u8bc1\u7ec4\u4ef6\u53ea\u80fd\u51b3\u5b9arequest.user\uff0c\u4e0d\u662f\u65ad\u5b9a\u6743\u9650\u7684\u5730\u65b9\uff0c\u6240\u4ee5\u4e00\u822c\u914d\u7f6e\u5168\u5c40 # settings.py REST_FRAMEWORK = { # \u8ba4\u8bc1\u7ec4\u4ef6 'DEFAULT_AUTHENTICATION_CLASSES' : [ 'rest_framework_jwt.authentication.JSONWebTokenAuthentication' ], } \u65b0\u5efa\u6587\u4ef6 authentications.py \uff0c\u81ea\u5b9a\u4e49\u8ba4\u8bc1 from rest_framework.authentication import BaseAuthentication # \u81ea\u5b9a\u4e49\u8ba4\u8bc1\u7c7b # \u5982\u679c\u4f7f\u7528session\u8ba4\u8bc1\uff0cdrf\u9ed8\u8ba4\u63d0\u4f9b\u4e86SessionAuthentication # \u5982\u679c\u4f7f\u7528drf-jwt\u8ba4\u8bc1\uff0cdrf-jwt\u9ed8\u8ba4\u63d0\u4f9b\u4e86JSONWebTokenAuthentication # \u5982\u679c\u81ea\u5b9a\u4e49\u7b7e\u53d1\u4e0e\u6821\u9a8ctoken\uff0c\u624d\u9700\u8981\u5c06\u6821\u9a8ctoken\u7684\u7b97\u6cd5\u5c01\u88c5\u5230\u81ea\u5b9a\u4e49\u7684\u8ba4\u8bc1\u7c7b from rest_framework_jwt.authentication import JSONWebTokenAuthentication class MyAuthentication ( BaseAuthentication ): def authenticate ( self , request ): pass # 1\u3001\u4ece\u8bf7\u6c42\u5934\u4e2d\u62ff\u5230\u524d\u53f0\u63d0\u4ea4\u7684token\uff08\u4e00\u822c\u4eceHTTP_AUTHORIZATION\u4e2d\u62ff\uff0c\u4e5f\u53ef\u4ee5\u4e0e\u524d\u53f0\u7ea6\u5b9a\uff09 # \u5982\u679c\u8bbe\u7f6e\u4e86\u53cd\u722c # 2\u3001\u6ca1\u6709token\uff0c\u8fd4\u56deNone\uff0c\u4ee3\u8868\u6e38\u5ba2 # 3\u3001\u6709token\uff0c\u8fdb\u5165\u6821\u9a8c \u4e0d\u901a\u8fc7\uff0c\u629b\u5f02\u5e38\uff0c\u4ee3\u8868\u975e\u6cd5\u7528\u6237\uff1b\u901a\u8fc7\uff0c\u8fd4\u56de(user, token)\uff0c\u4ee3\u8868\u5408\u6cd5\u7528\u6237 \u81ea\u5b9a\u4e49\u8ba4\u8bc1\u89c4\u5219\uff1a \u4ece\u8bf7\u6c42\u5934\u4e2d\u62ff\u5230\u524d\u53f0\u63d0\u4ea4\u7684token\uff08\u4e00\u822c\u4eceHTTP_AUTHORIZATION\u4e2d\u62ff\uff0c\u4e5f\u53ef\u4ee5\u4e0e\u524d\u53f0\u7ea6\u5b9a\uff09 \u5982\u679c\u8bbe\u7f6e\u4e86\u53cd\u722c\u7b49\u63aa\u65bd\uff0c\u6821\u9a8c\u4e00\u4e0b\u53cd\u722c\uff08\u5934 token\uff09 \u6ca1\u6709token\uff0c\u8fd4\u56deNone\uff0c\u4ee3\u8868\u6e38\u5ba2 \u6709token\uff0c\u8fdb\u5165\u6821\u9a8c \u4e0d\u901a\u8fc7\uff0c\u629b\u5f02\u5e38\uff0c\u4ee3\u8868\u975e\u6cd5\u7528\u6237 \u901a\u8fc7\uff0c\u8fd4\u56de(user, token)\uff0c\u4ee3\u8868\u5408\u6cd5\u7528\u6237 \u8ba4\u8bc1\u7ec4\u4ef6\u6e90\u7801\u5206\u6790\uff1a \u6743\u9650\u7ec4\u4ef6 # \u6743\u9650\u7c7b\u5c31\u662f\u5b9e\u73b0 BasePermission\u7c7b\uff0c\u91cd\u5199has_permission \u65b9\u6cd5\uff0c\u5982\u679c\u6709\u6743\u9650\u8fd4\u56deTrue\uff0c\u6ca1\u6743\u9650\u8fd4\u56deFalse\u3002 \u5c40\u90e8\u914d\u7f6e\u6743\u9650\uff1a # views.py # \u6743\u9650\u7ec4\u4ef6 permission_classes = [ permissions . MyPermission ] \u81ea\u5b9a\u4e49\u6743\u9650\u7c7b # # permissions.py from rest_framework.permissions import BasePermission class MyPermission ( BasePermission ): def has_permission ( self , request , view ): \"\"\" \u6839\u636e\u9700\u6c42\uff0crequest\u548cview\u7684\u8f85\u52a9\uff0c\u5236\u5b9a\u6743\u9650\u89c4\u5219\u5224\u65ad\u6761\u4ef6 \u5982\u679c\u6761\u4ef6\u901a\u8fc7\uff0c\u8fd4\u56deTrue \u5982\u679c\u6761\u4ef6\u4e0d\u901a\u8fc7\uff0c\u8fd4\u56deFalse \"\"\" pass \u914d\u7f6edrf\u81ea\u5e26\u7684\u6743\u9650\u7c7b # drf\u9ed8\u8ba4\u63d0\u4f9b\u4e86\u4e00\u4e9b\u6743\u9650\u7c7b AllowAny\uff1a\u6e38\u5ba2\u548c\u767b\u5f55\u7528\u6237\u5168\u6743\u9650 IsAuthenticated\uff1a\u53ea\u6709\u767b\u5f55\u7528\u6237\u6709\u5168\u6743\u9650 IsAdminUser\uff1a\u53ea\u6709\u540e\u53f0\u7528\u6237(admin)\u6709\u5168\u6743\u9650 IsAuthenticatedOrReadOnly\uff1a\u6e38\u5ba2\u6709\u8bfb\u6743\u9650\uff0c\u767b\u5f55\u7528\u6237\u6709\u5168\u6743\u9650 \u5982\u679c\u6709\u7279\u6b8a\u9700\u8981\uff0c\u9700\u8981\u81ea\u5b9a\u4e49\u6743\u9650\u7c7b \u5982\uff1a\u53ea\u6709superuser\u6709\u6743\u9650\u3001\u53ea\u6709vip\u7528\u6237\u6709\u6743\u9650\u3001\u53ea\u6709\u67d0ip\u7f51\u6bb5\u7528\u6237\u6709\u6743\u9650\u3001\u53ea\u6709\u67d0\u4e2a\u89c6\u56fe\u53ca\u5176\u5b50\u7c7b\u6709\u6743\u9650 # views.py from rest_framework.viewsets import GenericViewSet from rest_framework import mixins from .response import APIResponse from rest_framework.permissions import IsAuthenticated class UserListAPIViewSet ( mixins . ListModelMixin , GenericViewSet ): permission_classes = [ IsAuthenticated ] pass drf-jwt \u7b7e\u53d1token\u6e90\u7801\u5206\u6790 # \"\"\" drf-jwt \u7b7e\u53d1token 1\u3001username\u3001password \u901a\u8fc7auth\u7ec4\u4ef6\u7684authenticate\u65b9\u6cd5\u5f97\u5230user\u5bf9\u8c61 2\u3001user\u5bf9\u8c61\u3001\u901a\u8fc7drf-jwt\u6846\u67b6\u7684jwt_payload_handler\u51fd\u6570\u5305\u88c5 payload\u8f7d\u8377 3\u3001payload\u8f7d\u8377 \u901a\u8fc7drf-jwt\u6846\u67b6\u7684jwt_encode_handler\u51fd\u6570\u7b7e\u53d1 token\u5b57\u7b26\u4e32 \u6ce8\uff1a\u53ef\u4ee5\u501f\u52a9jwt_payload_handler\u548cjwt_encode_handler \u4e24\u4e2a\u51fd\u6570\u5b8c\u6210\u81ea\u5b9a\u4e49token\u7684\u7b7e\u53d1 \"\"\" \u591a\u65b9\u5f0f\u767b\u5f55 \u7b7e\u53d1token # token\u53ea\u80fd \u7531\u5728\u767b\u5f55\u63a5\u53e3 \u7b7e\u53d1 \u767b\u5f55\u63a5\u53e3\u4e5f\u662fAPIView\u7684\u5b50\u7c7b\uff0c\u4f7f\u7528\u4e00\u5b9a\u4f1a\u8fdb\u884c \u8ba4\u8bc1\u3001\u6743\u9650\u3001\u7ec4\u4ef6\u7684\u6821\u9a8c \u7ed3\u8bba\uff1a\u4e0d\u7ba1\u7cfb\u7edf\u9ed8\u8ba4\u3001\u6216\u662f\u5168\u5c40settings\u914d\u7f6e\u7684\u662f\u4f55 \u8ba4\u8bc1\u4e0e\u6743\u9650\u7ec4\u4ef6\uff0c\u767b\u5f55\u63a5\u53e3\u4e0d\u7528\u53c2\u4e0e\u4efb\u4f55\u8ba4\u8bc1\u4e0e\u6743\u9650\u7684\u6821\u9a8c\u3002\u6240\u4ee5\uff0c\u767b\u5f55\u63a5\u53e3\u4e00\u5b9a\u8981\u8fdb\u884c \u8ba4\u8bc1\u4e0e\u6743\u9650\u7684\u5c40\u90e8\u7981\u7528 \u3002 from rest_framework.views import APIView class LoginAPIView ( APIView ): authentication_classes = [] permission_classes = [] def post ( self , request , * args , ** kwargs ): serializers = serializer . LoginModelSerializer ( data = request . data ) serializers . is_valid ( raise_exception = True ) # \u5185\u90e8\u5728\u5168\u5c40\u94a9\u5b50\u4e2d\u5b8c\u6210token\u7684\u7b7e\u53d1 return APIResponse ( results = { 'username' : '' , 'token' : '' }) \u8fd9\u6837\u4f1a\u6709\u4e2a\u95ee\u9898\uff1apost\u65b9\u6cd5\u9ed8\u8ba4\u8d70\u7684\u662f\u6570\u636e\u5e93\u7684\u589e\u65b9\u6cd5 \u9ed8\u8ba4\u7684\u6821\u9a8c\u89c4\u5219\u91cc\u9762\u662f\u8d70\u7684\u6570\u636e\u5e93\uff0c\u6211\u4eec\u53ef\u4ee5\u81ea\u5b9a\u4e49\u5b57\u6bb5 # \u5e8f\u5217\u5316\u7c7b serializer.py from rest_framework_jwt.serializers import jwt_payload_handler , jwt_encode_handler import re class LoginModelSerializer ( serializers . ModelSerializer ): username = serializers . CharField ( min_length = 3 , max_length = 16 ) password = serializers . CharField ( min_length = 3 , max_length = 16 ) class Meta : model = models . User fields = [ 'username' , 'password' ] # \u7528\u5168\u5c40\u94a9\u5b50\uff0c\u5b8c\u6210token\u7684\u7b7e\u53d1 def validate ( self , attrs ): # 1\u3001\u901a\u8fc7username\u3001password\u5b8c\u6210\u591a\u65b9\u5f0f\u767b\u5f55\u6821\u9a8c\uff0c\u5f97\u5230user\u5bf9\u8c61 user = self . _validate_user ( attrs ) # 2\u3001user\u5bf9\u8c61\u5305\u88c5\u6015payload\u8f7d\u8377 payload = jwt_payload_handler ( user ) # 3\u3001payload\u8f7d\u8377\u7b7e\u53d1token token = jwt_encode_handler ( payload ) # 4\u3001\u5c06user\u4e0etoken\u5b58\u50a8\u5230serializer\u5bf9\u8c61\u4e2d\uff0c\u65b9\u4fbf\u5728\u89c6\u56fe\u7c7b\u4e2d\u4f7f\u7528 self . content = { 'user' : user , 'token' : token } return attrs def _validate_user ( self , attrs ): username = attrs . get ( 'username' ) password = attrs . get ( 'password' ) if re . match ( r '.*@.*' , username ): # \u90ae\u7bb1 user = models . User . objects . filter ( email = username ) . first () elif re . match ( r '^1[1-9][0-9] {9} $' , username ): # \u7535\u8bdd user = models . User . objects . filter ( mobile = username ) . first () else : # \u7528\u6237\u540d user = models . User . objects . filter ( username = username ) . first () if not user or not user . check_password ( password ): raise serializers . ValidationError ({ 'message' : '\u7528\u6237\u4fe1\u606f\u5f02\u5e38' }) return user # views.py from rest_framework.views import APIView class LoginAPIView ( APIView ): authentication_classes = [] permission_classes = [] def post ( self , request , * args , ** kwargs ): serializers = serializer . LoginModelSerializer ( data = request . data ) serializers . is_valid ( raise_exception = True ) # \u5185\u90e8\u5728\u5168\u5c40\u94a9\u5b50\u4e2d\u5b8c\u6210token\u7684\u7b7e\u53d1 print ( serializers . content ) return APIResponse ( results = { 'username' : serializers . content . get ( 'user' ) . username , 'token' : serializers . content . get ( 'token' ) }) \u603b\u7ed3\uff1a\u8ba4\u8bc1\u4e0e\u6743\u9650\u7ed1\u5b9a\u4f7f\u7528 \u6bcf\u4e00\u4e2a\u89c6\u56fe\u7c7b\u90fd\u8981\u8fdb\u884c\u8ba4\u8bc1\uff0c\u4e14\u8ba4\u8bc1\u89c4\u5219\u4e00\u81f4\uff0c\u591a\u4f59\u5168\u5c40\u914d\u7f6e\u8ba4\u8bc1\u5373\u53ef \u6bcf\u4e00\u4e2a\u89c6\u56fe\u7c7b\u90fd\u8981\u8fdb\u884c\u6743\u9650\u6821\u9a8c\uff0c\u9ed8\u8ba4\u914d\u7f6e\u7684\u662f \u4e0d\u9650\u5236(AllowAny)\uff0c\u4f46\u5b9e\u9645\u5f00\u53d1\u4e2d\uff0c\u89c6\u56fe\u7c7b\u7684\u8bbf\u95ee\u6743\u9650\u4e0d\u5b8c\u5168\u76f8\u540c\uff0c\u6240\u4ee5\u8981\u5728\u5177\u4f53\u7684\u89c6\u56fe\u7c7b\uff0c\u914d\u7f6e\u5177\u4f53\u7684\u6743\u9650\u89c4\u5219 \u81ea\u5b9a\u4e49\u7b7e\u53d1token - \u591a\u65b9\u5f0f\u767b\u5f55 \u5c06\u8bf7\u6c42\u6570\u636e\u4ea4\u7ed9\u5e8f\u5217\u5316\u7c7b\uff0c\u6267\u884c\u5e8f\u5217\u5316\u6821\u9a8c \u5728\u5e8f\u5217\u5316\u5168\u5c40\u6821\u9a8c\u94a9\u5b50\u4e2d\uff0c\u5b8c\u6210user\u7684\u8ba4\u8bc1\u4e0etoken\u7684\u7b7e\u53d1\uff0c\u4fdd\u5b58\u5728\u5e8f\u5217\u5316\u5bf9\u8c61\u7684content\u4e2d \u5728\u89c6\u56fe\u7c7b\u4e2d\u4ece\u5e8f\u5217\u5316\u5bf9\u8c61\u7684content\u4e2d\u62ffuser\u4e0etoken\u76f8\u5173\u4fe1\u606f\u8fd4\u56de \u6ce8\uff1a\u591a\u65b9\u5f0f\u767b\u5f55\u4f53\u73b0\u5728 \u8bf7\u6c42\u7684\u8d26\u53f7\u7c7b\u578b\u53ef\u80fd\u662f\u7528\u6237\u540d\u3001\u90ae\u7bb1\u6216\u624b\u673a\u7b49\uff0c\u91c7\u7528\u4e0d\u540c\u5b57\u6bb5\u6821\u9a8c\u6570\u636e\u5e93\u5373\u53ef VIP\u7528\u6237\u8ba4\u8bc1\u6743\u9650\u4f8b\u5b50 # # views.py from rest_framework.viewsets import ViewSet class UserViewSet ( ViewSet ): # \u6743\u9650\uff1a\u53ea\u8981VIP\u7528\u6237\u53ef\u4ee5\u67e5\u770b \u4e2a\u4eba\u8be6\u7ec6\u4fe1\u606f permission_classes = [ permissions . VIPUserPermission ] def retrieve ( self , request , * args , ** kwargs ): return APIResponse ( results = { 'username' : request . user . username , 'email' : request . user . username , 'mobile' : request . user . username , 'data_joined' : request . user . date_joined , }) # permission.py from rest_framework.permissions import BasePermission # VIP\u7528\u6237\u6743\u9650 class VIPUserPermission ( BasePermission ): def has_permission ( self , request , view ): for group in request . user . groups . all (): if group . name . lower () == 'vip' : return True return False \u9891\u7387\u7ec4\u4ef6 # # views.py class UserListAPIViewSet ( mixins . ListModelMixin , GenericViewSet ): from rest_framework.throttling import AnonRateThrottle , UserRateThrottle # \u9891\u7387\u7ec4\u4ef6 # throttle_classes = [AnonRateThrottle] throttle_classes = [ UserRateThrottle ] queryset = models . User . objects . filter ( is_active = True ) . all () serializer_class = serializer . UserModelSerializer def update ( self , request , * args , ** kwargs ): return APIResponse () def multiply_update ( self , request , * args , ** kwargs ): return APIResponse ( msg = '\u7fa4\u6539' ) \u5728settings.py\u914d\u7f6e\u6587\u4ef6\u4e2d\u914d\u7f6e REST_FRAMEWORK = { # \u9891\u7387\u7ec4\u4ef6\uff0c\u9891\u7387\u7c7b\u4e00\u822c\u505a\u5c40\u90e8\u914d\u7f6e\uff0c\u4f46\u662f\u9891\u7387\u8c03\u8282\u5728settings\u4e2d\u914d\u7f6e 'DEFAULT_THROTTLE_RATES' : { 'user' : '5/min' , # \u767b\u5f55\u7528\u6237\u9650\u5236 'anon' : '3/min' , # \u533f\u540d\u7528\u6237\u9650\u5236 }, } \u81ea\u5b9a\u4e49\u9891\u7387\u7c7b # \u81ea\u5b9a\u4e49\u9891\u7387\u7c7b\uff1a drf\u9ed8\u8ba4\u63d0\u4f9b\u4e86\u4e00\u4e9b\u9891\u7387\u7c7b AnonRateThrottle\uff1a\u53ea\u5bf9\u6e38\u5ba2\u8fdb\u884c\u9891\u7387\u9650\u5236 UserRateThrottle\uff1a\u5bf9\u6240\u6709\u7528\u6237\u8fdb\u884c\u9891\u7387\u9650\u5236 \u5982\u679c\u7531\u7279\u6b8a\u9700\u8981\uff0c\u9700\u8981\u81ea\u5b9a\u4e49\u9891\u7387\u7c7b \u5982\uff1a\u5bf9ip\u8fdb\u884c\u9650\u6b21\u3001\u5bf9\u7535\u8bdd\u8fdb\u884c\u9650\u6b21\u3001\u5bf9\u89c6\u56fe\u67d0\u4e9b\u4fe1\u606f\u8fdb\u884c\u9650\u6b21 \u65b9\u6cd5\u6b65\u9aa4\uff1a \u8bbe\u7f6escope\u5b57\u7b26\u4e32\u7c7b\u5c5e\u6027\uff0c\u540c\u65f6\u5728settings\u4e2d\u8fdb\u884cdrf\u914d\u7f6eDEFAULT THROTTLE RATES \u91cd\u5199get catch key\u65b9\u6cd5 \u8fd4\u56de\u4e0e\u9650\u5236\u6761\u4ef6\u6709\u5173\u7684\u5b57\u7b26\u4e32\uff0c\u8868\u793a\u9650\u5236 \u8fd4\u56deNone\uff0c\u8868\u793a\u4e0d\u9650\u5236 # throttles.py from rest_framework.throttling import SimpleRateThrottle class MobileReateThrottle ( SimpleRateThrottle ): scope = 'mobile' def get_cache_key ( self , request , view ): if not request . user . is_authenticated or not request . user . mobile : return None # \u533f\u540d\u7528\u6237 \u6ca1\u6709\u7535\u8bdd\u53f7\u7684\u7528\u6237\u90fd\u4e0d\u9650\u5236 return self . cache_format % { 'scope' : self . scope , 'ident' : request . user . mobile }","title":"08 \u4e09\u5927\u8ba4\u8bc1\u3001\u591a\u65b9\u5f0f\u767b\u5f55"},{"location":"django%20rest%20framework/08%20%E4%B8%89%E5%A4%A7%E8%AE%A4%E8%AF%81%E3%80%81%E5%A4%9A%E6%96%B9%E5%BC%8F%E7%99%BB%E5%BD%95/#_1","text":"","title":"\u4e09\u5927\u8ba4\u8bc1\u3001\u591a\u65b9\u5f0f\u767b\u5f55"},{"location":"django%20rest%20framework/08%20%E4%B8%89%E5%A4%A7%E8%AE%A4%E8%AF%81%E3%80%81%E5%A4%9A%E6%96%B9%E5%BC%8F%E7%99%BB%E5%BD%95/#_2","text":"","title":"\u4e09\u5927\u8ba4\u8bc1\u6d41\u7a0b\u56fe"},{"location":"django%20rest%20framework/08%20%E4%B8%89%E5%A4%A7%E8%AE%A4%E8%AF%81%E3%80%81%E5%A4%9A%E6%96%B9%E5%BC%8F%E7%99%BB%E5%BD%95/#_3","text":"\u5728\u5e94\u7528\u4e0b\u65b0\u5efa\u6587\u4ef6 router.py # router.py from rest_framework.routers import Route , DynamicRoute , SimpleRouter as DRFSimpleRouter class SimpleRouter ( DRFSimpleRouter ): routes = [ # List route. Route ( url = r '^ {prefix}{trailing_slash} $' , mapping = { 'get' : 'list' , 'post' : 'create' , 'put' : 'multiply_update' , 'patch' : 'multiply_partial_update' , 'delete' : 'multiply_destroy' }, name = ' {basename} -list' , detail = False , initkwargs = { 'suffix' : 'List' } ), # Dynamically generated list routes. Generated using # @action(detail=False) decorator on methods of the viewset. DynamicRoute ( url = r '^ {prefix} / {url_path}{trailing_slash} $' , name = ' {basename} - {url_name} ' , detail = False , initkwargs = {} ), # Detail route. Route ( url = r '^ {prefix} / {lookup}{trailing_slash} $' , mapping = { 'get' : 'retrieve' , 'put' : 'update' , 'patch' : 'partial_update' , 'delete' : 'destroy' }, name = ' {basename} -detail' , detail = True , initkwargs = { 'suffix' : 'Instance' } ), # Dynamically generated detail routes. Generated using # @action(detail=True) decorator on methods of the viewset. DynamicRoute ( url = r '^ {prefix} / {lookup} / {url_path}{trailing_slash} $' , name = ' {basename} - {url_name} ' , detail = True , initkwargs = {} ), ] router = SimpleRouter () urls.py # urls.py from django.conf.urls import url , include from .router import router from . import views router . register ( 'users' , views . UserListAPIViewSet , basename = 'user' ) urlpatterns = [ url ( r '' , include ( router . urls )) ]","title":"\u8def\u7531\u914d\u7f6e"},{"location":"django%20rest%20framework/08%20%E4%B8%89%E5%A4%A7%E8%AE%A4%E8%AF%81%E3%80%81%E5%A4%9A%E6%96%B9%E5%BC%8F%E7%99%BB%E5%BD%95/#_4","text":"\u914d\u7f6e drf-jwt \u6846\u67b6\u7684\u8ba4\u8bc1\u7c7b \u8ba4\u8bc1\u7ec4\u4ef6\u53ea\u80fd\u51b3\u5b9arequest.user\uff0c\u4e0d\u662f\u65ad\u5b9a\u6743\u9650\u7684\u5730\u65b9\uff0c\u6240\u4ee5\u4e00\u822c\u914d\u7f6e\u5168\u5c40 # settings.py REST_FRAMEWORK = { # \u8ba4\u8bc1\u7ec4\u4ef6 'DEFAULT_AUTHENTICATION_CLASSES' : [ 'rest_framework_jwt.authentication.JSONWebTokenAuthentication' ], } \u65b0\u5efa\u6587\u4ef6 authentications.py \uff0c\u81ea\u5b9a\u4e49\u8ba4\u8bc1 from rest_framework.authentication import BaseAuthentication # \u81ea\u5b9a\u4e49\u8ba4\u8bc1\u7c7b # \u5982\u679c\u4f7f\u7528session\u8ba4\u8bc1\uff0cdrf\u9ed8\u8ba4\u63d0\u4f9b\u4e86SessionAuthentication # \u5982\u679c\u4f7f\u7528drf-jwt\u8ba4\u8bc1\uff0cdrf-jwt\u9ed8\u8ba4\u63d0\u4f9b\u4e86JSONWebTokenAuthentication # \u5982\u679c\u81ea\u5b9a\u4e49\u7b7e\u53d1\u4e0e\u6821\u9a8ctoken\uff0c\u624d\u9700\u8981\u5c06\u6821\u9a8ctoken\u7684\u7b97\u6cd5\u5c01\u88c5\u5230\u81ea\u5b9a\u4e49\u7684\u8ba4\u8bc1\u7c7b from rest_framework_jwt.authentication import JSONWebTokenAuthentication class MyAuthentication ( BaseAuthentication ): def authenticate ( self , request ): pass # 1\u3001\u4ece\u8bf7\u6c42\u5934\u4e2d\u62ff\u5230\u524d\u53f0\u63d0\u4ea4\u7684token\uff08\u4e00\u822c\u4eceHTTP_AUTHORIZATION\u4e2d\u62ff\uff0c\u4e5f\u53ef\u4ee5\u4e0e\u524d\u53f0\u7ea6\u5b9a\uff09 # \u5982\u679c\u8bbe\u7f6e\u4e86\u53cd\u722c # 2\u3001\u6ca1\u6709token\uff0c\u8fd4\u56deNone\uff0c\u4ee3\u8868\u6e38\u5ba2 # 3\u3001\u6709token\uff0c\u8fdb\u5165\u6821\u9a8c \u4e0d\u901a\u8fc7\uff0c\u629b\u5f02\u5e38\uff0c\u4ee3\u8868\u975e\u6cd5\u7528\u6237\uff1b\u901a\u8fc7\uff0c\u8fd4\u56de(user, token)\uff0c\u4ee3\u8868\u5408\u6cd5\u7528\u6237 \u81ea\u5b9a\u4e49\u8ba4\u8bc1\u89c4\u5219\uff1a \u4ece\u8bf7\u6c42\u5934\u4e2d\u62ff\u5230\u524d\u53f0\u63d0\u4ea4\u7684token\uff08\u4e00\u822c\u4eceHTTP_AUTHORIZATION\u4e2d\u62ff\uff0c\u4e5f\u53ef\u4ee5\u4e0e\u524d\u53f0\u7ea6\u5b9a\uff09 \u5982\u679c\u8bbe\u7f6e\u4e86\u53cd\u722c\u7b49\u63aa\u65bd\uff0c\u6821\u9a8c\u4e00\u4e0b\u53cd\u722c\uff08\u5934 token\uff09 \u6ca1\u6709token\uff0c\u8fd4\u56deNone\uff0c\u4ee3\u8868\u6e38\u5ba2 \u6709token\uff0c\u8fdb\u5165\u6821\u9a8c \u4e0d\u901a\u8fc7\uff0c\u629b\u5f02\u5e38\uff0c\u4ee3\u8868\u975e\u6cd5\u7528\u6237 \u901a\u8fc7\uff0c\u8fd4\u56de(user, token)\uff0c\u4ee3\u8868\u5408\u6cd5\u7528\u6237 \u8ba4\u8bc1\u7ec4\u4ef6\u6e90\u7801\u5206\u6790\uff1a","title":"\u8ba4\u8bc1\u7ec4\u4ef6"},{"location":"django%20rest%20framework/08%20%E4%B8%89%E5%A4%A7%E8%AE%A4%E8%AF%81%E3%80%81%E5%A4%9A%E6%96%B9%E5%BC%8F%E7%99%BB%E5%BD%95/#_5","text":"\u6743\u9650\u7c7b\u5c31\u662f\u5b9e\u73b0 BasePermission\u7c7b\uff0c\u91cd\u5199has_permission \u65b9\u6cd5\uff0c\u5982\u679c\u6709\u6743\u9650\u8fd4\u56deTrue\uff0c\u6ca1\u6743\u9650\u8fd4\u56deFalse\u3002 \u5c40\u90e8\u914d\u7f6e\u6743\u9650\uff1a # views.py # \u6743\u9650\u7ec4\u4ef6 permission_classes = [ permissions . MyPermission ]","title":"\u6743\u9650\u7ec4\u4ef6"},{"location":"django%20rest%20framework/08%20%E4%B8%89%E5%A4%A7%E8%AE%A4%E8%AF%81%E3%80%81%E5%A4%9A%E6%96%B9%E5%BC%8F%E7%99%BB%E5%BD%95/#_6","text":"# permissions.py from rest_framework.permissions import BasePermission class MyPermission ( BasePermission ): def has_permission ( self , request , view ): \"\"\" \u6839\u636e\u9700\u6c42\uff0crequest\u548cview\u7684\u8f85\u52a9\uff0c\u5236\u5b9a\u6743\u9650\u89c4\u5219\u5224\u65ad\u6761\u4ef6 \u5982\u679c\u6761\u4ef6\u901a\u8fc7\uff0c\u8fd4\u56deTrue \u5982\u679c\u6761\u4ef6\u4e0d\u901a\u8fc7\uff0c\u8fd4\u56deFalse \"\"\" pass","title":"\u81ea\u5b9a\u4e49\u6743\u9650\u7c7b"},{"location":"django%20rest%20framework/08%20%E4%B8%89%E5%A4%A7%E8%AE%A4%E8%AF%81%E3%80%81%E5%A4%9A%E6%96%B9%E5%BC%8F%E7%99%BB%E5%BD%95/#drf","text":"drf\u9ed8\u8ba4\u63d0\u4f9b\u4e86\u4e00\u4e9b\u6743\u9650\u7c7b AllowAny\uff1a\u6e38\u5ba2\u548c\u767b\u5f55\u7528\u6237\u5168\u6743\u9650 IsAuthenticated\uff1a\u53ea\u6709\u767b\u5f55\u7528\u6237\u6709\u5168\u6743\u9650 IsAdminUser\uff1a\u53ea\u6709\u540e\u53f0\u7528\u6237(admin)\u6709\u5168\u6743\u9650 IsAuthenticatedOrReadOnly\uff1a\u6e38\u5ba2\u6709\u8bfb\u6743\u9650\uff0c\u767b\u5f55\u7528\u6237\u6709\u5168\u6743\u9650 \u5982\u679c\u6709\u7279\u6b8a\u9700\u8981\uff0c\u9700\u8981\u81ea\u5b9a\u4e49\u6743\u9650\u7c7b \u5982\uff1a\u53ea\u6709superuser\u6709\u6743\u9650\u3001\u53ea\u6709vip\u7528\u6237\u6709\u6743\u9650\u3001\u53ea\u6709\u67d0ip\u7f51\u6bb5\u7528\u6237\u6709\u6743\u9650\u3001\u53ea\u6709\u67d0\u4e2a\u89c6\u56fe\u53ca\u5176\u5b50\u7c7b\u6709\u6743\u9650 # views.py from rest_framework.viewsets import GenericViewSet from rest_framework import mixins from .response import APIResponse from rest_framework.permissions import IsAuthenticated class UserListAPIViewSet ( mixins . ListModelMixin , GenericViewSet ): permission_classes = [ IsAuthenticated ] pass","title":"\u914d\u7f6edrf\u81ea\u5e26\u7684\u6743\u9650\u7c7b"},{"location":"django%20rest%20framework/08%20%E4%B8%89%E5%A4%A7%E8%AE%A4%E8%AF%81%E3%80%81%E5%A4%9A%E6%96%B9%E5%BC%8F%E7%99%BB%E5%BD%95/#drf-jwt-token","text":"\"\"\" drf-jwt \u7b7e\u53d1token 1\u3001username\u3001password \u901a\u8fc7auth\u7ec4\u4ef6\u7684authenticate\u65b9\u6cd5\u5f97\u5230user\u5bf9\u8c61 2\u3001user\u5bf9\u8c61\u3001\u901a\u8fc7drf-jwt\u6846\u67b6\u7684jwt_payload_handler\u51fd\u6570\u5305\u88c5 payload\u8f7d\u8377 3\u3001payload\u8f7d\u8377 \u901a\u8fc7drf-jwt\u6846\u67b6\u7684jwt_encode_handler\u51fd\u6570\u7b7e\u53d1 token\u5b57\u7b26\u4e32 \u6ce8\uff1a\u53ef\u4ee5\u501f\u52a9jwt_payload_handler\u548cjwt_encode_handler \u4e24\u4e2a\u51fd\u6570\u5b8c\u6210\u81ea\u5b9a\u4e49token\u7684\u7b7e\u53d1 \"\"\"","title":"drf-jwt \u7b7e\u53d1token\u6e90\u7801\u5206\u6790"},{"location":"django%20rest%20framework/08%20%E4%B8%89%E5%A4%A7%E8%AE%A4%E8%AF%81%E3%80%81%E5%A4%9A%E6%96%B9%E5%BC%8F%E7%99%BB%E5%BD%95/#token","text":"token\u53ea\u80fd \u7531\u5728\u767b\u5f55\u63a5\u53e3 \u7b7e\u53d1 \u767b\u5f55\u63a5\u53e3\u4e5f\u662fAPIView\u7684\u5b50\u7c7b\uff0c\u4f7f\u7528\u4e00\u5b9a\u4f1a\u8fdb\u884c \u8ba4\u8bc1\u3001\u6743\u9650\u3001\u7ec4\u4ef6\u7684\u6821\u9a8c \u7ed3\u8bba\uff1a\u4e0d\u7ba1\u7cfb\u7edf\u9ed8\u8ba4\u3001\u6216\u662f\u5168\u5c40settings\u914d\u7f6e\u7684\u662f\u4f55 \u8ba4\u8bc1\u4e0e\u6743\u9650\u7ec4\u4ef6\uff0c\u767b\u5f55\u63a5\u53e3\u4e0d\u7528\u53c2\u4e0e\u4efb\u4f55\u8ba4\u8bc1\u4e0e\u6743\u9650\u7684\u6821\u9a8c\u3002\u6240\u4ee5\uff0c\u767b\u5f55\u63a5\u53e3\u4e00\u5b9a\u8981\u8fdb\u884c \u8ba4\u8bc1\u4e0e\u6743\u9650\u7684\u5c40\u90e8\u7981\u7528 \u3002 from rest_framework.views import APIView class LoginAPIView ( APIView ): authentication_classes = [] permission_classes = [] def post ( self , request , * args , ** kwargs ): serializers = serializer . LoginModelSerializer ( data = request . data ) serializers . is_valid ( raise_exception = True ) # \u5185\u90e8\u5728\u5168\u5c40\u94a9\u5b50\u4e2d\u5b8c\u6210token\u7684\u7b7e\u53d1 return APIResponse ( results = { 'username' : '' , 'token' : '' }) \u8fd9\u6837\u4f1a\u6709\u4e2a\u95ee\u9898\uff1apost\u65b9\u6cd5\u9ed8\u8ba4\u8d70\u7684\u662f\u6570\u636e\u5e93\u7684\u589e\u65b9\u6cd5 \u9ed8\u8ba4\u7684\u6821\u9a8c\u89c4\u5219\u91cc\u9762\u662f\u8d70\u7684\u6570\u636e\u5e93\uff0c\u6211\u4eec\u53ef\u4ee5\u81ea\u5b9a\u4e49\u5b57\u6bb5 # \u5e8f\u5217\u5316\u7c7b serializer.py from rest_framework_jwt.serializers import jwt_payload_handler , jwt_encode_handler import re class LoginModelSerializer ( serializers . ModelSerializer ): username = serializers . CharField ( min_length = 3 , max_length = 16 ) password = serializers . CharField ( min_length = 3 , max_length = 16 ) class Meta : model = models . User fields = [ 'username' , 'password' ] # \u7528\u5168\u5c40\u94a9\u5b50\uff0c\u5b8c\u6210token\u7684\u7b7e\u53d1 def validate ( self , attrs ): # 1\u3001\u901a\u8fc7username\u3001password\u5b8c\u6210\u591a\u65b9\u5f0f\u767b\u5f55\u6821\u9a8c\uff0c\u5f97\u5230user\u5bf9\u8c61 user = self . _validate_user ( attrs ) # 2\u3001user\u5bf9\u8c61\u5305\u88c5\u6015payload\u8f7d\u8377 payload = jwt_payload_handler ( user ) # 3\u3001payload\u8f7d\u8377\u7b7e\u53d1token token = jwt_encode_handler ( payload ) # 4\u3001\u5c06user\u4e0etoken\u5b58\u50a8\u5230serializer\u5bf9\u8c61\u4e2d\uff0c\u65b9\u4fbf\u5728\u89c6\u56fe\u7c7b\u4e2d\u4f7f\u7528 self . content = { 'user' : user , 'token' : token } return attrs def _validate_user ( self , attrs ): username = attrs . get ( 'username' ) password = attrs . get ( 'password' ) if re . match ( r '.*@.*' , username ): # \u90ae\u7bb1 user = models . User . objects . filter ( email = username ) . first () elif re . match ( r '^1[1-9][0-9] {9} $' , username ): # \u7535\u8bdd user = models . User . objects . filter ( mobile = username ) . first () else : # \u7528\u6237\u540d user = models . User . objects . filter ( username = username ) . first () if not user or not user . check_password ( password ): raise serializers . ValidationError ({ 'message' : '\u7528\u6237\u4fe1\u606f\u5f02\u5e38' }) return user # views.py from rest_framework.views import APIView class LoginAPIView ( APIView ): authentication_classes = [] permission_classes = [] def post ( self , request , * args , ** kwargs ): serializers = serializer . LoginModelSerializer ( data = request . data ) serializers . is_valid ( raise_exception = True ) # \u5185\u90e8\u5728\u5168\u5c40\u94a9\u5b50\u4e2d\u5b8c\u6210token\u7684\u7b7e\u53d1 print ( serializers . content ) return APIResponse ( results = { 'username' : serializers . content . get ( 'user' ) . username , 'token' : serializers . content . get ( 'token' ) }) \u603b\u7ed3\uff1a\u8ba4\u8bc1\u4e0e\u6743\u9650\u7ed1\u5b9a\u4f7f\u7528 \u6bcf\u4e00\u4e2a\u89c6\u56fe\u7c7b\u90fd\u8981\u8fdb\u884c\u8ba4\u8bc1\uff0c\u4e14\u8ba4\u8bc1\u89c4\u5219\u4e00\u81f4\uff0c\u591a\u4f59\u5168\u5c40\u914d\u7f6e\u8ba4\u8bc1\u5373\u53ef \u6bcf\u4e00\u4e2a\u89c6\u56fe\u7c7b\u90fd\u8981\u8fdb\u884c\u6743\u9650\u6821\u9a8c\uff0c\u9ed8\u8ba4\u914d\u7f6e\u7684\u662f \u4e0d\u9650\u5236(AllowAny)\uff0c\u4f46\u5b9e\u9645\u5f00\u53d1\u4e2d\uff0c\u89c6\u56fe\u7c7b\u7684\u8bbf\u95ee\u6743\u9650\u4e0d\u5b8c\u5168\u76f8\u540c\uff0c\u6240\u4ee5\u8981\u5728\u5177\u4f53\u7684\u89c6\u56fe\u7c7b\uff0c\u914d\u7f6e\u5177\u4f53\u7684\u6743\u9650\u89c4\u5219 \u81ea\u5b9a\u4e49\u7b7e\u53d1token - \u591a\u65b9\u5f0f\u767b\u5f55 \u5c06\u8bf7\u6c42\u6570\u636e\u4ea4\u7ed9\u5e8f\u5217\u5316\u7c7b\uff0c\u6267\u884c\u5e8f\u5217\u5316\u6821\u9a8c \u5728\u5e8f\u5217\u5316\u5168\u5c40\u6821\u9a8c\u94a9\u5b50\u4e2d\uff0c\u5b8c\u6210user\u7684\u8ba4\u8bc1\u4e0etoken\u7684\u7b7e\u53d1\uff0c\u4fdd\u5b58\u5728\u5e8f\u5217\u5316\u5bf9\u8c61\u7684content\u4e2d \u5728\u89c6\u56fe\u7c7b\u4e2d\u4ece\u5e8f\u5217\u5316\u5bf9\u8c61\u7684content\u4e2d\u62ffuser\u4e0etoken\u76f8\u5173\u4fe1\u606f\u8fd4\u56de \u6ce8\uff1a\u591a\u65b9\u5f0f\u767b\u5f55\u4f53\u73b0\u5728 \u8bf7\u6c42\u7684\u8d26\u53f7\u7c7b\u578b\u53ef\u80fd\u662f\u7528\u6237\u540d\u3001\u90ae\u7bb1\u6216\u624b\u673a\u7b49\uff0c\u91c7\u7528\u4e0d\u540c\u5b57\u6bb5\u6821\u9a8c\u6570\u636e\u5e93\u5373\u53ef","title":"\u591a\u65b9\u5f0f\u767b\u5f55 \u7b7e\u53d1token"},{"location":"django%20rest%20framework/08%20%E4%B8%89%E5%A4%A7%E8%AE%A4%E8%AF%81%E3%80%81%E5%A4%9A%E6%96%B9%E5%BC%8F%E7%99%BB%E5%BD%95/#vip","text":"# views.py from rest_framework.viewsets import ViewSet class UserViewSet ( ViewSet ): # \u6743\u9650\uff1a\u53ea\u8981VIP\u7528\u6237\u53ef\u4ee5\u67e5\u770b \u4e2a\u4eba\u8be6\u7ec6\u4fe1\u606f permission_classes = [ permissions . VIPUserPermission ] def retrieve ( self , request , * args , ** kwargs ): return APIResponse ( results = { 'username' : request . user . username , 'email' : request . user . username , 'mobile' : request . user . username , 'data_joined' : request . user . date_joined , }) # permission.py from rest_framework.permissions import BasePermission # VIP\u7528\u6237\u6743\u9650 class VIPUserPermission ( BasePermission ): def has_permission ( self , request , view ): for group in request . user . groups . all (): if group . name . lower () == 'vip' : return True return False","title":"VIP\u7528\u6237\u8ba4\u8bc1\u6743\u9650\u4f8b\u5b50"},{"location":"django%20rest%20framework/08%20%E4%B8%89%E5%A4%A7%E8%AE%A4%E8%AF%81%E3%80%81%E5%A4%9A%E6%96%B9%E5%BC%8F%E7%99%BB%E5%BD%95/#_7","text":"# views.py class UserListAPIViewSet ( mixins . ListModelMixin , GenericViewSet ): from rest_framework.throttling import AnonRateThrottle , UserRateThrottle # \u9891\u7387\u7ec4\u4ef6 # throttle_classes = [AnonRateThrottle] throttle_classes = [ UserRateThrottle ] queryset = models . User . objects . filter ( is_active = True ) . all () serializer_class = serializer . UserModelSerializer def update ( self , request , * args , ** kwargs ): return APIResponse () def multiply_update ( self , request , * args , ** kwargs ): return APIResponse ( msg = '\u7fa4\u6539' ) \u5728settings.py\u914d\u7f6e\u6587\u4ef6\u4e2d\u914d\u7f6e REST_FRAMEWORK = { # \u9891\u7387\u7ec4\u4ef6\uff0c\u9891\u7387\u7c7b\u4e00\u822c\u505a\u5c40\u90e8\u914d\u7f6e\uff0c\u4f46\u662f\u9891\u7387\u8c03\u8282\u5728settings\u4e2d\u914d\u7f6e 'DEFAULT_THROTTLE_RATES' : { 'user' : '5/min' , # \u767b\u5f55\u7528\u6237\u9650\u5236 'anon' : '3/min' , # \u533f\u540d\u7528\u6237\u9650\u5236 }, }","title":"\u9891\u7387\u7ec4\u4ef6"},{"location":"django%20rest%20framework/08%20%E4%B8%89%E5%A4%A7%E8%AE%A4%E8%AF%81%E3%80%81%E5%A4%9A%E6%96%B9%E5%BC%8F%E7%99%BB%E5%BD%95/#_8","text":"\u81ea\u5b9a\u4e49\u9891\u7387\u7c7b\uff1a drf\u9ed8\u8ba4\u63d0\u4f9b\u4e86\u4e00\u4e9b\u9891\u7387\u7c7b AnonRateThrottle\uff1a\u53ea\u5bf9\u6e38\u5ba2\u8fdb\u884c\u9891\u7387\u9650\u5236 UserRateThrottle\uff1a\u5bf9\u6240\u6709\u7528\u6237\u8fdb\u884c\u9891\u7387\u9650\u5236 \u5982\u679c\u7531\u7279\u6b8a\u9700\u8981\uff0c\u9700\u8981\u81ea\u5b9a\u4e49\u9891\u7387\u7c7b \u5982\uff1a\u5bf9ip\u8fdb\u884c\u9650\u6b21\u3001\u5bf9\u7535\u8bdd\u8fdb\u884c\u9650\u6b21\u3001\u5bf9\u89c6\u56fe\u67d0\u4e9b\u4fe1\u606f\u8fdb\u884c\u9650\u6b21 \u65b9\u6cd5\u6b65\u9aa4\uff1a \u8bbe\u7f6escope\u5b57\u7b26\u4e32\u7c7b\u5c5e\u6027\uff0c\u540c\u65f6\u5728settings\u4e2d\u8fdb\u884cdrf\u914d\u7f6eDEFAULT THROTTLE RATES \u91cd\u5199get catch key\u65b9\u6cd5 \u8fd4\u56de\u4e0e\u9650\u5236\u6761\u4ef6\u6709\u5173\u7684\u5b57\u7b26\u4e32\uff0c\u8868\u793a\u9650\u5236 \u8fd4\u56deNone\uff0c\u8868\u793a\u4e0d\u9650\u5236 # throttles.py from rest_framework.throttling import SimpleRateThrottle class MobileReateThrottle ( SimpleRateThrottle ): scope = 'mobile' def get_cache_key ( self , request , view ): if not request . user . is_authenticated or not request . user . mobile : return None # \u533f\u540d\u7528\u6237 \u6ca1\u6709\u7535\u8bdd\u53f7\u7684\u7528\u6237\u90fd\u4e0d\u9650\u5236 return self . cache_format % { 'scope' : self . scope , 'ident' : request . user . mobile }","title":"\u81ea\u5b9a\u4e49\u9891\u7387\u7c7b"},{"location":"django%20rest%20framework/09%20%E4%B8%89%E5%A4%A7%E7%BB%84%E4%BB%B6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","text":"\u4e09\u5927\u7ec4\u4ef6\u6e90\u7801\u5206\u6790 # \u8ba4\u8bc1\u7ec4\u4ef6 # \u901a\u8fc7dispath\u65b9\u6cd5\uff0c\u8fdb\u5165\u4e09\u5927\u8ba4\u8bc1\uff1a \u9996\u5148\u770b\u4e00\u4e0b\u8bf7\u6c42\u6a21\u5757\uff0c\u8fdb\u5165request \u8fdb\u5165 get_authenticators \u65b9\u6cd5 \u53ef\u4ee5\u77e5\u9053\uff0c\u8bf7\u6c42\u6a21\u5757\u4e8c\u6b21\u5c01\u88c5request\u5bf9\u8c61\uff0c\u5305\u542b\u89e3\u6790\u6a21\u5757\uff0c\u8fd8\u5c06\u8ba4\u8bc1\u7c7b\u4eec\u7684\u5bf9\u8c61\u5b58\u50a8\u5728\u8bf7\u6c42\u5bf9\u8c61\u4e2d\u3002 \u8fdb\u5165\u4e09\u5927\u8ba4\u8bc1 \u904d\u5386\u4e00\u4e2a\u4e2a\u8ba4\u8bc1\u5668\uff0c\u5b8c\u6210\u4e00\u4e2a\u4e2a\u8ba4\u8bc1\u7c7b\uff0c\u6bcf\u4e00\u4e2a\u914d\u7f6e\u7684\u8ba4\u8bc1\u7c7b\u90fd\u8981\u8c03\u7528 authenticate \u65b9\u6cd5\u5b8c\u6210\u8ba4\u8bc1\u3002\u8fd4\u56de\u503c\u662fuser\u548cauth\u7ec4\u6210\u7684\u5143\u7ec4\u3002 \u6743\u9650\u7ec4\u4ef6 # \u9891\u7387\u7ec4\u4ef6 # \u901a\u8fc7dispatch\u65b9\u6cd5 \u8fdb\u5165\u9891\u7387\u7ec4\u4ef6 \u7136\u540e\u770bSimpleRateThrottle\u7c7b\uff0c\u6709allow request\u548c wait \u65b9\u6cd5\u3002SimpleRateThrottle\u7ee7\u627fBaseThrottle\uff0cBaseThrottle\u4e5f\u6709allow request\u548c wait\u4e24\u4e2a\u65b9\u6cd5\uff0c\u4f46\u5b83\u6ca1\u5199\uff0c\u9700\u8981\u81ea\u5df1\u5199\u3002 \u6240\u4ee5\u6211\u4eec\u7ee7\u627fSimpleRateThrottle\u7c7b\uff0c\u5b83\u5e2e\u6211\u4eec\u5199\u4e86allow_request\u548c wait\u4e24\u4e2a\u65b9\u6cd5 # \u53ef\u4ee5\u76f4\u63a5\u5728\u81ea\u5b9a\u4e49\u9891\u7387\u7c7b\u4e2d\u914d\u7f6erate\uff0c\u8fd9\u5c31\u662f\u8981\u52a8\u6e90\u7801\u4e86 rate = '3/min' # \u4f46\u662f\u63a8\u8350\u5728\u81ea\u5b9a\u4e49\u9891\u7387\u7c7b\u4e2d\u914d\u7f6escope\u5c5e\u6027\uff0c\u7136\u540e\u518d\u5728settings\u6587\u4ef6\u4e2d\u8bbe\u7f6escope class MobileReateThrottle ( SimpleRateThrottle ): scope = 'mobile' def get_cache_key ( self , request , view ): if not request . user . is_authenticated or not request . user . mobile : return None # \u533f\u540d\u7528\u6237 \u6ca1\u6709\u7535\u8bdd\u53f7\u7684\u7528\u6237\u90fd\u4e0d\u9650\u5236 return self . cache_format % { 'scope' : self . scope , 'ident' : request . user . mobile } # settings\u6587\u4ef6 REST_FRAMEWORK = { # \u9891\u7387\u7ec4\u4ef6\uff0c\u9891\u7387\u7c7b\u4e00\u822c\u505a\u5c40\u90e8\u914d\u7f6e\uff0c\u4f46\u662f\u9891\u7387\u8c03\u8282\u5728settings\u4e2d\u914d\u7f6e 'DEFAULT_THROTTLE_RATES' : { 'user' : '5/min' , # \u767b\u5f55\u7528\u6237\u9650\u5236 'anon' : '3/min' , # \u533f\u540d\u7528\u6237\u9650\u5236, 'mobile' : '1/min' }, } \u6765\u5230\u4e0a\u9762\u7684 __init__ \u65b9\u6cd5\u4e2d \u56de\u5230allow_request cache.set(key, value, exp) \u8bbe\u7f6e\u8fc7\u671f\u7f13\u5b58\uff0cexp\u8bbe\u4e3a0\uff0c\u4ee3\u8868\u7f13\u5b58\u4e0d\u8fc7\u671f \u8bf7\u6c42\u4e00\u6b21\uff0c\u5c06\u65f6\u95f4\u4fdd\u5b58\u4e00\u6b21\uff0c\u4fdd\u5b58\u5728self.history\u4e2d \u6839\u636e\u8bf7\u6c42\u65f6\u95f4\u5f62\u6210\u7684\u5217\u8868\u957f\u5ea6\u5224\u65ad\u662f\u5426\u9650\u6b21 \u8fdb\u5165wait\u65b9\u6cd5","title":"09 \u4e09\u5927\u7ec4\u4ef6\u6e90\u7801\u5206\u6790"},{"location":"django%20rest%20framework/09%20%E4%B8%89%E5%A4%A7%E7%BB%84%E4%BB%B6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/#_1","text":"","title":"\u4e09\u5927\u7ec4\u4ef6\u6e90\u7801\u5206\u6790"},{"location":"django%20rest%20framework/09%20%E4%B8%89%E5%A4%A7%E7%BB%84%E4%BB%B6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/#_2","text":"\u901a\u8fc7dispath\u65b9\u6cd5\uff0c\u8fdb\u5165\u4e09\u5927\u8ba4\u8bc1\uff1a \u9996\u5148\u770b\u4e00\u4e0b\u8bf7\u6c42\u6a21\u5757\uff0c\u8fdb\u5165request \u8fdb\u5165 get_authenticators \u65b9\u6cd5 \u53ef\u4ee5\u77e5\u9053\uff0c\u8bf7\u6c42\u6a21\u5757\u4e8c\u6b21\u5c01\u88c5request\u5bf9\u8c61\uff0c\u5305\u542b\u89e3\u6790\u6a21\u5757\uff0c\u8fd8\u5c06\u8ba4\u8bc1\u7c7b\u4eec\u7684\u5bf9\u8c61\u5b58\u50a8\u5728\u8bf7\u6c42\u5bf9\u8c61\u4e2d\u3002 \u8fdb\u5165\u4e09\u5927\u8ba4\u8bc1 \u904d\u5386\u4e00\u4e2a\u4e2a\u8ba4\u8bc1\u5668\uff0c\u5b8c\u6210\u4e00\u4e2a\u4e2a\u8ba4\u8bc1\u7c7b\uff0c\u6bcf\u4e00\u4e2a\u914d\u7f6e\u7684\u8ba4\u8bc1\u7c7b\u90fd\u8981\u8c03\u7528 authenticate \u65b9\u6cd5\u5b8c\u6210\u8ba4\u8bc1\u3002\u8fd4\u56de\u503c\u662fuser\u548cauth\u7ec4\u6210\u7684\u5143\u7ec4\u3002","title":"\u8ba4\u8bc1\u7ec4\u4ef6"},{"location":"django%20rest%20framework/09%20%E4%B8%89%E5%A4%A7%E7%BB%84%E4%BB%B6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/#_3","text":"","title":"\u6743\u9650\u7ec4\u4ef6"},{"location":"django%20rest%20framework/09%20%E4%B8%89%E5%A4%A7%E7%BB%84%E4%BB%B6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/#_4","text":"\u901a\u8fc7dispatch\u65b9\u6cd5 \u8fdb\u5165\u9891\u7387\u7ec4\u4ef6 \u7136\u540e\u770bSimpleRateThrottle\u7c7b\uff0c\u6709allow request\u548c wait \u65b9\u6cd5\u3002SimpleRateThrottle\u7ee7\u627fBaseThrottle\uff0cBaseThrottle\u4e5f\u6709allow request\u548c wait\u4e24\u4e2a\u65b9\u6cd5\uff0c\u4f46\u5b83\u6ca1\u5199\uff0c\u9700\u8981\u81ea\u5df1\u5199\u3002 \u6240\u4ee5\u6211\u4eec\u7ee7\u627fSimpleRateThrottle\u7c7b\uff0c\u5b83\u5e2e\u6211\u4eec\u5199\u4e86allow_request\u548c wait\u4e24\u4e2a\u65b9\u6cd5 # \u53ef\u4ee5\u76f4\u63a5\u5728\u81ea\u5b9a\u4e49\u9891\u7387\u7c7b\u4e2d\u914d\u7f6erate\uff0c\u8fd9\u5c31\u662f\u8981\u52a8\u6e90\u7801\u4e86 rate = '3/min' # \u4f46\u662f\u63a8\u8350\u5728\u81ea\u5b9a\u4e49\u9891\u7387\u7c7b\u4e2d\u914d\u7f6escope\u5c5e\u6027\uff0c\u7136\u540e\u518d\u5728settings\u6587\u4ef6\u4e2d\u8bbe\u7f6escope class MobileReateThrottle ( SimpleRateThrottle ): scope = 'mobile' def get_cache_key ( self , request , view ): if not request . user . is_authenticated or not request . user . mobile : return None # \u533f\u540d\u7528\u6237 \u6ca1\u6709\u7535\u8bdd\u53f7\u7684\u7528\u6237\u90fd\u4e0d\u9650\u5236 return self . cache_format % { 'scope' : self . scope , 'ident' : request . user . mobile } # settings\u6587\u4ef6 REST_FRAMEWORK = { # \u9891\u7387\u7ec4\u4ef6\uff0c\u9891\u7387\u7c7b\u4e00\u822c\u505a\u5c40\u90e8\u914d\u7f6e\uff0c\u4f46\u662f\u9891\u7387\u8c03\u8282\u5728settings\u4e2d\u914d\u7f6e 'DEFAULT_THROTTLE_RATES' : { 'user' : '5/min' , # \u767b\u5f55\u7528\u6237\u9650\u5236 'anon' : '3/min' , # \u533f\u540d\u7528\u6237\u9650\u5236, 'mobile' : '1/min' }, } \u6765\u5230\u4e0a\u9762\u7684 __init__ \u65b9\u6cd5\u4e2d \u56de\u5230allow_request cache.set(key, value, exp) \u8bbe\u7f6e\u8fc7\u671f\u7f13\u5b58\uff0cexp\u8bbe\u4e3a0\uff0c\u4ee3\u8868\u7f13\u5b58\u4e0d\u8fc7\u671f \u8bf7\u6c42\u4e00\u6b21\uff0c\u5c06\u65f6\u95f4\u4fdd\u5b58\u4e00\u6b21\uff0c\u4fdd\u5b58\u5728self.history\u4e2d \u6839\u636e\u8bf7\u6c42\u65f6\u95f4\u5f62\u6210\u7684\u5217\u8868\u957f\u5ea6\u5224\u65ad\u662f\u5426\u9650\u6b21 \u8fdb\u5165wait\u65b9\u6cd5","title":"\u9891\u7387\u7ec4\u4ef6"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/01%20django%E5%89%8D%E5%A5%8F/","text":"django\u57fa\u672c\u6982\u5ff5 # \u524d\u8a00 # web\u6846\u67b6\u672c\u8d28 # \u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u7406\u89e3\uff1a\u6240\u6709\u7684Web\u5e94\u7528\u672c\u8d28\u4e0a\u5c31\u662f\u4e00\u4e2asocket\u670d\u52a1\u7aef\uff0c\u800c\u7528\u6237\u7684\u6d4f\u89c8\u5668\u5c31\u662f\u4e00\u4e2asocket\u5ba2\u6237\u7aef\u3002 \u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u81ea\u5df1\u5b9e\u73b0Web\u6846\u67b6\u4e86\u3002 \u670d\u52a1\u5668\u7a0b\u5e8f\u548c\u5e94\u7528\u7a0b\u5e8f # \u5bf9\u4e8e\u771f\u5b9e\u5f00\u53d1\u4e2d\u7684python web\u7a0b\u5e8f\u6765\u8bf4\uff0c\u4e00\u822c\u4f1a\u5206\u4e3a\u4e24\u90e8\u5206\uff1a\u670d\u52a1\u5668\u7a0b\u5e8f\u548c\u5e94\u7528\u7a0b\u5e8f\u3002 \u670d\u52a1\u5668\u7a0b\u5e8f\u8d1f\u8d23\u5bf9socket\u670d\u52a1\u5668\u8fdb\u884c\u5c01\u88c5\uff0c\u5e76\u5728\u8bf7\u6c42\u5230\u6765\u65f6\uff0c\u5bf9\u8bf7\u6c42\u7684\u5404\u79cd\u6570\u636e\u8fdb\u884c\u6574\u7406\u3002 \u5e94\u7528\u7a0b\u5e8f\u5219\u8d1f\u8d23\u5177\u4f53\u7684\u903b\u8f91\u5904\u7406\u3002\u4e3a\u4e86\u65b9\u4fbf\u5e94\u7528\u7a0b\u5e8f\u7684\u5f00\u53d1\uff0c\u5c31\u51fa\u73b0\u4e86\u4f17\u591a\u7684Web\u6846\u67b6\uff0c\u4f8b\u5982\uff1aDjango\u3001Flask\u3001web.py \u7b49\u3002\u4e0d\u540c\u7684\u6846\u67b6\u6709\u4e0d\u540c\u7684\u5f00\u53d1\u65b9\u5f0f\uff0c\u4f46\u662f\u65e0\u8bba\u5982\u4f55\uff0c\u5f00\u53d1\u51fa\u7684\u5e94\u7528\u7a0b\u5e8f\u90fd\u8981\u548c\u670d\u52a1\u5668\u7a0b\u5e8f\u914d\u5408\uff0c\u624d\u80fd\u4e3a\u7528\u6237\u63d0\u4f9b\u670d\u52a1\u3002 \u8fd9\u6837\uff0c\u670d\u52a1\u5668\u7a0b\u5e8f\u5c31\u9700\u8981\u4e3a\u4e0d\u540c\u7684\u6846\u67b6\u63d0\u4f9b\u4e0d\u540c\u7684\u652f\u6301\u3002\u8fd9\u6837\u6df7\u4e71\u7684\u5c40\u9762\u65e0\u8bba\u5bf9\u4e8e\u670d\u52a1\u5668\u8fd8\u662f\u6846\u67b6\uff0c\u90fd\u662f\u4e0d\u597d\u7684\u3002\u5bf9\u670d\u52a1\u5668\u6765\u8bf4\uff0c\u9700\u8981\u652f\u6301\u5404\u79cd\u4e0d\u540c\u6846\u67b6\uff0c\u5bf9\u6846\u67b6\u6765\u8bf4\uff0c\u53ea\u6709\u652f\u6301\u5b83\u7684\u670d\u52a1\u5668\u624d\u80fd\u88ab\u5f00\u53d1\u51fa\u7684\u5e94\u7528\u4f7f\u7528\u3002 \u8fd9\u65f6\u5019\uff0c\u6807\u51c6\u5316\u5c31\u53d8\u5f97\u5c24\u4e3a\u91cd\u8981\u3002\u6211\u4eec\u53ef\u4ee5\u8bbe\u7acb\u4e00\u4e2a\u6807\u51c6\uff0c\u53ea\u8981\u670d\u52a1\u5668\u7a0b\u5e8f\u652f\u6301\u8fd9\u4e2a\u6807\u51c6\uff0c\u6846\u67b6\u4e5f\u652f\u6301\u8fd9\u4e2a\u6807\u51c6\uff0c\u90a3\u4e48\u4ed6\u4eec\u5c31\u53ef\u4ee5\u914d\u5408\u4f7f\u7528\u3002\u4e00\u65e6\u6807\u51c6\u786e\u5b9a\uff0c\u53cc\u65b9\u5404\u81ea\u5b9e\u73b0\u3002\u8fd9\u6837\uff0c\u670d\u52a1\u5668\u53ef\u4ee5\u652f\u6301\u66f4\u591a\u652f\u6301\u6807\u51c6\u7684\u6846\u67b6\uff0c\u6846\u67b6\u4e5f\u53ef\u4ee5\u4f7f\u7528\u66f4\u591a\u652f\u6301\u6807\u51c6\u7684\u670d\u52a1\u5668\u3002 WSGI \uff08Web Server Gateway Interface\uff09\u5c31\u662f\u4e00\u79cd\u89c4\u8303\uff0c\u5b83\u5b9a\u4e49\u4e86\u4f7f\u7528Python\u7f16\u5199\u7684web\u5e94\u7528\u7a0b\u5e8f\u4e0eweb\u670d\u52a1\u5668\u7a0b\u5e8f\u4e4b\u95f4\u7684\u63a5\u53e3\u683c\u5f0f\uff0c\u5b9e\u73b0web\u5e94\u7528\u7a0b\u5e8f\u4e0eweb\u670d\u52a1\u5668\u7a0b\u5e8f\u95f4\u7684\u89e3\u8026\u3002 \u5e38\u7528\u7684WSGI\u670d\u52a1\u5668\u6709uwsgi\u3001Gunicorn\u3002\u800cPython\u6807\u51c6\u5e93\u63d0\u4f9b\u7684\u72ec\u7acbWSGI\u670d\u52a1\u5668\u53ebwsgiref\uff0cDjango\u5f00\u53d1\u73af\u5883\u7528\u7684\u5c31\u662f\u8fd9\u4e2a\u6a21\u5757\u6765\u505a\u670d\u52a1\u5668\u3002 WSGI # wsgi server (\u6bd4\u5982uWSGI) \u8981\u548c wsgi application(\u6bd4\u5982django )\u4ea4\u4e92,uwsgi\u9700\u8981\u5c06\u8fc7\u6765\u7684\u8bf7\u6c42\u8f6c\u7ed9django \u5904\u7406,\u90a3\u4e48uWSGI \u548c django\u7684\u4ea4\u4e92\u548c\u8c03\u7528\u5c31\u9700\u8981\u4e00\u4e2a\u7edf\u4e00\u7684\u89c4\u8303,\u8fd9\u4e2a\u89c4\u8303\u5c31\u662fWSGI WSGI(Web Server GatewayInterface)\u3002 WSGI,\u5168\u79f0 Web Server Gateway Interface,\u6216\u8005 Python Web Server Gateway Interface ,\u662f\u4e3aPython \u8bed\u8a00\u5b9a\u4e49\u7684 Web \u670d\u52a1\u5668\u548c Web \u5e94\u7528\u7a0b\u5e8f\u6216\u6846\u67b6\u4e4b\u95f4\u7684\u4e00\u79cd\u7b80\u5355\u800c\u901a\u7528\u7684\u63a5\u53e3\u3002 WSGI \u7684\u5b98\u65b9\u5b9a\u4e49\u662f,the Python Web Server Gateway Interface\u3002\u4ece\u540d\u5b57\u5c31\u53ef\u4ee5\u770b\u51fa\u6765,\u8fd9\u4e1c\u897f\u662f\u4e00\u4e2aGateway,\u4e5f\u5c31\u662f\u7f51\u5173\u3002\u7f51\u5173\u7684\u4f5c\u7528\u5c31\u662f\u5728\u534f\u8bae\u4e4b\u95f4\u8fdb\u884c\u8f6c\u6362\u3002 WSGI \u662f\u4f5c\u4e3a Web \u670d\u52a1\u5668\u4e0e Web \u5e94\u7528\u7a0b\u5e8f\u6216\u5e94\u7528\u6846\u67b6\u4e4b\u95f4\u7684\u4e00\u79cd\u4f4e\u7ea7\u522b\u7684\u63a5\u53e3 python\u4e09\u5927\u4e3b\u6d41web\u6846\u67b6 # django # \u5927\u578b\u6846\u67b6\uff0c\u81ea\u5e26\u7684\u7ec4\u4ef6\u548c\u529f\u80fd\u975e\u5e38\u591a\uff1b\u4e0d\u8db3\u4e4b\u5904\u5c31\u662f\u5199\u5c0f\u9879\u76ee\u65f6\uff0c\u53ef\u80fd\u4f1a\u5f88\u7b28\u91cd socket\u90e8\u5206\u7528\u7684\u522b\u4eba\u7684wsgiref\uff08django\u9ed8\u8ba4\u7684\uff09 \u8def\u7531\u5339\u914d\u81ea\u5df1\u5199\u7684 \u6a21\u677f\u8bed\u6cd5\u662f\u81ea\u5df1\u5199\u7684 flask # \u5c0f\u800c\u7cbe \u77ed\u5c0f\u7cbe\u608d \u81ea\u5e26\u7684\u7ec4\u4ef6\u548c\u529f\u80fd\u7279\u522b\u7279\u522b\u5c11 \uff0c\u57fa\u672c\u5168\u90e8\u4f9d\u8d56\u4e8e\u7b2c\u4e09\u65b9\u7ec4\u4ef6 \u4e0d\u8db3\u4e4b\u5904: \u53d7\u9650\u4e8e\u7b2c\u4e09\u65b9\u6a21\u5757\u7684\u5f71\u54cd\u6bd4\u8f83\u5927 \u5982\u679c\u5c06flask\u6240\u6709\u7b2c\u4e09\u65b9\u6a21\u5757\u52a0\u8d77\u6765 \u80fd\u591f\u76f4\u63a5\u76d6\u8fc7django socket\u90e8\u5206\u7528\u7684\u522b\u4eba\u7684werkzeug \u8def\u7531\u5339\u914d\u81ea\u5df1\u5199\u7684 \u6a21\u677f\u8bed\u6cd5\u7528\u7684\u522b\u4eba\u7684jinja2 torndao # \u7279\u70b9\uff1a\u5f02\u6b65\u975e\u963b\u585e \u8fd9\u4e2a\u6846\u67b6\u751a\u81f3\u53ef\u4ee5\u7528\u6765\u5f00\u53d1\u6e38\u620f\u670d\u52a1\u5668 socket\u3001\u8def\u7531\u5339\u914d\u3001\u6a21\u677f\u8bed\u6cd5\u90fd\u662f\u81ea\u5df1\u5199\u7684 Django\u5b89\u88c5\u914d\u7f6e # \u6ce8\u610f\u4e8b\u9879 # \u8ba1\u7b97\u673a\u540d\u79f0\u4e0d\u80fd\u6709\u4e2d\u6587 python\u89e3\u91ca\u5668\u4e0d\u8981\u4f7f\u75283.7\u7248\u672c\uff0c\u63a8\u8350\u4f7f\u75283.4-3.6\u7248\u672c \u4e00\u4e2apycharm\u7a97\u53e3 \u53ea\u80fd\u8dd1\u4e00\u4e2a\u9879\u76ee django\u7248\u672c\u4f7f\u75281.11 \u5b89\u88c5django\u6307\u5b9a\u7248\u672c \u4e24\u79cd\u65b9\u6cd5 pip\u5b89\u88c5\uff1a pip install django==1.11.11 pycharm\u5b89\u88c5\u6307\u5b9a\u7248\u672c \u68c0\u9a8cdjango\u662f\u5426\u5b89\u88c5\u6210\u529f\uff1a \u547d\u4ee4\u884c\u6267\u884c\uff1a django-admin \uff0c\u6709\u8fd4\u56de\u7ed3\u679c\u8bf4\u660e\u5b89\u88c5\u6210\u529f \u547d\u4ee4\u884c\u521b\u5efa\u9879\u76ee # \u521b\u5efadjango\u9879\u76ee \uff1a django-admin startproject \u9879\u76ee\u540d(\u5982mysite) \u542f\u52a8django\u9879\u76ee\uff1a python manager.py runserver \uff0c\u6216\u8005\u6307\u5b9aip\u548c\u7aef\u53e3\uff1a python manager . py runserver 127.0 . 0.1 : 8000 # \u9ed8\u8ba4\u542f\u52a8\u5728\u672c\u57308000\u7aef\u53e3 \u521b\u5efaapp\u5e94\u7528\uff08django\u652f\u6301\u591aapp\u5f00\u53d1\uff09\uff1a python manager.py startapp app01 app\u7684\u6982\u5ff5 # django\u662f\u4e00\u4e2a\u4ee5\u5f00\u53d1app\u4e3a\u53ea\u8981\u529f\u80fd\u7684web\u6846\u67b6\uff0capp\u5c31\u662fapplication\u5e94\u7528\u7684\u610f\u601d \u4e00\u4e2adjango\u9879\u76ee\u5c31\u76f8\u5f53\u4e8e\u4e00\u6240\u5927\u5b66\uff0c\u800c\u4e00\u4e2a\u4e2aapp\u76f8\u5f53\u4e8e\u5927\u5b66\u91cc\u7684\u5b66\u9662\u3002 \u800c \u4e00\u4e2a\u7a7a\u7684django\u9879\u76ee\u672c\u8eab\u6ca1\u6709\u4efb\u4f55\u4f5c\u7528\uff0c\u4ec5\u4ec5\u4e3aapp\u63d0\u4f9b\u524d\u671f\u7684\u73af\u5883\u914d\u7f6e\uff0capp\u624d\u662f\u4e00\u4e2a\u4e2a\u5177\u4f53\u7684\u529f\u80fd\uff0c\u6bcf\u4e2aapp\u90fd\u6709\u81ea\u5df1\u72ec\u7acb\u7684\u529f\u80fd\u3002 \u6ce8\u610f\uff1a\u521b\u5efa\u597d\u7684app\u9700\u8981\u5728django\u914d\u7f6e\u6587\u4ef6\u4e2d\u6ce8\u518c\u65b9\u53ef\u751f\u6548\uff1a # \u5728\u914d\u7f6e\u6587\u4ef6settings.py\u4e2d\u914d\u7f6e INSTALLED_APPS = [ 'django.contrib.admin' , 'django.contrib.auth' , 'django.contrib.contenttypes' , 'django.contrib.sessions' , 'django.contrib.messages' , 'django.contrib.staticfiles' , 'app01' , # \u7b80\u6613\u5199\u6cd5 'app01.apps.App01Config' # \u5b8c\u6574\u5199\u6cd5 ] \u547d\u4ee4\u884c\u4f20\u521b\u5efa\u9879\u76ee\u6ce8\u610f\uff1a \u4e0d\u4f1a\u81ea\u52a8\u521b\u5efatemplates\u6587\u4ef6\u5939\uff0c\u9700\u8981\u624b\u52a8\u521b\u5efa templates\u8def\u5f84\u9700\u8981\u624b\u52a8\u6dfb\u52a0\u5230\u914d\u7f6e\u6587\u4ef6\u4e2d 'DIRS': [os.path.join(BASE_DIR, 'templates')] pycharm\u521b\u5efa\u9879\u76ee # \u6ce8\u610f\uff1a \u4e00\u5b9a\u8981\u786e\u4fdd\u540c\u4e00\u4e2a\u7aef\u53e3 \u540c\u4e00\u65f6\u95f4\u53ea\u80fd\u542f\u4e00\u4e2adjango\u9879\u76ee templates\u8def\u5f84\u5982\u679c\u6ca1\u6709\uff0c\u9700\u8981\u624b\u52a8\u6dfb\u52a0\u5230\u914d\u7f6e\u6587\u4ef6\u4e2d 'DIRS': [os.path.join(BASE_DIR, 'templates')] \u76ee\u5f55\u7ed3\u6784 # mysite / \u251c\u2500\u2500 manage . py # django\u7684\u5165\u53e3\u6587\u4ef6 \u251c\u2500\u2500 templates # \u6a21\u677f\u6587\u4ef6\u5939\uff0c\u5b58\u653ehtml\u6587\u4ef6 \u251c\u2500\u2500 db . splite3 # django\u81ea\u5e26\u7684\u6570\u636e\u5e93\u6587\u4ef6 \u2514\u2500\u2500 mysite # \u9879\u76ee\u76ee\u5f55 \u251c\u2500\u2500 __init__ . py \u251c\u2500\u2500 settings . py # \u66b4\u9732\u7ed9\u7528\u6237\u53ef\u4ee5\u914d\u7f6e\u7684\u914d\u7f6e\u6587\u4ef6 \u251c\u2500\u2500 urls . py # \u8def\u7531 --> URL\u548c\u51fd\u6570\u7684\u5bf9\u5e94\u5173\u7cfb \u2514\u2500\u2500 wsgi . py # runserver\u547d\u4ee4\u5c31\u4f7f\u7528wsgiref\u6a21\u5757\u505a\u7b80\u5355\u7684web server \u251c\u2500\u2500 app01 # \u5e94\u7528\u6587\u4ef6\u5939\u540d \u251c\u2500\u2500 migrations\u6587\u4ef6\u5939 # \u6240\u6709\u6570\u636e\u5e93\u76f8\u5173\u7684\u64cd\u4f5c\u8bb0\u5f55 \u251c\u2500\u2500 __init__ . py \u251c\u2500\u2500 admin . py # django admin\u540e\u53f0\u7ba1\u7406 \u251c\u2500\u2500 apps . py # \u6ce8\u518cqpp\u4f7f\u7528 \u251c\u2500\u2500 models . py # \u653e\u6570\u636e\u5e93\u76f8\u5173\u7684\u6a21\u578b\u7c7b \u251c\u2500\u2500 tests . py # \u6d4b\u8bd5\u6587\u4ef6 \u251c\u2500\u2500 views . py # \u5904\u7406\u4e1a\u52a1\u903b\u8f91\u7684\u89c6\u56fe\u51fd\u6570","title":"01 django\u524d\u594f"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/01%20django%E5%89%8D%E5%A5%8F/#django","text":"","title":"django\u57fa\u672c\u6982\u5ff5"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/01%20django%E5%89%8D%E5%A5%8F/#_1","text":"","title":"\u524d\u8a00"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/01%20django%E5%89%8D%E5%A5%8F/#web","text":"\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u7406\u89e3\uff1a\u6240\u6709\u7684Web\u5e94\u7528\u672c\u8d28\u4e0a\u5c31\u662f\u4e00\u4e2asocket\u670d\u52a1\u7aef\uff0c\u800c\u7528\u6237\u7684\u6d4f\u89c8\u5668\u5c31\u662f\u4e00\u4e2asocket\u5ba2\u6237\u7aef\u3002 \u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u81ea\u5df1\u5b9e\u73b0Web\u6846\u67b6\u4e86\u3002","title":"web\u6846\u67b6\u672c\u8d28"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/01%20django%E5%89%8D%E5%A5%8F/#_2","text":"\u5bf9\u4e8e\u771f\u5b9e\u5f00\u53d1\u4e2d\u7684python web\u7a0b\u5e8f\u6765\u8bf4\uff0c\u4e00\u822c\u4f1a\u5206\u4e3a\u4e24\u90e8\u5206\uff1a\u670d\u52a1\u5668\u7a0b\u5e8f\u548c\u5e94\u7528\u7a0b\u5e8f\u3002 \u670d\u52a1\u5668\u7a0b\u5e8f\u8d1f\u8d23\u5bf9socket\u670d\u52a1\u5668\u8fdb\u884c\u5c01\u88c5\uff0c\u5e76\u5728\u8bf7\u6c42\u5230\u6765\u65f6\uff0c\u5bf9\u8bf7\u6c42\u7684\u5404\u79cd\u6570\u636e\u8fdb\u884c\u6574\u7406\u3002 \u5e94\u7528\u7a0b\u5e8f\u5219\u8d1f\u8d23\u5177\u4f53\u7684\u903b\u8f91\u5904\u7406\u3002\u4e3a\u4e86\u65b9\u4fbf\u5e94\u7528\u7a0b\u5e8f\u7684\u5f00\u53d1\uff0c\u5c31\u51fa\u73b0\u4e86\u4f17\u591a\u7684Web\u6846\u67b6\uff0c\u4f8b\u5982\uff1aDjango\u3001Flask\u3001web.py \u7b49\u3002\u4e0d\u540c\u7684\u6846\u67b6\u6709\u4e0d\u540c\u7684\u5f00\u53d1\u65b9\u5f0f\uff0c\u4f46\u662f\u65e0\u8bba\u5982\u4f55\uff0c\u5f00\u53d1\u51fa\u7684\u5e94\u7528\u7a0b\u5e8f\u90fd\u8981\u548c\u670d\u52a1\u5668\u7a0b\u5e8f\u914d\u5408\uff0c\u624d\u80fd\u4e3a\u7528\u6237\u63d0\u4f9b\u670d\u52a1\u3002 \u8fd9\u6837\uff0c\u670d\u52a1\u5668\u7a0b\u5e8f\u5c31\u9700\u8981\u4e3a\u4e0d\u540c\u7684\u6846\u67b6\u63d0\u4f9b\u4e0d\u540c\u7684\u652f\u6301\u3002\u8fd9\u6837\u6df7\u4e71\u7684\u5c40\u9762\u65e0\u8bba\u5bf9\u4e8e\u670d\u52a1\u5668\u8fd8\u662f\u6846\u67b6\uff0c\u90fd\u662f\u4e0d\u597d\u7684\u3002\u5bf9\u670d\u52a1\u5668\u6765\u8bf4\uff0c\u9700\u8981\u652f\u6301\u5404\u79cd\u4e0d\u540c\u6846\u67b6\uff0c\u5bf9\u6846\u67b6\u6765\u8bf4\uff0c\u53ea\u6709\u652f\u6301\u5b83\u7684\u670d\u52a1\u5668\u624d\u80fd\u88ab\u5f00\u53d1\u51fa\u7684\u5e94\u7528\u4f7f\u7528\u3002 \u8fd9\u65f6\u5019\uff0c\u6807\u51c6\u5316\u5c31\u53d8\u5f97\u5c24\u4e3a\u91cd\u8981\u3002\u6211\u4eec\u53ef\u4ee5\u8bbe\u7acb\u4e00\u4e2a\u6807\u51c6\uff0c\u53ea\u8981\u670d\u52a1\u5668\u7a0b\u5e8f\u652f\u6301\u8fd9\u4e2a\u6807\u51c6\uff0c\u6846\u67b6\u4e5f\u652f\u6301\u8fd9\u4e2a\u6807\u51c6\uff0c\u90a3\u4e48\u4ed6\u4eec\u5c31\u53ef\u4ee5\u914d\u5408\u4f7f\u7528\u3002\u4e00\u65e6\u6807\u51c6\u786e\u5b9a\uff0c\u53cc\u65b9\u5404\u81ea\u5b9e\u73b0\u3002\u8fd9\u6837\uff0c\u670d\u52a1\u5668\u53ef\u4ee5\u652f\u6301\u66f4\u591a\u652f\u6301\u6807\u51c6\u7684\u6846\u67b6\uff0c\u6846\u67b6\u4e5f\u53ef\u4ee5\u4f7f\u7528\u66f4\u591a\u652f\u6301\u6807\u51c6\u7684\u670d\u52a1\u5668\u3002 WSGI \uff08Web Server Gateway Interface\uff09\u5c31\u662f\u4e00\u79cd\u89c4\u8303\uff0c\u5b83\u5b9a\u4e49\u4e86\u4f7f\u7528Python\u7f16\u5199\u7684web\u5e94\u7528\u7a0b\u5e8f\u4e0eweb\u670d\u52a1\u5668\u7a0b\u5e8f\u4e4b\u95f4\u7684\u63a5\u53e3\u683c\u5f0f\uff0c\u5b9e\u73b0web\u5e94\u7528\u7a0b\u5e8f\u4e0eweb\u670d\u52a1\u5668\u7a0b\u5e8f\u95f4\u7684\u89e3\u8026\u3002 \u5e38\u7528\u7684WSGI\u670d\u52a1\u5668\u6709uwsgi\u3001Gunicorn\u3002\u800cPython\u6807\u51c6\u5e93\u63d0\u4f9b\u7684\u72ec\u7acbWSGI\u670d\u52a1\u5668\u53ebwsgiref\uff0cDjango\u5f00\u53d1\u73af\u5883\u7528\u7684\u5c31\u662f\u8fd9\u4e2a\u6a21\u5757\u6765\u505a\u670d\u52a1\u5668\u3002","title":"\u670d\u52a1\u5668\u7a0b\u5e8f\u548c\u5e94\u7528\u7a0b\u5e8f"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/01%20django%E5%89%8D%E5%A5%8F/#wsgi","text":"wsgi server (\u6bd4\u5982uWSGI) \u8981\u548c wsgi application(\u6bd4\u5982django )\u4ea4\u4e92,uwsgi\u9700\u8981\u5c06\u8fc7\u6765\u7684\u8bf7\u6c42\u8f6c\u7ed9django \u5904\u7406,\u90a3\u4e48uWSGI \u548c django\u7684\u4ea4\u4e92\u548c\u8c03\u7528\u5c31\u9700\u8981\u4e00\u4e2a\u7edf\u4e00\u7684\u89c4\u8303,\u8fd9\u4e2a\u89c4\u8303\u5c31\u662fWSGI WSGI(Web Server GatewayInterface)\u3002 WSGI,\u5168\u79f0 Web Server Gateway Interface,\u6216\u8005 Python Web Server Gateway Interface ,\u662f\u4e3aPython \u8bed\u8a00\u5b9a\u4e49\u7684 Web \u670d\u52a1\u5668\u548c Web \u5e94\u7528\u7a0b\u5e8f\u6216\u6846\u67b6\u4e4b\u95f4\u7684\u4e00\u79cd\u7b80\u5355\u800c\u901a\u7528\u7684\u63a5\u53e3\u3002 WSGI \u7684\u5b98\u65b9\u5b9a\u4e49\u662f,the Python Web Server Gateway Interface\u3002\u4ece\u540d\u5b57\u5c31\u53ef\u4ee5\u770b\u51fa\u6765,\u8fd9\u4e1c\u897f\u662f\u4e00\u4e2aGateway,\u4e5f\u5c31\u662f\u7f51\u5173\u3002\u7f51\u5173\u7684\u4f5c\u7528\u5c31\u662f\u5728\u534f\u8bae\u4e4b\u95f4\u8fdb\u884c\u8f6c\u6362\u3002 WSGI \u662f\u4f5c\u4e3a Web \u670d\u52a1\u5668\u4e0e Web \u5e94\u7528\u7a0b\u5e8f\u6216\u5e94\u7528\u6846\u67b6\u4e4b\u95f4\u7684\u4e00\u79cd\u4f4e\u7ea7\u522b\u7684\u63a5\u53e3","title":"WSGI"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/01%20django%E5%89%8D%E5%A5%8F/#pythonweb","text":"","title":"python\u4e09\u5927\u4e3b\u6d41web\u6846\u67b6"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/01%20django%E5%89%8D%E5%A5%8F/#django_1","text":"\u5927\u578b\u6846\u67b6\uff0c\u81ea\u5e26\u7684\u7ec4\u4ef6\u548c\u529f\u80fd\u975e\u5e38\u591a\uff1b\u4e0d\u8db3\u4e4b\u5904\u5c31\u662f\u5199\u5c0f\u9879\u76ee\u65f6\uff0c\u53ef\u80fd\u4f1a\u5f88\u7b28\u91cd socket\u90e8\u5206\u7528\u7684\u522b\u4eba\u7684wsgiref\uff08django\u9ed8\u8ba4\u7684\uff09 \u8def\u7531\u5339\u914d\u81ea\u5df1\u5199\u7684 \u6a21\u677f\u8bed\u6cd5\u662f\u81ea\u5df1\u5199\u7684","title":"django"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/01%20django%E5%89%8D%E5%A5%8F/#flask","text":"\u5c0f\u800c\u7cbe \u77ed\u5c0f\u7cbe\u608d \u81ea\u5e26\u7684\u7ec4\u4ef6\u548c\u529f\u80fd\u7279\u522b\u7279\u522b\u5c11 \uff0c\u57fa\u672c\u5168\u90e8\u4f9d\u8d56\u4e8e\u7b2c\u4e09\u65b9\u7ec4\u4ef6 \u4e0d\u8db3\u4e4b\u5904: \u53d7\u9650\u4e8e\u7b2c\u4e09\u65b9\u6a21\u5757\u7684\u5f71\u54cd\u6bd4\u8f83\u5927 \u5982\u679c\u5c06flask\u6240\u6709\u7b2c\u4e09\u65b9\u6a21\u5757\u52a0\u8d77\u6765 \u80fd\u591f\u76f4\u63a5\u76d6\u8fc7django socket\u90e8\u5206\u7528\u7684\u522b\u4eba\u7684werkzeug \u8def\u7531\u5339\u914d\u81ea\u5df1\u5199\u7684 \u6a21\u677f\u8bed\u6cd5\u7528\u7684\u522b\u4eba\u7684jinja2","title":"flask"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/01%20django%E5%89%8D%E5%A5%8F/#torndao","text":"\u7279\u70b9\uff1a\u5f02\u6b65\u975e\u963b\u585e \u8fd9\u4e2a\u6846\u67b6\u751a\u81f3\u53ef\u4ee5\u7528\u6765\u5f00\u53d1\u6e38\u620f\u670d\u52a1\u5668 socket\u3001\u8def\u7531\u5339\u914d\u3001\u6a21\u677f\u8bed\u6cd5\u90fd\u662f\u81ea\u5df1\u5199\u7684","title":"torndao"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/01%20django%E5%89%8D%E5%A5%8F/#django_2","text":"","title":"Django\u5b89\u88c5\u914d\u7f6e"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/01%20django%E5%89%8D%E5%A5%8F/#_3","text":"\u8ba1\u7b97\u673a\u540d\u79f0\u4e0d\u80fd\u6709\u4e2d\u6587 python\u89e3\u91ca\u5668\u4e0d\u8981\u4f7f\u75283.7\u7248\u672c\uff0c\u63a8\u8350\u4f7f\u75283.4-3.6\u7248\u672c \u4e00\u4e2apycharm\u7a97\u53e3 \u53ea\u80fd\u8dd1\u4e00\u4e2a\u9879\u76ee django\u7248\u672c\u4f7f\u75281.11 \u5b89\u88c5django\u6307\u5b9a\u7248\u672c \u4e24\u79cd\u65b9\u6cd5 pip\u5b89\u88c5\uff1a pip install django==1.11.11 pycharm\u5b89\u88c5\u6307\u5b9a\u7248\u672c \u68c0\u9a8cdjango\u662f\u5426\u5b89\u88c5\u6210\u529f\uff1a \u547d\u4ee4\u884c\u6267\u884c\uff1a django-admin \uff0c\u6709\u8fd4\u56de\u7ed3\u679c\u8bf4\u660e\u5b89\u88c5\u6210\u529f","title":"\u6ce8\u610f\u4e8b\u9879"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/01%20django%E5%89%8D%E5%A5%8F/#_4","text":"\u521b\u5efadjango\u9879\u76ee \uff1a django-admin startproject \u9879\u76ee\u540d(\u5982mysite) \u542f\u52a8django\u9879\u76ee\uff1a python manager.py runserver \uff0c\u6216\u8005\u6307\u5b9aip\u548c\u7aef\u53e3\uff1a python manager . py runserver 127.0 . 0.1 : 8000 # \u9ed8\u8ba4\u542f\u52a8\u5728\u672c\u57308000\u7aef\u53e3 \u521b\u5efaapp\u5e94\u7528\uff08django\u652f\u6301\u591aapp\u5f00\u53d1\uff09\uff1a python manager.py startapp app01","title":"\u547d\u4ee4\u884c\u521b\u5efa\u9879\u76ee"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/01%20django%E5%89%8D%E5%A5%8F/#app","text":"django\u662f\u4e00\u4e2a\u4ee5\u5f00\u53d1app\u4e3a\u53ea\u8981\u529f\u80fd\u7684web\u6846\u67b6\uff0capp\u5c31\u662fapplication\u5e94\u7528\u7684\u610f\u601d \u4e00\u4e2adjango\u9879\u76ee\u5c31\u76f8\u5f53\u4e8e\u4e00\u6240\u5927\u5b66\uff0c\u800c\u4e00\u4e2a\u4e2aapp\u76f8\u5f53\u4e8e\u5927\u5b66\u91cc\u7684\u5b66\u9662\u3002 \u800c \u4e00\u4e2a\u7a7a\u7684django\u9879\u76ee\u672c\u8eab\u6ca1\u6709\u4efb\u4f55\u4f5c\u7528\uff0c\u4ec5\u4ec5\u4e3aapp\u63d0\u4f9b\u524d\u671f\u7684\u73af\u5883\u914d\u7f6e\uff0capp\u624d\u662f\u4e00\u4e2a\u4e2a\u5177\u4f53\u7684\u529f\u80fd\uff0c\u6bcf\u4e2aapp\u90fd\u6709\u81ea\u5df1\u72ec\u7acb\u7684\u529f\u80fd\u3002 \u6ce8\u610f\uff1a\u521b\u5efa\u597d\u7684app\u9700\u8981\u5728django\u914d\u7f6e\u6587\u4ef6\u4e2d\u6ce8\u518c\u65b9\u53ef\u751f\u6548\uff1a # \u5728\u914d\u7f6e\u6587\u4ef6settings.py\u4e2d\u914d\u7f6e INSTALLED_APPS = [ 'django.contrib.admin' , 'django.contrib.auth' , 'django.contrib.contenttypes' , 'django.contrib.sessions' , 'django.contrib.messages' , 'django.contrib.staticfiles' , 'app01' , # \u7b80\u6613\u5199\u6cd5 'app01.apps.App01Config' # \u5b8c\u6574\u5199\u6cd5 ] \u547d\u4ee4\u884c\u4f20\u521b\u5efa\u9879\u76ee\u6ce8\u610f\uff1a \u4e0d\u4f1a\u81ea\u52a8\u521b\u5efatemplates\u6587\u4ef6\u5939\uff0c\u9700\u8981\u624b\u52a8\u521b\u5efa templates\u8def\u5f84\u9700\u8981\u624b\u52a8\u6dfb\u52a0\u5230\u914d\u7f6e\u6587\u4ef6\u4e2d 'DIRS': [os.path.join(BASE_DIR, 'templates')]","title":"app\u7684\u6982\u5ff5"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/01%20django%E5%89%8D%E5%A5%8F/#pycharm","text":"\u6ce8\u610f\uff1a \u4e00\u5b9a\u8981\u786e\u4fdd\u540c\u4e00\u4e2a\u7aef\u53e3 \u540c\u4e00\u65f6\u95f4\u53ea\u80fd\u542f\u4e00\u4e2adjango\u9879\u76ee templates\u8def\u5f84\u5982\u679c\u6ca1\u6709\uff0c\u9700\u8981\u624b\u52a8\u6dfb\u52a0\u5230\u914d\u7f6e\u6587\u4ef6\u4e2d 'DIRS': [os.path.join(BASE_DIR, 'templates')]","title":"pycharm\u521b\u5efa\u9879\u76ee"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/01%20django%E5%89%8D%E5%A5%8F/#_5","text":"mysite / \u251c\u2500\u2500 manage . py # django\u7684\u5165\u53e3\u6587\u4ef6 \u251c\u2500\u2500 templates # \u6a21\u677f\u6587\u4ef6\u5939\uff0c\u5b58\u653ehtml\u6587\u4ef6 \u251c\u2500\u2500 db . splite3 # django\u81ea\u5e26\u7684\u6570\u636e\u5e93\u6587\u4ef6 \u2514\u2500\u2500 mysite # \u9879\u76ee\u76ee\u5f55 \u251c\u2500\u2500 __init__ . py \u251c\u2500\u2500 settings . py # \u66b4\u9732\u7ed9\u7528\u6237\u53ef\u4ee5\u914d\u7f6e\u7684\u914d\u7f6e\u6587\u4ef6 \u251c\u2500\u2500 urls . py # \u8def\u7531 --> URL\u548c\u51fd\u6570\u7684\u5bf9\u5e94\u5173\u7cfb \u2514\u2500\u2500 wsgi . py # runserver\u547d\u4ee4\u5c31\u4f7f\u7528wsgiref\u6a21\u5757\u505a\u7b80\u5355\u7684web server \u251c\u2500\u2500 app01 # \u5e94\u7528\u6587\u4ef6\u5939\u540d \u251c\u2500\u2500 migrations\u6587\u4ef6\u5939 # \u6240\u6709\u6570\u636e\u5e93\u76f8\u5173\u7684\u64cd\u4f5c\u8bb0\u5f55 \u251c\u2500\u2500 __init__ . py \u251c\u2500\u2500 admin . py # django admin\u540e\u53f0\u7ba1\u7406 \u251c\u2500\u2500 apps . py # \u6ce8\u518cqpp\u4f7f\u7528 \u251c\u2500\u2500 models . py # \u653e\u6570\u636e\u5e93\u76f8\u5173\u7684\u6a21\u578b\u7c7b \u251c\u2500\u2500 tests . py # \u6d4b\u8bd5\u6587\u4ef6 \u251c\u2500\u2500 views . py # \u5904\u7406\u4e1a\u52a1\u903b\u8f91\u7684\u89c6\u56fe\u51fd\u6570","title":"\u76ee\u5f55\u7ed3\u6784"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/02%20django%E5%9F%BA%E7%A1%80%E4%B8%89%E6%9D%BF%E6%96%A7/","text":"django\u57fa\u7840\u5fc5\u5907\u4e09\u677f\u65a7 # \u4e3b\u8981\u64cd\u4f5cviews.py\u548curls.py HttpResponse # \u5185\u90e8\u4f20\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\u53c2\u6570\uff0c\u8fd4\u56de\u7ed9\u6d4f\u89c8\u5668 from django.shortcuts import render , HttpResponse , redirect def index ( request ): return HttpResponse ( '\u6709\u70b9\u610f\u601d' ) render # render\u53ef\u4ee5\u8fd4\u56dehtml\u6587\u4ef6\uff0c\u53ef\u4ee5\u7ed9html\u9875\u9762\u4f20\u503c def login ( request ): user_dic = { 'username' : 'neo' , 'password' : '123' } return render ( request , 'login.html' , { 'user_dic' : user_dic }) redirect # \u91cd\u5b9a\u5411\uff0c\u63a5\u53d7\u4e00\u4e2aURL\u53c2\u6570\uff0c\u8868\u793a\u8df3\u8f6c\u6307\u5b9a\u7684URL\u3002 \u53ef\u4ee5\u662f\u540e\u7f00\u540d\uff0c\u4e5f\u53ef\u4ee5\u662f\u5168\u8def\u5f84 def home ( request ): return redirect ( '/index' ) # return redirect('https://coding.net/')","title":"02 django\u57fa\u7840\u4e09\u677f\u65a7"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/02%20django%E5%9F%BA%E7%A1%80%E4%B8%89%E6%9D%BF%E6%96%A7/#django","text":"\u4e3b\u8981\u64cd\u4f5cviews.py\u548curls.py","title":"django\u57fa\u7840\u5fc5\u5907\u4e09\u677f\u65a7"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/02%20django%E5%9F%BA%E7%A1%80%E4%B8%89%E6%9D%BF%E6%96%A7/#httpresponse","text":"\u5185\u90e8\u4f20\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\u53c2\u6570\uff0c\u8fd4\u56de\u7ed9\u6d4f\u89c8\u5668 from django.shortcuts import render , HttpResponse , redirect def index ( request ): return HttpResponse ( '\u6709\u70b9\u610f\u601d' )","title":"HttpResponse"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/02%20django%E5%9F%BA%E7%A1%80%E4%B8%89%E6%9D%BF%E6%96%A7/#render","text":"render\u53ef\u4ee5\u8fd4\u56dehtml\u6587\u4ef6\uff0c\u53ef\u4ee5\u7ed9html\u9875\u9762\u4f20\u503c def login ( request ): user_dic = { 'username' : 'neo' , 'password' : '123' } return render ( request , 'login.html' , { 'user_dic' : user_dic })","title":"render"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/02%20django%E5%9F%BA%E7%A1%80%E4%B8%89%E6%9D%BF%E6%96%A7/#redirect","text":"\u91cd\u5b9a\u5411\uff0c\u63a5\u53d7\u4e00\u4e2aURL\u53c2\u6570\uff0c\u8868\u793a\u8df3\u8f6c\u6307\u5b9a\u7684URL\u3002 \u53ef\u4ee5\u662f\u540e\u7f00\u540d\uff0c\u4e5f\u53ef\u4ee5\u662f\u5168\u8def\u5f84 def home ( request ): return redirect ( '/index' ) # return redirect('https://coding.net/')","title":"redirect"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/03%20django%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6/","text":"django\u9759\u6001\u6587\u4ef6 # \u9759\u6001\u6587\u4ef6 # \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u6240\u6709\u7684html\u6587\u4ef6\u90fd\u662f\u653e\u5728templates\u6587\u4ef6\u5939\u5185 \u4ec0\u4e48\u662f\u9759\u6001\u6587\u4ef6 # \u7f51\u7ad9\u6240\u4f7f\u7528\u7684\u63d0\u524d\u5199\u7684css\u3001js \u7b2c\u4e09\u65b9\u7684\u524d\u7aef\u6a21\u5757\u3001\u56fe\u7247\u90fd\u53eb\u505a\u9759\u6001\u8d44\u6e90 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u7f51\u7ad9\u4f7f\u7528\u7684\u9759\u6001\u8d44\u6e90\u5168\u90e8\u4f1a\u653e\u5230static\u6587\u4ef6\u5939\u4e0b \u901a\u5e38\u60c5\u51b5\u4e0b \u5728static\u6587\u4ef6\u5939\u5185\u90e8\u8fd8\u4f1a\u518d\u5efa\u5176\u4ed6\u6587\u4ef6\u5939 \u8fd9\u662f\u4e3a\u4e86\u66f4\u52a0\u65b9\u4fbf\u5730\u7ba1\u7406\u6587\u4ef6\uff0c\u5728django\u4e2d \u9700\u8981\u4f60\u81ea\u5df1\u624b\u52a8\u521b\u5efa\u9759\u6001\u6587\u4ef6\u5b58\u653e\u7684\u6587\u4ef6\u5939 css \u6587\u4ef6\u5939 js \u6587\u4ef6\u5939 font \u6587\u4ef6\u5939 img \u6587\u4ef6\u5939 Bootstrap \u6ce8\u610f\u70b9\uff1a\u89c6\u56fe\u51fd\u6570\u90fd\u5fc5\u987b\u6709\u8fd4\u56de\u503c\uff0c\u5e76\u4e14\u8fd4\u56de\u503c\u90fd\u662fHttpResponse\u5bf9\u8c61 \u9759\u6001\u6587\u4ef6\u7684\u914d\u7f6e # django\u540e\u7aef\u5982\u679c\u60f3\u8981\u66b4\u9732\u540e\u7aef\u8d44\u6e90\uff0c\u5fc5\u987b\u53bburls\u91cc\u9762\u5f00\u8bbe\u5bf9\u5e94\u7684\u8d44\u6e90\u63a5\u53e3 \u5728\u9879\u76ee\u6587\u4ef6\u5939\u4e0b settings.py \u914d\u7f6e\uff1a STATIC_URL = '/static/' # \u8bbf\u95ee\u9759\u6001\u6587\u4ef6\u8d44\u6e90\u63a5\u53e3\u524d\u7f00 # \u624b\u52a8\u5f00\u8bbe\u9759\u6001\u6587\u4ef6\u8bbf\u95ee\u8d44\u6e90 STATICFILES_DIRS = [ # \u9759\u6001\u8d44\u6e90\u6240\u5728\u7684\u6587\u4ef6\u6240i\u5728\u6587\u4ef6\u5939\u8def\u5f84 os . path . join ( BASE_DIR , 'static' ), # \u5c06static\u91cc\u9762\u7684\u6240\u6709\u8d44\u6e90\u66b4\u9732\u7ed9\u7528\u6237 os . path . join ( BASE_DIR , 'static1' ) # static\u627e\u4e0d\u5230\u4f1a\u5f80\u4e0b\u627e\uff0c\u9010\u5c42\u627e ] \u9759\u6001\u6587\u4ef6\u52a8\u6001\u7ed1\u5b9a # {% load static %} < link rel = \"stylesheet\" href = \"{% static 'bootstrap-3.3.7-dist/css/bootstrap.min.css' %}\" > < script src = \"{% static 'bootstrap-3.3.7-dist/js/bootstrap.min.js' %}\" ></ script > \u6ce8\u610f\u4e8b\u9879 # form\u8868\u5355\u9ed8\u8ba4\u662fget\u8bf7\u6c42\uff0cget\u8bf7\u6c42\u4e5f\u80fd\u591f\u643a\u5e26\u53c2\u6570 \u683c\u5f0f\uff1a http://127.0.0.1:8000/login/?username=cwz&password=123 \u7279\u70b9\uff1a \u643a\u5e26\u7684\u6570\u636e\u4e0d\u5b89\u5168 \u643a\u5e26\u7684\u6570\u636e\u5927\u5c0f\u6709\u9650\u5236 \u901a\u5e38\u53ea\u4f1a\u643a\u5e26\u4e00\u4e9b\u4e0d\u662f\u5f88\u91cd\u8981\u7684\u6570\u636e \u524d\u671f\u5728\u671d\u540e\u7aef\u63d0\u4ea4post\u8bf7\u6c42\u51fa\u73b0403\u7684\u60c5\u51b5\uff0c\u9700\u8981\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u6ce8\u91ca\u6389\u4e00\u884c\u5185\u5bb9\uff1a 'django.middleware.csrf.CsrfViewMiddleware' , MIDDLEWARE = [ 'django.middleware.security.SecurityMiddleware' , 'django.contrib.sessions.middleware.SessionMiddleware' , 'django.middleware.common.CommonMiddleware' , # 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware' , 'django.contrib.messages.middleware.MessageMiddleware' , 'django.middleware.clickjacking.XFrameOptionsMiddleware' , ] request\u65b9\u6cd5\u521d\u8bc6 # \u5728django\u4e2d\u540e\u7aef\u7684\u89c6\u56fe\u51fd\u6570\uff0c\u65e0\u8bba\u662f\u53d1\u7684get\u8bf7\u6c42\u8fd8\u662fpost\u8bf7\u6c42\uff0c\u90fd\u4f1a\u6267\u884c\u89c6\u56fe\u51fd\u6570\uff0c\u9ed8\u8ba4\u5904\u7406\u7684\u662fget\u8bf7\u6c42\u3002 get\u8bf7\u6c42\u6307\u5411\u62ff\u5230login\u9875\u9762 post\u8bf7\u6c42\u60f3\u63d0\u4ea4\u6570\u636e\uff0c\u7136\u540e\u540e\u7aef\u505a\u6821\u9a8c \u5224\u65ad\u5f53\u524d\u8bf7\u6c42\u65b9\u5f0f\uff1a \u5229\u7528 request.method \u62ff\u5230\u7684\u5b57\u7b26\u4e32\u5927\u5199\u7684\u8bf7\u6c42\u65b9\u5f0f def login ( request ): # print('\u54c8\u54c8\u54c8') # print(request.method) # print(type(request.method)) if request . method == 'POST' : return HttpResponse ( '\u6536\u5230\u4e86' ) return render ( request , 'login.html' ) request.method \u83b7\u53d6\u8bf7\u6c42\u65b9\u5f0f\uff0c\u5f97\u5230\u7eaf\u5927\u5199\u7684\u5b57\u7b26\u4e32 GET POST request.POST \u83b7\u53d6\u7528\u6237\u63d0\u4ea4\u7684post\u8bf7\u6c42\u6570\u636e request.POST.get('username') # \u9ed8\u8ba4\u53ea\u53d6\u5217\u8868\u6700\u540e\u4e00\u4e2a\u5143\u7d20 request.POST.getlist('username') # \u83b7\u53d6\u5217\u8868 request.GET \u83b7\u53d6\u7528\u6237\u63d0\u4ea4\u7684get\u8bf7\u6c42\u6570\u636e request . GET . get () # \u9ed8\u8ba4\u53ea\u4f1a\u83b7\u53d6\u5217\u8868\u6700\u540e\u4e00\u4e2a\u5143\u7d20 request . GET . getlist () # \u5982\u679c\u4f60\u60f3\u83b7\u53d6\u5217\u8868 \u7528getlist()","title":"03 django\u9759\u6001\u6587\u4ef6"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/03%20django%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6/#django","text":"","title":"django\u9759\u6001\u6587\u4ef6"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/03%20django%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6/#_1","text":"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u6240\u6709\u7684html\u6587\u4ef6\u90fd\u662f\u653e\u5728templates\u6587\u4ef6\u5939\u5185","title":"\u9759\u6001\u6587\u4ef6"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/03%20django%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6/#_2","text":"\u7f51\u7ad9\u6240\u4f7f\u7528\u7684\u63d0\u524d\u5199\u7684css\u3001js \u7b2c\u4e09\u65b9\u7684\u524d\u7aef\u6a21\u5757\u3001\u56fe\u7247\u90fd\u53eb\u505a\u9759\u6001\u8d44\u6e90 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u7f51\u7ad9\u4f7f\u7528\u7684\u9759\u6001\u8d44\u6e90\u5168\u90e8\u4f1a\u653e\u5230static\u6587\u4ef6\u5939\u4e0b \u901a\u5e38\u60c5\u51b5\u4e0b \u5728static\u6587\u4ef6\u5939\u5185\u90e8\u8fd8\u4f1a\u518d\u5efa\u5176\u4ed6\u6587\u4ef6\u5939 \u8fd9\u662f\u4e3a\u4e86\u66f4\u52a0\u65b9\u4fbf\u5730\u7ba1\u7406\u6587\u4ef6\uff0c\u5728django\u4e2d \u9700\u8981\u4f60\u81ea\u5df1\u624b\u52a8\u521b\u5efa\u9759\u6001\u6587\u4ef6\u5b58\u653e\u7684\u6587\u4ef6\u5939 css \u6587\u4ef6\u5939 js \u6587\u4ef6\u5939 font \u6587\u4ef6\u5939 img \u6587\u4ef6\u5939 Bootstrap \u6ce8\u610f\u70b9\uff1a\u89c6\u56fe\u51fd\u6570\u90fd\u5fc5\u987b\u6709\u8fd4\u56de\u503c\uff0c\u5e76\u4e14\u8fd4\u56de\u503c\u90fd\u662fHttpResponse\u5bf9\u8c61","title":"\u4ec0\u4e48\u662f\u9759\u6001\u6587\u4ef6"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/03%20django%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6/#_3","text":"django\u540e\u7aef\u5982\u679c\u60f3\u8981\u66b4\u9732\u540e\u7aef\u8d44\u6e90\uff0c\u5fc5\u987b\u53bburls\u91cc\u9762\u5f00\u8bbe\u5bf9\u5e94\u7684\u8d44\u6e90\u63a5\u53e3 \u5728\u9879\u76ee\u6587\u4ef6\u5939\u4e0b settings.py \u914d\u7f6e\uff1a STATIC_URL = '/static/' # \u8bbf\u95ee\u9759\u6001\u6587\u4ef6\u8d44\u6e90\u63a5\u53e3\u524d\u7f00 # \u624b\u52a8\u5f00\u8bbe\u9759\u6001\u6587\u4ef6\u8bbf\u95ee\u8d44\u6e90 STATICFILES_DIRS = [ # \u9759\u6001\u8d44\u6e90\u6240\u5728\u7684\u6587\u4ef6\u6240i\u5728\u6587\u4ef6\u5939\u8def\u5f84 os . path . join ( BASE_DIR , 'static' ), # \u5c06static\u91cc\u9762\u7684\u6240\u6709\u8d44\u6e90\u66b4\u9732\u7ed9\u7528\u6237 os . path . join ( BASE_DIR , 'static1' ) # static\u627e\u4e0d\u5230\u4f1a\u5f80\u4e0b\u627e\uff0c\u9010\u5c42\u627e ]","title":"\u9759\u6001\u6587\u4ef6\u7684\u914d\u7f6e"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/03%20django%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6/#_4","text":"{% load static %} < link rel = \"stylesheet\" href = \"{% static 'bootstrap-3.3.7-dist/css/bootstrap.min.css' %}\" > < script src = \"{% static 'bootstrap-3.3.7-dist/js/bootstrap.min.js' %}\" ></ script >","title":"\u9759\u6001\u6587\u4ef6\u52a8\u6001\u7ed1\u5b9a"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/03%20django%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6/#_5","text":"form\u8868\u5355\u9ed8\u8ba4\u662fget\u8bf7\u6c42\uff0cget\u8bf7\u6c42\u4e5f\u80fd\u591f\u643a\u5e26\u53c2\u6570 \u683c\u5f0f\uff1a http://127.0.0.1:8000/login/?username=cwz&password=123 \u7279\u70b9\uff1a \u643a\u5e26\u7684\u6570\u636e\u4e0d\u5b89\u5168 \u643a\u5e26\u7684\u6570\u636e\u5927\u5c0f\u6709\u9650\u5236 \u901a\u5e38\u53ea\u4f1a\u643a\u5e26\u4e00\u4e9b\u4e0d\u662f\u5f88\u91cd\u8981\u7684\u6570\u636e \u524d\u671f\u5728\u671d\u540e\u7aef\u63d0\u4ea4post\u8bf7\u6c42\u51fa\u73b0403\u7684\u60c5\u51b5\uff0c\u9700\u8981\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u6ce8\u91ca\u6389\u4e00\u884c\u5185\u5bb9\uff1a 'django.middleware.csrf.CsrfViewMiddleware' , MIDDLEWARE = [ 'django.middleware.security.SecurityMiddleware' , 'django.contrib.sessions.middleware.SessionMiddleware' , 'django.middleware.common.CommonMiddleware' , # 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware' , 'django.contrib.messages.middleware.MessageMiddleware' , 'django.middleware.clickjacking.XFrameOptionsMiddleware' , ]","title":"\u6ce8\u610f\u4e8b\u9879"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/03%20django%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6/#request","text":"\u5728django\u4e2d\u540e\u7aef\u7684\u89c6\u56fe\u51fd\u6570\uff0c\u65e0\u8bba\u662f\u53d1\u7684get\u8bf7\u6c42\u8fd8\u662fpost\u8bf7\u6c42\uff0c\u90fd\u4f1a\u6267\u884c\u89c6\u56fe\u51fd\u6570\uff0c\u9ed8\u8ba4\u5904\u7406\u7684\u662fget\u8bf7\u6c42\u3002 get\u8bf7\u6c42\u6307\u5411\u62ff\u5230login\u9875\u9762 post\u8bf7\u6c42\u60f3\u63d0\u4ea4\u6570\u636e\uff0c\u7136\u540e\u540e\u7aef\u505a\u6821\u9a8c \u5224\u65ad\u5f53\u524d\u8bf7\u6c42\u65b9\u5f0f\uff1a \u5229\u7528 request.method \u62ff\u5230\u7684\u5b57\u7b26\u4e32\u5927\u5199\u7684\u8bf7\u6c42\u65b9\u5f0f def login ( request ): # print('\u54c8\u54c8\u54c8') # print(request.method) # print(type(request.method)) if request . method == 'POST' : return HttpResponse ( '\u6536\u5230\u4e86' ) return render ( request , 'login.html' ) request.method \u83b7\u53d6\u8bf7\u6c42\u65b9\u5f0f\uff0c\u5f97\u5230\u7eaf\u5927\u5199\u7684\u5b57\u7b26\u4e32 GET POST request.POST \u83b7\u53d6\u7528\u6237\u63d0\u4ea4\u7684post\u8bf7\u6c42\u6570\u636e request.POST.get('username') # \u9ed8\u8ba4\u53ea\u53d6\u5217\u8868\u6700\u540e\u4e00\u4e2a\u5143\u7d20 request.POST.getlist('username') # \u83b7\u53d6\u5217\u8868 request.GET \u83b7\u53d6\u7528\u6237\u63d0\u4ea4\u7684get\u8bf7\u6c42\u6570\u636e request . GET . get () # \u9ed8\u8ba4\u53ea\u4f1a\u83b7\u53d6\u5217\u8868\u6700\u540e\u4e00\u4e2a\u5143\u7d20 request . GET . getlist () # \u5982\u679c\u4f60\u60f3\u83b7\u53d6\u5217\u8868 \u7528getlist()","title":"request\u65b9\u6cd5\u521d\u8bc6"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/04%20django%E8%BF%9E%E6%8E%A5MySQL%E6%93%8D%E4%BD%9C%E6%A8%A1%E5%9E%8B%E8%A1%A8/","text":"django\u8fde\u63a5MySQL\u64cd\u4f5c\u6a21\u578b\u8868 # pycharm\u8fde\u63a5\u6570\u636e\u5e93 # pycharm\u4e5f\u53ef\u4ee5\u5145\u5f53MySQL\u7684\u5ba2\u6237\u7aef django\u8fde\u63a5MySQL # django\u9ed8\u8ba4\u7684\u6570\u636e\u5e93\u662fsqlite3\uff0c\u6211\u4eec\u6539\u4e3aMySQL\uff0c\u9700\u8981\u4e24\u6b65\u64cd\u4f5c \u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u6539\u6570\u636e\u5e93\u7684\u914d\u7f6e\uff1a DATABASES = { 'default' : { 'ENGINE' : 'django.db.backends.mysql' , # \u6307\u5b9a\u6570\u636e\u5e93 'NAME' : 'test' , # \u6307\u5b9a\u5e93\u7684\u540d\u5b57 'HOST' : '127.0.0.1' , # \u8981\u6ce8\u610f\u952e\u5fc5\u987b\u5927\u5199 'PORT' : 3306 , 'USER' : 'root' , 'PASSWORD' : '123' , 'CHARSET' : 'utf8' } } \u4e3b\u52a8\u544a\u8bc9django \u4e0d\u8981\u7528\u9ed8\u8ba4\u7684mysqldb\u8fde\u63a5 \u800c\u662f\u7528pymysql # \u4f60\u53ef\u4ee5\u5728\u9879\u76ee\u540d\u4e0b\u7684__init__.py\u4e2d\u4e66\u5199 # \u4e5f\u53ef\u4ee5\u5728\u5e94\u7528\u540d\u4e0b\u7684__init__.py\u4e2d\u4e66\u5199 import pymysql pymysql . install_as_MySQLdb () django ORM\u7b80\u4ecb # ORM \u5bf9\u8c61\u5173\u7cfb\u6620\u5c04 # \u7c7b \u8868 \u5bf9\u8c61 \u6570\u636e \u5bf9\u8c61.\u5c5e\u6027 \u5b57\u6bb5\u5bf9\u5e94\u7684\u503c \u4e3a\u4ec0\u4e48\u4f7f\u7528ORM \u80fd\u591f\u8ba9\u4e0d\u4f1a\u6570\u636e\u5e93\u64cd\u4f5c\u7684\u4eba\u4e5f\u80fd\u591f\u7b80\u5355\u65b9\u4fbf\u53bb\u64cd\u4f5c\u6570\u636e\u5e93 \u7f3a\u70b9\uff1a \u5c01\u88c5\u7a0b\u5ea6\u592a\u9ad8 \u6709\u65f6\u5019\u4f1a\u51fa\u73b0\u67e5\u8be2\u6548\u7387\u504f\u4f4e\u7684\u95ee\u9898 django\u4e2d\u64cd\u4f5cORM # \u53bb\u5e94\u7528\u4e0b\u7684models.py\u4e2d\u5199\u6570\u636e\u6a21\u578b\u7c7b class User ( models . Model ): # id = models.AutoField(primary_key=True) # django\u5f53\u4f60\u4e0d\u6307\u5b9a\u4e3b\u952e\u7684\u65f6\u5019\uff0c\u4f1a\u81ea\u52a8\u5e2e\u4f60\u521b\u5efa\u4e00\u4e2a\u540d\u4e3aid\u5b57\u6bb5\uff0c\u5e76\u4f5c\u4e3a\u4e3b\u952e # \u5982\u679c\u4f60\u81ea\u5df1\u6307\u5b9a\u4e86\u4e3b\u952e django\u5c31\u4e0d\u4f1a\u518d\u5e2e\u4f60\u521b\u5efa # \u5bf9\u5e94\u7684\u662fvarchar(32) django\u4e2d\u9ed8\u8ba4\u6ca1\u6709char\u5b57\u6bb5\uff0c\u4f46\u652f\u6301\u7528\u6237\u81ea\u5b9a\u4e49 username = models . CharField ( max_length = 32 ) password = models . IntegerField () \u6570\u636e\u5e93\u8fc1\u79fb\u547d\u540d\uff08\u540c\u6b65\uff09 # python manage . py makemigrations # \u5c06\u6570\u636e\u5e93\u7684\u4fee\u6539 \u8bb0\u5f55\u5230\u5c0f\u672c\u672c\u4e0a\uff08migrations\u6587\u4ef6\u5939\u5185\uff09 python manage . py migrate # \u5c06\u4fee\u6539\u64cd\u4f5c\u771f\u6b63\u7684\u540c\u6b65\u5230\u6570\u636e\u5e93\u4e2d \u6ce8\u610f\uff1a \u4e0a\u9762\u4e24\u6761\u547d\u4ee4\u5fc5\u987b\u662f\u6210\u53cc\u6210\u5bf9\u51fa\u73b0 \u53ea\u8981\u4fee\u6539\u4e86models\u91cc\u9762\u8ddf\u6570\u636e\u5e93\u76f8\u5173\u7684\u4ee3\u7801 \u4f60\u5c31\u5fc5\u987b\u91cd\u65b0\u6267\u884c\u4e0a\u9762\u4e24\u6761\u547d\u4ee4 \u6a21\u578b\u8868\u5b57\u6bb5\u7684\u589e\u5220\u6539\u67e5 # \u5b57\u6bb5\u7684\u4fee\u6539 # \u76f4\u63a5\u4fee\u6539\u4ee3\u7801 \u7136\u540e\u6267\u884c\u6570\u636e\u5e93\u8fc1\u79fb\u547d\u4ee4\u5373\u53ef \u65b0\u589e\u5b57\u6bb5 \u65b9\u5f0f1 \u8bbe\u7f6e\u9ed8\u8ba4\u503c email = models . EmailField ( default = '123@qq.com' ) \u65b9\u5f0f2 \u5141\u8bb8\u5b57\u6bb5\u4e3a\u7a7a phone = models . BigIntegerField ( null = True ) \u65b9\u5f0f3 \u76f4\u63a5\u5728\u63d0\u793a\u4e2d\u7ed9\u9ed8\u8ba4\u503c \u5b57\u6bb5\u7684\u5220\u9664 # \u76f4\u63a5\u6ce8\u91ca\u6389\u5bf9\u5e94\u7684\u5b57\u6bb5\uff0c\u7136\u540e\u6267\u884c\u6570\u636e\u5e93\u8fc1\u79fb\u547d\u4ee4\uff08\u8c28\u614e\u4f7f\u7528\uff09 \u6a21\u578b\u8868\u6570\u636e\u7684\u589e\u5220\u6539\u67e5 # \u67e5 # data = models . User . objects . filter ( username = username ) # <QuerySet [<User: User object>]> # \u76f8\u5f53\u4e8e select * from user where username='neo' \"\"\" filter\u8fd4\u56de\u7684\u7ed3\u679c\u662f\u4e00\u4e2a\"\u5217\u8868\",\u91cc\u9762\u624d\u662f\u771f\u6b63\u6570\u636e\u5bf9\u8c61 filer\u62ec\u53f7\u5185\u53ef\u4ee5\u653e\u591a\u4e2a\u5173\u952e\u5b57\u53c2\u6570 \u8fd9\u591a\u4e2a\u5173\u952e\u5b57\u53c2\u6570\u5728\u67e5\u8be2\u7684\u65f6\u5019 \u662fand\u5173\u7cfb \"\"\" user_list = models . User . objects . all () \"\"\" \u7ed3\u679c\u662f\u4e00\u4e2a\"\u5217\u8868\"\uff0c\u91cc\u9762\u662f\u4e00\u4e2a\u4e2a\u7684\u6570\u636e\u5bf9\u8c61 \"\"\" \u589e # user_obj = models . User . objects . create ( username = username , password = password ) print ( user_obj , user_obj . username , user_obj . password ) # create\u65b9\u6cd5\u4f1a\u6709\u4e00\u4e2a\u8fd4\u56de\u503c \u8fd4\u56de\u503c\u5c31\u662f\u5f53\u524d\u88ab\u521b\u5efa\u7684\u5bf9\u8c61\u672c\u8eab \u6539 # models . User . objects . filter ( id = edit_id ) . update ( username = username , password = password ) \"\"\" \u6279\u91cf\u64cd\u4f5c \u4f1a\u5c06filter\u67e5\u8be2\u51fa\u6765\u7684\u5217\u8868\u4e2d\u6240\u6709\u7684\u5bf9\u8c61\u5168\u90e8\u66f4\u65b0 \"\"\" \u5220 # models . User . objects . filter ( id = delete_id ) . delete () \"\"\" \u6279\u91cf\u64cd\u4f5c \u4f1a\u5c06filter\u67e5\u8be2\u51fa\u6765\u7684\u5217\u8868\u4e2d\u6240\u6709\u7684\u5bf9\u8c61\u5168\u90e8\u5220\u9664 \"\"\" orm\u8868\u5173\u7cfb\u5982\u4f55\u5efa\u7acb # \u4e00\u5bf9\u4e00 # \u4e00\u5f20\u8868\u7684\u5b57\u6bb5\u4fe1\u606f\u592a\u591a\uff0c\u53ef\u4ee5\u4eba\u4e3a\u5206\u51fa\u4e00\u5f20\u8868 \u4e00\u5bf9\u591a # \u5916\u952e\u5b57\u6bb5\u5efa\u5728 \u591a\u7684\u90a3\u4e00\u65b9 \u591a\u5bf9\u591a # \u591a\u5bf9\u591a\u7684\u5916\u952e\u5173\u7cfb\u9700\u8981\u5efa\u7acb\u7b2c\u4e09\u5f20\u8868\u6765\u4e13\u95e8\u5904\u7406 \u4ee5\u56fe\u4e66\u9986\u91cc\u7cfb\u7edf\u4e3a\u4f8b\uff0c\u521b\u5efa\u56fe\u4e66\u8868\uff0c\u4f5c\u8005\u8868\uff0c\u51fa\u7248\u793e\u8868 \u4ee5\u56fe\u4e66\u7ba1\u7406\u7cfb\u7edf\u4e3a\u4f8b\uff0c\u5728django orm \u5efa\u7acb\u8868\u5173\u7cfb\uff1a \u4e00\u5bf9\u4e00\u7684\u8868\u5173\u7cfb\uff0c\u5916\u952e\u5b57\u6bb5\u5efa\u5728\u4efb\u610f\u4e00\u65b9\u90fd\u53ef\u4ee5\uff0c\u4f46\u662f\u5efa\u8bae\u5efa\u5728\u67e5\u8be2\u9891\u7387\u8f83\u9ad8\u7684\u4e00\u65b9 \u4e66\u4e0e\u51fa\u7248\u793e\u662f\u4e00\u5bf9\u591a\u5173\u7cfb\uff0c\u5e76\u4e14\u4e66\u662f\u591a\u7684\u4e00\u65b9\uff0c\u6240\u4ee5\u5916\u952e\u5b57\u6bb5\u5efa\u5728\u4e66\u8868\u4e2d \u4e66\u4e0e\u4f5c\u8005\u662f\u591a\u5bf9\u591a\u7684\u5173\u7cfb\uff0c \u5916\u952e\u5b57\u6bb5\u5efa\u5728\u4efb\u610f\u4e00\u65b9\u90fd\u53ef\u4ee5\uff0c\u5efa\u8bae\u5efa\u5728\u67e5\u8be2\u9891\u7387\u8f83\u9ad8\u7684\u4e00\u65b9 class Book ( models . Model ): title = models . CharField ( max_length = 32 ) # \u5c0f\u6570\u603b\u5171\u516b\u4f4d\uff0c\u5c0f\u6570\u5360\u4e24\u4f4d price = models . DecimalField ( max_digits = 8 , decimal_places = 2 ) # \u4e66\u4e0e\u51fa\u7248\u793e\u662f\u4e00\u5bf9\u591a\u5173\u7cfb\uff0c\u5e76\u4e14\u4e66\u662f\u591a\u7684\u4e00\u65b9\uff0c\u6240\u4ee5\u5916\u952e\u5b57\u6bb5\u5efa\u5728\u4e66\u8868\u4e2d publish = models . ForeignKey ( to = 'Publish' ) # to\u7528\u6765\u6307\u4ee3\u548c\u54ea\u5f20\u8868\u6709\u5173\u7cfb\uff0c\u9ed8\u8ba4\u5173\u8054\u7684\u5c31\u662f\u4e3b\u952e\u5b57\u6bb5 # \u4e66\u4e0e\u4f5c\u8005\u662f\u591a\u5bf9\u591a\u7684\u5173\u7cfb\uff0c \u5916\u952e\u5b57\u6bb5\u5efa\u5728\u4efb\u610f\u4e00\u65b9\u90fd\u53ef\u4ee5\uff0c\u5efa\u8bae\u5efa\u5728\u67e5\u8be2\u9891\u7387\u8f83\u9ad8\u7684\u4e00\u65b9 author = models . ManyToManyField ( to = 'Author' ) # django orm\u4f1a\u81ea\u52a8\u5e2e\u4f60\u521b\u5efa\u4e66\u548c\u4f5c\u8005\u7684\u7b2c\u4e09\u5f20\u5173\u7cfb\u8868 # author\u8fd9\u4e2a\u5b57\u6bb5\u662f\u4e00\u4e2a\u865a\u62df\u5b57\u6bb5 \u4e0d\u80fd\u5728\u8868\u4e2d\u5c55\u793a\u51fa\u6765\uff0c\u4ec5\u4ec5\u53ea\u662f\u544a\u8bc9orm\uff0c\u5efa\u7acb\u7b2c\u4e09\u5f20\u8868\u5173\u7cfb\u7684\u4f5c\u7528 class Publish ( models . Model ): title = models . CharField ( max_length = 32 ) email = models . EmailField () class Author ( models . Model ): name = models . CharField ( max_length = 32 ) age = models . IntegerField () # \u4e00\u5bf9\u4e00\u7684\u8868\u5173\u7cfb\uff0c\u5916\u952e\u5b57\u6bb5\u5efa\u5728\u4efb\u610f\u4e00\u65b9\u90fd\u53ef\u4ee5\uff0c\u4f46\u662f\u5efa\u8bae\u5efa\u5728\u67e5\u8be2\u9891\u7387\u8f83\u9ad8\u7684\u4e00\u65b9 author_detail = models . OneToOneField ( to = 'Author_detail' ) class Author_detail ( models . Model ): phone = models . BigIntegerField () addr = models . CharField ( max_length = 32 ) \u6ce8\u610f\u70b9\uff1a ''' \u4e00\u5bf9\u591a\u5916\u952e\u5b57\u6bb5 \u521b\u5efa\u7684\u65f6\u5019 \uff0c\u540c\u6b65\u5230\u6570\u636e\u5e93\u4e2d\uff0c\u8868\u5b57\u6bb5\u4f1a\u81ea\u52a8\u52a0_id\u540e\u7f00\uff1b\u5982\u679c\u81ea\u5df1\u52a0\u4e86_id\uff0c\u4f1a\u5728\u540e\u9762\u518d\u52a0\u4e00\u4e2a_id publish = models.ForeignKey(to='Publish')\u9ed8\u8ba4\u5173\u8054\u7684\u662f\u4e3b\u952eid\uff0c\u5982\u679c\u4e3b\u952e\u4e0d\u662fid\uff0c\u8981\u81ea\u5df1\u5173\u8054\uff0c \u53ef\u4ee5\u52a0to_field= \u4e0e\u6307\u5b9a\u5b57\u6bb5\u505a\u5173\u8054 '''","title":"04 django\u8fde\u63a5MySQL\u64cd\u4f5c\u6a21\u578b\u8868"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/04%20django%E8%BF%9E%E6%8E%A5MySQL%E6%93%8D%E4%BD%9C%E6%A8%A1%E5%9E%8B%E8%A1%A8/#djangomysql","text":"","title":"django\u8fde\u63a5MySQL\u64cd\u4f5c\u6a21\u578b\u8868"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/04%20django%E8%BF%9E%E6%8E%A5MySQL%E6%93%8D%E4%BD%9C%E6%A8%A1%E5%9E%8B%E8%A1%A8/#pycharm","text":"pycharm\u4e5f\u53ef\u4ee5\u5145\u5f53MySQL\u7684\u5ba2\u6237\u7aef","title":"pycharm\u8fde\u63a5\u6570\u636e\u5e93"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/04%20django%E8%BF%9E%E6%8E%A5MySQL%E6%93%8D%E4%BD%9C%E6%A8%A1%E5%9E%8B%E8%A1%A8/#djangomysql_1","text":"django\u9ed8\u8ba4\u7684\u6570\u636e\u5e93\u662fsqlite3\uff0c\u6211\u4eec\u6539\u4e3aMySQL\uff0c\u9700\u8981\u4e24\u6b65\u64cd\u4f5c \u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u6539\u6570\u636e\u5e93\u7684\u914d\u7f6e\uff1a DATABASES = { 'default' : { 'ENGINE' : 'django.db.backends.mysql' , # \u6307\u5b9a\u6570\u636e\u5e93 'NAME' : 'test' , # \u6307\u5b9a\u5e93\u7684\u540d\u5b57 'HOST' : '127.0.0.1' , # \u8981\u6ce8\u610f\u952e\u5fc5\u987b\u5927\u5199 'PORT' : 3306 , 'USER' : 'root' , 'PASSWORD' : '123' , 'CHARSET' : 'utf8' } } \u4e3b\u52a8\u544a\u8bc9django \u4e0d\u8981\u7528\u9ed8\u8ba4\u7684mysqldb\u8fde\u63a5 \u800c\u662f\u7528pymysql # \u4f60\u53ef\u4ee5\u5728\u9879\u76ee\u540d\u4e0b\u7684__init__.py\u4e2d\u4e66\u5199 # \u4e5f\u53ef\u4ee5\u5728\u5e94\u7528\u540d\u4e0b\u7684__init__.py\u4e2d\u4e66\u5199 import pymysql pymysql . install_as_MySQLdb ()","title":"django\u8fde\u63a5MySQL"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/04%20django%E8%BF%9E%E6%8E%A5MySQL%E6%93%8D%E4%BD%9C%E6%A8%A1%E5%9E%8B%E8%A1%A8/#django-orm","text":"","title":"django ORM\u7b80\u4ecb"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/04%20django%E8%BF%9E%E6%8E%A5MySQL%E6%93%8D%E4%BD%9C%E6%A8%A1%E5%9E%8B%E8%A1%A8/#orm","text":"\u7c7b \u8868 \u5bf9\u8c61 \u6570\u636e \u5bf9\u8c61.\u5c5e\u6027 \u5b57\u6bb5\u5bf9\u5e94\u7684\u503c \u4e3a\u4ec0\u4e48\u4f7f\u7528ORM \u80fd\u591f\u8ba9\u4e0d\u4f1a\u6570\u636e\u5e93\u64cd\u4f5c\u7684\u4eba\u4e5f\u80fd\u591f\u7b80\u5355\u65b9\u4fbf\u53bb\u64cd\u4f5c\u6570\u636e\u5e93 \u7f3a\u70b9\uff1a \u5c01\u88c5\u7a0b\u5ea6\u592a\u9ad8 \u6709\u65f6\u5019\u4f1a\u51fa\u73b0\u67e5\u8be2\u6548\u7387\u504f\u4f4e\u7684\u95ee\u9898","title":"ORM \u5bf9\u8c61\u5173\u7cfb\u6620\u5c04"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/04%20django%E8%BF%9E%E6%8E%A5MySQL%E6%93%8D%E4%BD%9C%E6%A8%A1%E5%9E%8B%E8%A1%A8/#djangoorm","text":"\u53bb\u5e94\u7528\u4e0b\u7684models.py\u4e2d\u5199\u6570\u636e\u6a21\u578b\u7c7b class User ( models . Model ): # id = models.AutoField(primary_key=True) # django\u5f53\u4f60\u4e0d\u6307\u5b9a\u4e3b\u952e\u7684\u65f6\u5019\uff0c\u4f1a\u81ea\u52a8\u5e2e\u4f60\u521b\u5efa\u4e00\u4e2a\u540d\u4e3aid\u5b57\u6bb5\uff0c\u5e76\u4f5c\u4e3a\u4e3b\u952e # \u5982\u679c\u4f60\u81ea\u5df1\u6307\u5b9a\u4e86\u4e3b\u952e django\u5c31\u4e0d\u4f1a\u518d\u5e2e\u4f60\u521b\u5efa # \u5bf9\u5e94\u7684\u662fvarchar(32) django\u4e2d\u9ed8\u8ba4\u6ca1\u6709char\u5b57\u6bb5\uff0c\u4f46\u652f\u6301\u7528\u6237\u81ea\u5b9a\u4e49 username = models . CharField ( max_length = 32 ) password = models . IntegerField ()","title":"django\u4e2d\u64cd\u4f5cORM"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/04%20django%E8%BF%9E%E6%8E%A5MySQL%E6%93%8D%E4%BD%9C%E6%A8%A1%E5%9E%8B%E8%A1%A8/#_1","text":"python manage . py makemigrations # \u5c06\u6570\u636e\u5e93\u7684\u4fee\u6539 \u8bb0\u5f55\u5230\u5c0f\u672c\u672c\u4e0a\uff08migrations\u6587\u4ef6\u5939\u5185\uff09 python manage . py migrate # \u5c06\u4fee\u6539\u64cd\u4f5c\u771f\u6b63\u7684\u540c\u6b65\u5230\u6570\u636e\u5e93\u4e2d \u6ce8\u610f\uff1a \u4e0a\u9762\u4e24\u6761\u547d\u4ee4\u5fc5\u987b\u662f\u6210\u53cc\u6210\u5bf9\u51fa\u73b0 \u53ea\u8981\u4fee\u6539\u4e86models\u91cc\u9762\u8ddf\u6570\u636e\u5e93\u76f8\u5173\u7684\u4ee3\u7801 \u4f60\u5c31\u5fc5\u987b\u91cd\u65b0\u6267\u884c\u4e0a\u9762\u4e24\u6761\u547d\u4ee4","title":"\u6570\u636e\u5e93\u8fc1\u79fb\u547d\u540d\uff08\u540c\u6b65\uff09"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/04%20django%E8%BF%9E%E6%8E%A5MySQL%E6%93%8D%E4%BD%9C%E6%A8%A1%E5%9E%8B%E8%A1%A8/#_2","text":"","title":"\u6a21\u578b\u8868\u5b57\u6bb5\u7684\u589e\u5220\u6539\u67e5"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/04%20django%E8%BF%9E%E6%8E%A5MySQL%E6%93%8D%E4%BD%9C%E6%A8%A1%E5%9E%8B%E8%A1%A8/#_3","text":"\u76f4\u63a5\u4fee\u6539\u4ee3\u7801 \u7136\u540e\u6267\u884c\u6570\u636e\u5e93\u8fc1\u79fb\u547d\u4ee4\u5373\u53ef \u65b0\u589e\u5b57\u6bb5 \u65b9\u5f0f1 \u8bbe\u7f6e\u9ed8\u8ba4\u503c email = models . EmailField ( default = '123@qq.com' ) \u65b9\u5f0f2 \u5141\u8bb8\u5b57\u6bb5\u4e3a\u7a7a phone = models . BigIntegerField ( null = True ) \u65b9\u5f0f3 \u76f4\u63a5\u5728\u63d0\u793a\u4e2d\u7ed9\u9ed8\u8ba4\u503c","title":"\u5b57\u6bb5\u7684\u4fee\u6539"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/04%20django%E8%BF%9E%E6%8E%A5MySQL%E6%93%8D%E4%BD%9C%E6%A8%A1%E5%9E%8B%E8%A1%A8/#_4","text":"\u76f4\u63a5\u6ce8\u91ca\u6389\u5bf9\u5e94\u7684\u5b57\u6bb5\uff0c\u7136\u540e\u6267\u884c\u6570\u636e\u5e93\u8fc1\u79fb\u547d\u4ee4\uff08\u8c28\u614e\u4f7f\u7528\uff09","title":"\u5b57\u6bb5\u7684\u5220\u9664"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/04%20django%E8%BF%9E%E6%8E%A5MySQL%E6%93%8D%E4%BD%9C%E6%A8%A1%E5%9E%8B%E8%A1%A8/#_5","text":"","title":"\u6a21\u578b\u8868\u6570\u636e\u7684\u589e\u5220\u6539\u67e5"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/04%20django%E8%BF%9E%E6%8E%A5MySQL%E6%93%8D%E4%BD%9C%E6%A8%A1%E5%9E%8B%E8%A1%A8/#_6","text":"data = models . User . objects . filter ( username = username ) # <QuerySet [<User: User object>]> # \u76f8\u5f53\u4e8e select * from user where username='neo' \"\"\" filter\u8fd4\u56de\u7684\u7ed3\u679c\u662f\u4e00\u4e2a\"\u5217\u8868\",\u91cc\u9762\u624d\u662f\u771f\u6b63\u6570\u636e\u5bf9\u8c61 filer\u62ec\u53f7\u5185\u53ef\u4ee5\u653e\u591a\u4e2a\u5173\u952e\u5b57\u53c2\u6570 \u8fd9\u591a\u4e2a\u5173\u952e\u5b57\u53c2\u6570\u5728\u67e5\u8be2\u7684\u65f6\u5019 \u662fand\u5173\u7cfb \"\"\" user_list = models . User . objects . all () \"\"\" \u7ed3\u679c\u662f\u4e00\u4e2a\"\u5217\u8868\"\uff0c\u91cc\u9762\u662f\u4e00\u4e2a\u4e2a\u7684\u6570\u636e\u5bf9\u8c61 \"\"\"","title":"\u67e5"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/04%20django%E8%BF%9E%E6%8E%A5MySQL%E6%93%8D%E4%BD%9C%E6%A8%A1%E5%9E%8B%E8%A1%A8/#_7","text":"user_obj = models . User . objects . create ( username = username , password = password ) print ( user_obj , user_obj . username , user_obj . password ) # create\u65b9\u6cd5\u4f1a\u6709\u4e00\u4e2a\u8fd4\u56de\u503c \u8fd4\u56de\u503c\u5c31\u662f\u5f53\u524d\u88ab\u521b\u5efa\u7684\u5bf9\u8c61\u672c\u8eab","title":"\u589e"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/04%20django%E8%BF%9E%E6%8E%A5MySQL%E6%93%8D%E4%BD%9C%E6%A8%A1%E5%9E%8B%E8%A1%A8/#_8","text":"models . User . objects . filter ( id = edit_id ) . update ( username = username , password = password ) \"\"\" \u6279\u91cf\u64cd\u4f5c \u4f1a\u5c06filter\u67e5\u8be2\u51fa\u6765\u7684\u5217\u8868\u4e2d\u6240\u6709\u7684\u5bf9\u8c61\u5168\u90e8\u66f4\u65b0 \"\"\"","title":"\u6539"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/04%20django%E8%BF%9E%E6%8E%A5MySQL%E6%93%8D%E4%BD%9C%E6%A8%A1%E5%9E%8B%E8%A1%A8/#_9","text":"models . User . objects . filter ( id = delete_id ) . delete () \"\"\" \u6279\u91cf\u64cd\u4f5c \u4f1a\u5c06filter\u67e5\u8be2\u51fa\u6765\u7684\u5217\u8868\u4e2d\u6240\u6709\u7684\u5bf9\u8c61\u5168\u90e8\u5220\u9664 \"\"\"","title":"\u5220"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/04%20django%E8%BF%9E%E6%8E%A5MySQL%E6%93%8D%E4%BD%9C%E6%A8%A1%E5%9E%8B%E8%A1%A8/#orm_1","text":"","title":"orm\u8868\u5173\u7cfb\u5982\u4f55\u5efa\u7acb"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/04%20django%E8%BF%9E%E6%8E%A5MySQL%E6%93%8D%E4%BD%9C%E6%A8%A1%E5%9E%8B%E8%A1%A8/#_10","text":"\u4e00\u5f20\u8868\u7684\u5b57\u6bb5\u4fe1\u606f\u592a\u591a\uff0c\u53ef\u4ee5\u4eba\u4e3a\u5206\u51fa\u4e00\u5f20\u8868","title":"\u4e00\u5bf9\u4e00"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/04%20django%E8%BF%9E%E6%8E%A5MySQL%E6%93%8D%E4%BD%9C%E6%A8%A1%E5%9E%8B%E8%A1%A8/#_11","text":"\u5916\u952e\u5b57\u6bb5\u5efa\u5728 \u591a\u7684\u90a3\u4e00\u65b9","title":"\u4e00\u5bf9\u591a"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/04%20django%E8%BF%9E%E6%8E%A5MySQL%E6%93%8D%E4%BD%9C%E6%A8%A1%E5%9E%8B%E8%A1%A8/#_12","text":"\u591a\u5bf9\u591a\u7684\u5916\u952e\u5173\u7cfb\u9700\u8981\u5efa\u7acb\u7b2c\u4e09\u5f20\u8868\u6765\u4e13\u95e8\u5904\u7406 \u4ee5\u56fe\u4e66\u9986\u91cc\u7cfb\u7edf\u4e3a\u4f8b\uff0c\u521b\u5efa\u56fe\u4e66\u8868\uff0c\u4f5c\u8005\u8868\uff0c\u51fa\u7248\u793e\u8868 \u4ee5\u56fe\u4e66\u7ba1\u7406\u7cfb\u7edf\u4e3a\u4f8b\uff0c\u5728django orm \u5efa\u7acb\u8868\u5173\u7cfb\uff1a \u4e00\u5bf9\u4e00\u7684\u8868\u5173\u7cfb\uff0c\u5916\u952e\u5b57\u6bb5\u5efa\u5728\u4efb\u610f\u4e00\u65b9\u90fd\u53ef\u4ee5\uff0c\u4f46\u662f\u5efa\u8bae\u5efa\u5728\u67e5\u8be2\u9891\u7387\u8f83\u9ad8\u7684\u4e00\u65b9 \u4e66\u4e0e\u51fa\u7248\u793e\u662f\u4e00\u5bf9\u591a\u5173\u7cfb\uff0c\u5e76\u4e14\u4e66\u662f\u591a\u7684\u4e00\u65b9\uff0c\u6240\u4ee5\u5916\u952e\u5b57\u6bb5\u5efa\u5728\u4e66\u8868\u4e2d \u4e66\u4e0e\u4f5c\u8005\u662f\u591a\u5bf9\u591a\u7684\u5173\u7cfb\uff0c \u5916\u952e\u5b57\u6bb5\u5efa\u5728\u4efb\u610f\u4e00\u65b9\u90fd\u53ef\u4ee5\uff0c\u5efa\u8bae\u5efa\u5728\u67e5\u8be2\u9891\u7387\u8f83\u9ad8\u7684\u4e00\u65b9 class Book ( models . Model ): title = models . CharField ( max_length = 32 ) # \u5c0f\u6570\u603b\u5171\u516b\u4f4d\uff0c\u5c0f\u6570\u5360\u4e24\u4f4d price = models . DecimalField ( max_digits = 8 , decimal_places = 2 ) # \u4e66\u4e0e\u51fa\u7248\u793e\u662f\u4e00\u5bf9\u591a\u5173\u7cfb\uff0c\u5e76\u4e14\u4e66\u662f\u591a\u7684\u4e00\u65b9\uff0c\u6240\u4ee5\u5916\u952e\u5b57\u6bb5\u5efa\u5728\u4e66\u8868\u4e2d publish = models . ForeignKey ( to = 'Publish' ) # to\u7528\u6765\u6307\u4ee3\u548c\u54ea\u5f20\u8868\u6709\u5173\u7cfb\uff0c\u9ed8\u8ba4\u5173\u8054\u7684\u5c31\u662f\u4e3b\u952e\u5b57\u6bb5 # \u4e66\u4e0e\u4f5c\u8005\u662f\u591a\u5bf9\u591a\u7684\u5173\u7cfb\uff0c \u5916\u952e\u5b57\u6bb5\u5efa\u5728\u4efb\u610f\u4e00\u65b9\u90fd\u53ef\u4ee5\uff0c\u5efa\u8bae\u5efa\u5728\u67e5\u8be2\u9891\u7387\u8f83\u9ad8\u7684\u4e00\u65b9 author = models . ManyToManyField ( to = 'Author' ) # django orm\u4f1a\u81ea\u52a8\u5e2e\u4f60\u521b\u5efa\u4e66\u548c\u4f5c\u8005\u7684\u7b2c\u4e09\u5f20\u5173\u7cfb\u8868 # author\u8fd9\u4e2a\u5b57\u6bb5\u662f\u4e00\u4e2a\u865a\u62df\u5b57\u6bb5 \u4e0d\u80fd\u5728\u8868\u4e2d\u5c55\u793a\u51fa\u6765\uff0c\u4ec5\u4ec5\u53ea\u662f\u544a\u8bc9orm\uff0c\u5efa\u7acb\u7b2c\u4e09\u5f20\u8868\u5173\u7cfb\u7684\u4f5c\u7528 class Publish ( models . Model ): title = models . CharField ( max_length = 32 ) email = models . EmailField () class Author ( models . Model ): name = models . CharField ( max_length = 32 ) age = models . IntegerField () # \u4e00\u5bf9\u4e00\u7684\u8868\u5173\u7cfb\uff0c\u5916\u952e\u5b57\u6bb5\u5efa\u5728\u4efb\u610f\u4e00\u65b9\u90fd\u53ef\u4ee5\uff0c\u4f46\u662f\u5efa\u8bae\u5efa\u5728\u67e5\u8be2\u9891\u7387\u8f83\u9ad8\u7684\u4e00\u65b9 author_detail = models . OneToOneField ( to = 'Author_detail' ) class Author_detail ( models . Model ): phone = models . BigIntegerField () addr = models . CharField ( max_length = 32 ) \u6ce8\u610f\u70b9\uff1a ''' \u4e00\u5bf9\u591a\u5916\u952e\u5b57\u6bb5 \u521b\u5efa\u7684\u65f6\u5019 \uff0c\u540c\u6b65\u5230\u6570\u636e\u5e93\u4e2d\uff0c\u8868\u5b57\u6bb5\u4f1a\u81ea\u52a8\u52a0_id\u540e\u7f00\uff1b\u5982\u679c\u81ea\u5df1\u52a0\u4e86_id\uff0c\u4f1a\u5728\u540e\u9762\u518d\u52a0\u4e00\u4e2a_id publish = models.ForeignKey(to='Publish')\u9ed8\u8ba4\u5173\u8054\u7684\u662f\u4e3b\u952eid\uff0c\u5982\u679c\u4e3b\u952e\u4e0d\u662fid\uff0c\u8981\u81ea\u5df1\u5173\u8054\uff0c \u53ef\u4ee5\u52a0to_field= \u4e0e\u6307\u5b9a\u5b57\u6bb5\u505a\u5173\u8054 '''","title":"\u591a\u5bf9\u591a"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/05%20MTV%E4%B8%8EMVC%E6%A8%A1%E5%9E%8B/","text":"MTV\u4e0eMVC\u6a21\u578b # MVC\u7b80\u4ecb # MVC\u7684\u5168\u62fc\u4e3aModel-View-Controller\uff0c\u6700\u65e9\u7531TrygveReenskaug\u57281978\u5e74\u63d0\u51fa\uff0c\u662f\u65bd\u4e50\u5e15\u7f57\u5965\u591a\u7814\u7a76\u4e2d\u5fc3(Xerox PARC)\u572820\u4e16\u7eaa80\u5e74\u4ee3\u4e3a\u7a0b\u5e8f\u8bed\u8a00Smalltalk\u53d1\u660e\u7684\u4e00\u79cd\u8f6f\u4ef6\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u662f\u4e3a\u4e86\u5c06\u4f20\u7edf\u7684\u8f93\u5165\uff08input\uff09\u3001\u5904\u7406\uff08processing\uff09\u3001\u8f93\u51fa\uff08output\uff09\u4efb\u52a1\u8fd0\u7528\u5230\u56fe\u5f62\u5316\u7528\u6237\u4ea4\u4e92\u6a21\u578b\u4e2d\u800c\u8bbe\u8ba1\u7684\u3002\u968f\u7740\u6807\u51c6\u8f93\u5165\u8f93\u51fa\u8bbe\u5907\u7684\u51fa\u73b0\uff0c\u5f00\u53d1\u4eba\u5458\u53ea\u9700\u8981\u5c06\u7cbe\u529b\u96c6\u4e2d\u5728\u4e1a\u52a1\u903b\u8f91\u7684\u5206\u6790\u4e0e\u5b9e\u73b0\u4e0a\u3002\u540e\u6765\u88ab\u63a8\u8350\u4e3aOracle\u65d7\u4e0bSun\u516c\u53f8Java EE\u5e73\u53f0\u7684\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u5e76\u4e14\u53d7\u5230\u8d8a\u6765\u8d8a\u591a\u7684\u4f7f\u7528ColdFusion\u548cPHP\u7684\u5f00\u53d1\u8005\u7684\u6b22\u8fce\u3002\u73b0\u5728\u867d\u7136\u4e0d\u518d\u4f7f\u7528\u539f\u6765\u7684\u5206\u5de5\u65b9\u5f0f\uff0c\u4f46\u662f\u8fd9\u79cd\u5206\u5de5\u7684\u601d\u60f3\u88ab\u6cbf\u7528\u4e0b\u6765\uff0c\u5e7f\u6cdb\u5e94\u7528\u4e8e\u8f6f\u4ef6\u5de5\u7a0b\u4e2d\uff0c\u662f\u4e00\u79cd\u5178\u578b\u5e76\u4e14\u5e94\u7528\u5e7f\u6cdb\u7684\u8f6f\u4ef6\u67b6\u6784\u6a21\u5f0f\u3002\u540e\u6765\uff0cMVC\u7684\u601d\u60f3\u88ab\u5e94\u7528\u5728\u4e86\uff37eb\u5f00\u53d1\u65b9\u9762\uff0c\u88ab\u79f0\u4e3a\uff37eb MVC\u6846\u67b6\u3002 MVC\u6846\u67b6\u7684\u6838\u5fc3\u601d\u60f3\u662f\uff1a\u89e3\u8026\uff0c\u8ba9\u4e0d\u540c\u7684\u4ee3\u7801\u5757\u4e4b\u95f4\u964d\u4f4e\u8026\u5408\uff0c\u589e\u5f3a\u4ee3\u7801\u7684\u53ef\u6269\u5c55\u6027\u548c\u53ef\u79fb\u690d\u6027\uff0c\u5b9e\u73b0\u5411\u540e\u517c\u5bb9\u3002 \u5f53\u524d\u4e3b\u6d41\u7684\u5f00\u53d1\u8bed\u8a00\u5982Java\u3001PHP\u3001Python\u4e2d\u90fd\u6709MVC\u6846\u67b6\u3002 \uff37eb MVC\u5404\u90e8\u5206\u7684\u529f\u80fd\uff1a # M\u5168\u62fc\u4e3aModel\uff0c\u4e3b\u8981\u5c01\u88c5\u5bf9\u6570\u636e\u5e93\u5c42\u7684\u8bbf\u95ee\uff0c\u5bf9\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\u8fdb\u884c\u589e\u3001\u5220\u3001\u6539\u3001\u67e5\u64cd\u4f5c\u3002 V\u5168\u62fc\u4e3aView\uff0c\u7528\u4e8e\u5c01\u88c5\u7ed3\u679c\uff0c\u751f\u6210\u9875\u9762\u5c55\u793a\u7684html\u5185\u5bb9\u3002 C\u5168\u62fc\u4e3aController\uff0c\u7528\u4e8e\u63a5\u6536\u8bf7\u6c42\uff0c\u5904\u7406\u4e1a\u52a1\u903b\u8f91\uff0c\u4e0eModel\u548cView\u4ea4\u4e92\uff0c\u8fd4\u56de\u7ed3\u679c\u3002 MTV\u6a21\u578b # Django\uff0c\u53d1\u97f3\u4e3a[`d\u0292\u00e6\u014b\u0261\u0259\u028a]\uff0c\u662f\u7528python\u8bed\u8a00\u5199\u7684\u5f00\u6e90web\u5f00\u53d1\u6846\u67b6\uff0c\u5e76\u9075\u5faaMVC\u8bbe\u8ba1\u3002\u52b3\u4f26\u65af\u51fa\u7248\u96c6\u56e2\u4e3a\u4e86\u5f00\u53d1\u4ee5\u65b0\u95fb\u5185\u5bb9\u4e3a\u4e3b\u7684\u7f51\u7ad9\uff0c\u800c\u5f00\u53d1\u51fa\u6765\u4e86\u8fd9\u4e2a\u6846\u67b6\uff0c\u4e8e2005\u5e747\u6708\u5728BSD\u8bb8\u53ef\u8bc1\u4e0b\u53d1\u5e03\u3002\u8fd9\u4e2a\u540d\u79f0\u6765\u6e90\u4e8e\u6bd4\u5229\u65f6\u7684\u7235\u58eb\u97f3\u4e50\u5bb6DjangoReinhardt\uff0c\u4ed6\u662f\u4e00\u4e2a\u5409\u666e\u8d5b\u4eba\uff0c\u4e3b\u8981\u4ee5\u6f14\u594f\u5409\u5b83\u4e3a\u4e3b\uff0c\u8fd8\u6f14\u594f\u8fc7\u5c0f\u63d0\u7434\u7b49\u3002\u7531\u4e8eDjango\u5728\u8fd1\u5e74\u6765\u7684\u8fc5\u901f\u53d1\u5c55\uff0c\u5e94\u7528\u8d8a\u6765\u8d8a\u5e7f\u6cdb\uff0c\u88ab\u8457\u540dIT\u5f00\u53d1\u6742\u5fd7SDTimes\u8bc4\u9009\u4e3a2013SDTimes100\uff0c\u4f4d\u5217\"API\u3001\u5e93\u548c\u6846\u67b6\"\u5206\u7c7b\u7b2c6\u4f4d\uff0c\u88ab\u8ba4\u4e3a\u662f\u8be5\u9886\u57df\u7684\u4f7c\u4f7c\u8005\u3002Django\u7684\u4e3b\u8981\u76ee\u7684\u662f\u7b80\u4fbf\u3001\u5feb\u901f\u7684\u5f00\u53d1\u6570\u636e\u5e93\u9a71\u52a8\u7684\u7f51\u7ad9\u3002\u5b83\u5f3a\u8c03\u4ee3\u7801\u590d\u7528\uff0c\u591a\u4e2a\u7ec4\u4ef6\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u4ee5\"\u63d2\u4ef6\"\u5f62\u5f0f\u670d\u52a1\u4e8e\u6574\u4e2a\u6846\u67b6\uff0cDjango\u6709\u8bb8\u591a\u529f\u80fd\u5f3a\u5927\u7684\u7b2c\u4e09\u65b9\u63d2\u4ef6\uff0c\u4f60\u751a\u81f3\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u5f00\u53d1\u51fa\u81ea\u5df1\u7684\u5de5\u5177\u5305\u3002\u8fd9\u4f7f\u5f97Django\u5177\u6709\u5f88\u5f3a\u7684\u53ef\u6269\u5c55\u6027\u3002\u5b83\u8fd8\u5f3a\u8c03\u5feb\u901f\u5f00\u53d1\u548cDRY(DoNotRepeatYourself)\u539f\u5219\u3002 Django\u6846\u67b6\u9075\u5faaMVC\u8bbe\u8ba1\uff0c\u5e76\u4e14\u6709\u4e00\u4e2a\u4e13\u6709\u540d\u8bcd\uff1aMVT MVT\u5404\u90e8\u5206\u7684\u529f\u80fd # M\u5168\u62fc\u4e3aModel\uff0c\u4e0eMVC\u4e2d\u7684M\u529f\u80fd\u76f8\u540c\uff0c\u8d1f\u8d23\u548c\u6570\u636e\u5e93\u4ea4\u4e92\uff0c\u8fdb\u884c\u6570\u636e\u5904\u7406\u3002 V\u5168\u62fc\u4e3aView\uff0c\u4e0eMVC\u4e2d\u7684C\u529f\u80fd\u76f8\u540c\uff0c\u63a5\u6536\u8bf7\u6c42\uff0c\u8fdb\u884c\u4e1a\u52a1\u5904\u7406\uff0c\u8fd4\u56de\u5e94\u7b54\u3002 T\u5168\u62fc\u4e3aTemplate\uff0c\u4e0eMVC\u4e2d\u7684V\u529f\u80fd\u76f8\u540c\uff0c\u8d1f\u8d23\u5c01\u88c5\u6784\u9020\u8981\u8fd4\u56de\u7684html\u3002 \u5dee\u5f02\u5c31\u5728\u4e8e\u9ed1\u7ebf\u9ed1\u7bad\u5934\u6807\u8bc6\u51fa\u6765\u7684\u90e8\u5206","title":"05 MTV\u4e0eMVC\u6a21\u578b"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/05%20MTV%E4%B8%8EMVC%E6%A8%A1%E5%9E%8B/#mtvmvc","text":"","title":"MTV\u4e0eMVC\u6a21\u578b"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/05%20MTV%E4%B8%8EMVC%E6%A8%A1%E5%9E%8B/#mvc","text":"MVC\u7684\u5168\u62fc\u4e3aModel-View-Controller\uff0c\u6700\u65e9\u7531TrygveReenskaug\u57281978\u5e74\u63d0\u51fa\uff0c\u662f\u65bd\u4e50\u5e15\u7f57\u5965\u591a\u7814\u7a76\u4e2d\u5fc3(Xerox PARC)\u572820\u4e16\u7eaa80\u5e74\u4ee3\u4e3a\u7a0b\u5e8f\u8bed\u8a00Smalltalk\u53d1\u660e\u7684\u4e00\u79cd\u8f6f\u4ef6\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u662f\u4e3a\u4e86\u5c06\u4f20\u7edf\u7684\u8f93\u5165\uff08input\uff09\u3001\u5904\u7406\uff08processing\uff09\u3001\u8f93\u51fa\uff08output\uff09\u4efb\u52a1\u8fd0\u7528\u5230\u56fe\u5f62\u5316\u7528\u6237\u4ea4\u4e92\u6a21\u578b\u4e2d\u800c\u8bbe\u8ba1\u7684\u3002\u968f\u7740\u6807\u51c6\u8f93\u5165\u8f93\u51fa\u8bbe\u5907\u7684\u51fa\u73b0\uff0c\u5f00\u53d1\u4eba\u5458\u53ea\u9700\u8981\u5c06\u7cbe\u529b\u96c6\u4e2d\u5728\u4e1a\u52a1\u903b\u8f91\u7684\u5206\u6790\u4e0e\u5b9e\u73b0\u4e0a\u3002\u540e\u6765\u88ab\u63a8\u8350\u4e3aOracle\u65d7\u4e0bSun\u516c\u53f8Java EE\u5e73\u53f0\u7684\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u5e76\u4e14\u53d7\u5230\u8d8a\u6765\u8d8a\u591a\u7684\u4f7f\u7528ColdFusion\u548cPHP\u7684\u5f00\u53d1\u8005\u7684\u6b22\u8fce\u3002\u73b0\u5728\u867d\u7136\u4e0d\u518d\u4f7f\u7528\u539f\u6765\u7684\u5206\u5de5\u65b9\u5f0f\uff0c\u4f46\u662f\u8fd9\u79cd\u5206\u5de5\u7684\u601d\u60f3\u88ab\u6cbf\u7528\u4e0b\u6765\uff0c\u5e7f\u6cdb\u5e94\u7528\u4e8e\u8f6f\u4ef6\u5de5\u7a0b\u4e2d\uff0c\u662f\u4e00\u79cd\u5178\u578b\u5e76\u4e14\u5e94\u7528\u5e7f\u6cdb\u7684\u8f6f\u4ef6\u67b6\u6784\u6a21\u5f0f\u3002\u540e\u6765\uff0cMVC\u7684\u601d\u60f3\u88ab\u5e94\u7528\u5728\u4e86\uff37eb\u5f00\u53d1\u65b9\u9762\uff0c\u88ab\u79f0\u4e3a\uff37eb MVC\u6846\u67b6\u3002 MVC\u6846\u67b6\u7684\u6838\u5fc3\u601d\u60f3\u662f\uff1a\u89e3\u8026\uff0c\u8ba9\u4e0d\u540c\u7684\u4ee3\u7801\u5757\u4e4b\u95f4\u964d\u4f4e\u8026\u5408\uff0c\u589e\u5f3a\u4ee3\u7801\u7684\u53ef\u6269\u5c55\u6027\u548c\u53ef\u79fb\u690d\u6027\uff0c\u5b9e\u73b0\u5411\u540e\u517c\u5bb9\u3002 \u5f53\u524d\u4e3b\u6d41\u7684\u5f00\u53d1\u8bed\u8a00\u5982Java\u3001PHP\u3001Python\u4e2d\u90fd\u6709MVC\u6846\u67b6\u3002","title":"MVC\u7b80\u4ecb"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/05%20MTV%E4%B8%8EMVC%E6%A8%A1%E5%9E%8B/#web-mvc","text":"M\u5168\u62fc\u4e3aModel\uff0c\u4e3b\u8981\u5c01\u88c5\u5bf9\u6570\u636e\u5e93\u5c42\u7684\u8bbf\u95ee\uff0c\u5bf9\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\u8fdb\u884c\u589e\u3001\u5220\u3001\u6539\u3001\u67e5\u64cd\u4f5c\u3002 V\u5168\u62fc\u4e3aView\uff0c\u7528\u4e8e\u5c01\u88c5\u7ed3\u679c\uff0c\u751f\u6210\u9875\u9762\u5c55\u793a\u7684html\u5185\u5bb9\u3002 C\u5168\u62fc\u4e3aController\uff0c\u7528\u4e8e\u63a5\u6536\u8bf7\u6c42\uff0c\u5904\u7406\u4e1a\u52a1\u903b\u8f91\uff0c\u4e0eModel\u548cView\u4ea4\u4e92\uff0c\u8fd4\u56de\u7ed3\u679c\u3002","title":"\uff37eb MVC\u5404\u90e8\u5206\u7684\u529f\u80fd\uff1a"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/05%20MTV%E4%B8%8EMVC%E6%A8%A1%E5%9E%8B/#mtv","text":"Django\uff0c\u53d1\u97f3\u4e3a[`d\u0292\u00e6\u014b\u0261\u0259\u028a]\uff0c\u662f\u7528python\u8bed\u8a00\u5199\u7684\u5f00\u6e90web\u5f00\u53d1\u6846\u67b6\uff0c\u5e76\u9075\u5faaMVC\u8bbe\u8ba1\u3002\u52b3\u4f26\u65af\u51fa\u7248\u96c6\u56e2\u4e3a\u4e86\u5f00\u53d1\u4ee5\u65b0\u95fb\u5185\u5bb9\u4e3a\u4e3b\u7684\u7f51\u7ad9\uff0c\u800c\u5f00\u53d1\u51fa\u6765\u4e86\u8fd9\u4e2a\u6846\u67b6\uff0c\u4e8e2005\u5e747\u6708\u5728BSD\u8bb8\u53ef\u8bc1\u4e0b\u53d1\u5e03\u3002\u8fd9\u4e2a\u540d\u79f0\u6765\u6e90\u4e8e\u6bd4\u5229\u65f6\u7684\u7235\u58eb\u97f3\u4e50\u5bb6DjangoReinhardt\uff0c\u4ed6\u662f\u4e00\u4e2a\u5409\u666e\u8d5b\u4eba\uff0c\u4e3b\u8981\u4ee5\u6f14\u594f\u5409\u5b83\u4e3a\u4e3b\uff0c\u8fd8\u6f14\u594f\u8fc7\u5c0f\u63d0\u7434\u7b49\u3002\u7531\u4e8eDjango\u5728\u8fd1\u5e74\u6765\u7684\u8fc5\u901f\u53d1\u5c55\uff0c\u5e94\u7528\u8d8a\u6765\u8d8a\u5e7f\u6cdb\uff0c\u88ab\u8457\u540dIT\u5f00\u53d1\u6742\u5fd7SDTimes\u8bc4\u9009\u4e3a2013SDTimes100\uff0c\u4f4d\u5217\"API\u3001\u5e93\u548c\u6846\u67b6\"\u5206\u7c7b\u7b2c6\u4f4d\uff0c\u88ab\u8ba4\u4e3a\u662f\u8be5\u9886\u57df\u7684\u4f7c\u4f7c\u8005\u3002Django\u7684\u4e3b\u8981\u76ee\u7684\u662f\u7b80\u4fbf\u3001\u5feb\u901f\u7684\u5f00\u53d1\u6570\u636e\u5e93\u9a71\u52a8\u7684\u7f51\u7ad9\u3002\u5b83\u5f3a\u8c03\u4ee3\u7801\u590d\u7528\uff0c\u591a\u4e2a\u7ec4\u4ef6\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u4ee5\"\u63d2\u4ef6\"\u5f62\u5f0f\u670d\u52a1\u4e8e\u6574\u4e2a\u6846\u67b6\uff0cDjango\u6709\u8bb8\u591a\u529f\u80fd\u5f3a\u5927\u7684\u7b2c\u4e09\u65b9\u63d2\u4ef6\uff0c\u4f60\u751a\u81f3\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u5f00\u53d1\u51fa\u81ea\u5df1\u7684\u5de5\u5177\u5305\u3002\u8fd9\u4f7f\u5f97Django\u5177\u6709\u5f88\u5f3a\u7684\u53ef\u6269\u5c55\u6027\u3002\u5b83\u8fd8\u5f3a\u8c03\u5feb\u901f\u5f00\u53d1\u548cDRY(DoNotRepeatYourself)\u539f\u5219\u3002 Django\u6846\u67b6\u9075\u5faaMVC\u8bbe\u8ba1\uff0c\u5e76\u4e14\u6709\u4e00\u4e2a\u4e13\u6709\u540d\u8bcd\uff1aMVT","title":"MTV\u6a21\u578b"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/05%20MTV%E4%B8%8EMVC%E6%A8%A1%E5%9E%8B/#mvt","text":"M\u5168\u62fc\u4e3aModel\uff0c\u4e0eMVC\u4e2d\u7684M\u529f\u80fd\u76f8\u540c\uff0c\u8d1f\u8d23\u548c\u6570\u636e\u5e93\u4ea4\u4e92\uff0c\u8fdb\u884c\u6570\u636e\u5904\u7406\u3002 V\u5168\u62fc\u4e3aView\uff0c\u4e0eMVC\u4e2d\u7684C\u529f\u80fd\u76f8\u540c\uff0c\u63a5\u6536\u8bf7\u6c42\uff0c\u8fdb\u884c\u4e1a\u52a1\u5904\u7406\uff0c\u8fd4\u56de\u5e94\u7b54\u3002 T\u5168\u62fc\u4e3aTemplate\uff0c\u4e0eMVC\u4e2d\u7684V\u529f\u80fd\u76f8\u540c\uff0c\u8d1f\u8d23\u5c01\u88c5\u6784\u9020\u8981\u8fd4\u56de\u7684html\u3002 \u5dee\u5f02\u5c31\u5728\u4e8e\u9ed1\u7ebf\u9ed1\u7bad\u5934\u6807\u8bc6\u51fa\u6765\u7684\u90e8\u5206","title":"MVT\u5404\u90e8\u5206\u7684\u529f\u80fd"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/06%20django%E4%B9%8B%E8%B7%AF%E7%94%B1%E5%B1%82/","text":"django\u4e4b\u8def\u7531\u5c42 # django\u8bf7\u6c42\u751f\u547d\u5468\u671f\u6d41\u7a0b\u56fe # wsgi\u2014\u4e2d\u95f4\u4ef6\u2014\u8def\u7531----\u89c6\u56fe\u2014\u4e2d\u95f4\u4ef6\u2014wsgi url.py\u8def\u7531\u5c42 # urlpatterns = [ url ( r '^admin/' , admin . site . urls ), url ( r 'test/' , views . test ), url ( r 'testadd/' , views . testadd ) ] \u5982\u679curl.py\u8fd9\u6837\u5199\uff0c test \u548c testadd \u540e\u7f00\u7684\u8bbf\u95ee\u8def\u5f84\uff0c\u8fd4\u56de\u7684\u5185\u5bb9\u662f\u4e00\u6837\u7684\uff0c\u539f\u56e0\u5982\u4e0b\uff1a url\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f \u4e00\u65e6\u6b63\u7acb\u523b\u7ed3\u675f\u5219\u8868\u8fbe\u5f0f\u80fd\u591f\u5339\u914d\u5230\u5185\u5bb9\uff0c\u4f1a\u7acb\u523b\u7ed3\u675f\u5339\u914d\u5173\u7cfb\uff0c\u76f4\u63a5\u6267\u884c\u540e\u9762\u5bf9\u5e94\u7684\u51fd\u6570 \u8def\u7531\u5339\u914d # \u542f\u52a8django\uff0c\u5728\u6d4f\u89c8\u5668\u8f93\u5165 127.0.0.1:8000/test \uff0cdjango\u4f1a\u81ea\u52a8\u52a0\u659c\u6760\u3002 django\u5339\u914d\u8def\u7531\u89c4\u5f8b # \u4e0d\u52a0\u659c\u6760( 127.0.0.1:8000/test )\uff0c\u5148\u5339\u914d\u4e00\u6b21\u8bd5\u8bd5\uff0c\u5982\u679c\u5339\u914d\u4e0d\u4e0a\uff0c\u4f1a\u8ba9\u6d4f\u89c8\u5668\u91cd\u5b9a\u5411\uff0c\u52a0\u4e00\u4e2a\u659c\u6760( 127.0.0.1:8000/test/ )\u518d\u6765\u4e00\u6b21\u5339\u914d\uff0c\u5982\u679c\u8fd8\u5339\u914d\u4e0d\u4e0a\uff0c\u624d\u4f1a\u62a5\u9519\u3002 \u53d6\u6d88django\u81ea\u52a8\u8ba9\u6d4f\u89c8\u5668\u52a0\u659c\u6760\u7684\u529f\u80fd # \u5728\u914d\u7f6e\u6587\u4ef6\u4e2dsettings.py\u4e2d\u6dfb\u52a0: APPEND_SLASH = False # \u8be5\u53c2\u6570\u9ed8\u8ba4\u4e3aTrue \u9650\u5236\u6307\u5b9a\u8f93\u5165\u7684url # urlpatterns = [ url ( r '^admin/' , admin . site . urls ), # url\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f url ( r '^test/$' , views . test ), # \u4e00\u65e6\u6b63\u7acb\u523b\u7ed3\u675f\u5219\u8868\u8fbe\u5f0f\u80fd\u591f\u5339\u914d\u5230\u5185\u5bb9\uff0c\u4f1a\u7acb\u523b\u7ed3\u675f\u5339\u914d\u5173\u7cfb\uff0c\u76f4\u63a5\u6267\u884c\u540e\u9762\u5bf9\u5e94\u7684\u51fd\u6570 url ( r '^testadd/$' , views . testadd ) ] \u8fd9\u6837\u8bbe\u7f6e\uff0c\u53ea\u80fd\u8f93\u5165 127.0.0.1:8000/test/ \u6216 127.0.0.1:8000/testadd/ \u6ce8\u610f\uff1a\u8def\u7531\u5339\u914d\u53ea\u662f\u5339\u914dURL\u90e8\u5206\uff0c\u4e0d\u5339\u914dget\u643a\u5e26\u7684\u53c2\u6570 ?\u540e\u9762\u7684\u53c2\u6570 \u65e0\u540d\u5206\u7ec4 # \u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u65e0\u540d\u5206\u7ec4 urlpatterns = [ url ( r '^admin/' , admin . site . urls ), url ( r '^test/([0-9] {4} )' , views . test ), # \u8868\u793atest\u540e\u9762\u8ddf4\u4e2a\u6570\u5b57 url ( r '^testadd/' , views . testadd ) ] \u5f53\u4f60\u7684\u8def\u7531\u4e2d\u6709\u5206\u7ec4\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u90a3\u4e48\u5728\u5339\u914d\u5230\u5185\u5bb9\u6267\u884c\u89c6\u56fe\u51fd\u6570\u7684\u65f6\u5019\uff0c\u4f1a\u5c06\u5206\u7ec4\u5185\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u5230\u7684\u5185\u5bb9\u5f53\u4f5c \u4f4d\u7f6e\u53c2\u6570 \u4f20\u9012\u7ed9\u89c6\u56fe\u51fd\u6570\u3002 # \u5728\u89c6\u56fe\u51fd\u6570 def test ( request , xxx ): print ( '\u591a\u4f59\u7684\u53c2\u6570:' , xxx ) return HttpResponse ( 'test view' ) \u5f53\u4f60\u7684\u8def\u7531\u4e2d\u6709\u5206\u7ec4\u5e76\u4e14\u7ed9\u5206\u7ec4\u8d77\u4e86\u522b\u540d\uff0c\u90a3\u4e48\u5728\u5339\u914d\u5185\u5bb9\u7684\u65f6\u5019\uff0c\u4f1a\u5c06\u5206\u7ec4\u5185\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u5230\u7684\u5185\u5bb9\u5f53\u4f5c \u5173\u952e\u5b57\u53c2\u6570 \u4f20\u9012\u7ed9\u89c6\u56fe\u51fd\u6570 # \u5728\u89c6\u56fe\u51fd\u6570 def test ( request , year ): print ( '\u591a\u4f59\u7684\u53c2\u6570:' , year ) return HttpResponse ( 'test view' ) \u8fd9\u6837\u5c31\u53ef\u4ee5\u5229\u7528\u6709\u540d\u548c\u65e0\u540d\u5206\u7ec4\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u8c03\u7528\u89c6\u56fe\u51fd\u6570\u4e4b\u524d\u7ed9\u51fd\u6570\u4f20\u9012\u989d\u5916\u7684\u53c2\u6570 \u6ce8\u610f\uff1a\u6709\u540d\u5206\u7ec4\u548c\u65e0\u540d\u5206\u7ec4\u4e0d\u80fd\u6df7\u5408\u4f7f\u7528\uff0c\u4f46\u662f\u540c\u4e00\u60c5\u51b5\u4e0b\uff0c\u65e0\u540d\u5206\u7ec4\u53ef\u4ee5\u4f7f\u7528\u591a\u6b21\uff0c\u6709\u540d\u5206\u7ec4\u4e5f\u53ef\u4ee5\u4f7f\u7528\u591a\u6b21 \u53cd\u5411\u89e3\u6790 # \u4e3e\u4e2a\u4f8b\u5b50\uff1a # urls.py urlpatterns = [ url ( r '^admin/' , admin . site . urls ), url ( r '^test/(\\d+)/' , views . test ), url ( r '^testadd/(?P<year>\\d+)/' , views . testadd ), url ( r '^index/' , views . index ), url ( r '^home/' , views . home ), ] # views.py def index ( request ): return render ( request , 'index.html' ) def home ( request ): return HttpResponse ( 'home' ) \u5728\u4e0a\u8ff0\u4ee3\u7801\u4e2d\uff0c index.html \u9875\u9762\u4e2d\u6709\u5f88\u591a\u8df3\u8f6c\u7684\u94fe\u63a5\uff0c\u90fd\u6307\u5411 home \u8def\u7531\u3002\u5982\u679c\u50cf\u6539\u53d8 home \u7684url\u5730\u5740\uff0c\u90a3\u4e48 index.html \u9875\u9762\u4e2d\u7684\u5f88\u591a\u8df3\u8f6c home \u7684\u94fe\u63a5\u90fd\u6709\u6539\u53d8\uff0c\u6709\u6ca1\u6709\u52a8\u6001\u7ed1\u5b9aurl\u5730\u5740\u7684\u65b9\u6cd5\u5462\uff1f\u53cd\u5411\u89e3\u6790\u5c31\u662f\u3002 \u5b9a\u4e49 # \u53cd\u5411\u89e3\u6790\uff1a\u6839\u636e\u4e00\u4e2a\u522b\u540d\uff0c\u52a8\u6001\u89e3\u6790\u51fa\u4e00\u4e2a\u7ed3\u679c\uff0c\u8be5\u7ed3\u679c\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u5bf9\u5e94\u7684url \u8def\u7531\u4e2d\u6ca1\u6709\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u76f4\u63a5\u5c31\u662f\u5199\u6b7b\u7684 # url ( r '^home/' , views . home , name = 'xxx' ), # \u7ed9\u8def\u7531\u4e0e\u89c6\u56fe\u51fd\u6570\u5bf9\u5e94\u5173\u7cfb\u8d77\u522b\u540d \u524d\u7aef\u53cd\u5411\u89e3\u6790 # < p >< a href = \"{% url 'xxx'%}\" > 111 </ a ></ p > \u540e\u7aef\u53cd\u5411\u89e3\u6790 # from django.shortcuts import render , HttpResponse , redirect , reverse def get_url ( request ): url = reverse ( 'xxx' ) print ( url ) return HttpResponse ( 'get_url' ) \u65e0\u540d\u5206\u7ec4\u7684\u53cd\u5411\u89e3\u6790 # \u5728\u89e3\u6790\u7684\u65f6\u5019\uff0c\u4f60\u9700\u8981\u624b\u52a8\u6307\u5b9a\u6b63\u5219\u5339\u914d\u5185\u5bb9\u7684\u662f\u4ec0\u4e48 url ( r '^home/(\\d+)/' , views . home , name = 'xxx' ), \u524d\u7aef\u53cd\u5411\u89e3\u6790 # < p >< a href = \"{% url 'xxx' 12 %}\" > 111 </ a ></ p > \u540e\u7aef\u53cd\u5411\u89e3\u6790 # def get_url ( request ): url = reverse ( 'xxx' , args = ( 1 ,)) url2 = reverse ( 'xxx' , args = ( 1231 ,)) print ( url ) print ( url2 ) return HttpResponse ( 'get_url' ) \u624b\u52a8\u4f20\u5165\u7684\u53c2\u6570 \u53ea\u9700\u8981\u6ee1\u8db3 \u80fd\u591f\u88ab\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u5373\u53ef \u6709\u540d\u5206\u7ec4\u7684\u53cd\u5411\u89e3\u6790 # url(r'^home/(?P<year>\\d+)/', views.home, name='xxx'), \u524d\u7aef\u53cd\u5411\u89e3\u6790 # \u53ef\u4ee5\u76f4\u63a5\u7528\u65e0\u540d\u5206\u7ec4\u7684\u60c5\u51b5 < p >< a href = \"{% url 'xxx' 12 %}\" > 111 </ a ></ p > \u89c4\u8303\u7684\u5199\u6cd5\uff1a < p >< a href = \"{% url 'xxx' year=121 %}\" > 111 </ a ></ p > \u540e\u7aef\u53cd\u5411\u89e3\u6790 # \u53ef\u4ee5\u76f4\u63a5\u7528\u65e0\u540d\u5206\u7ec4\u7684\u60c5\u51b5 \u4e5f\u53ef\u4ee5\u89c4\u8303\u5199\uff1a def get_url ( request ): url = reverse ( 'xxx' , kwargs = { 'year' : 13123 }) print ( url ) return HttpResponse ( 'get_url' ) \u4ee5\u7f16\u8f91\u529f\u80fd\u4e3a\u4f8b\uff0c\u53cd\u5411\u89e3\u6790\u7684\u5e94\u7528 # # urls.py url = ( r '^edit_user/(\\d+)/' , views . edit_user , name = 'edit' ) # views.py def edit_user ( request , edit_id ): # edit_id\u5c31\u662f\u7528\u6237\u60f3\u8981\u7f16\u8f91\u6570\u636e\u4e3b\u952e\u503c pass <!--\u9875\u9762--> {% for user_obj in user_list %} < a href = '/edit_user/{{user_obj.id}}/' > \u7f16\u8f91 </ a > < a href = '{% url ' edit ' user_obj . id %}' > \u7f16\u8f91 </ a > {% endfor %} \u8def\u7531\u5206\u53d1 # \u524d\u63d0\uff1a ''' \u5728django\u4e2d\u6240\u6709\u7684app\u90fd\u53ef\u4ee5\u6709\u81ea\u5df1\u72ec\u7acb\u7684urls.py \\ templates \\ static. \u6b63\u662f\u7531\u4e8e\u4e0a\u9762\u7684\u7279\u70b9 \u4f60\u7528django\u5f00\u53d1\u9879\u76ee\u5c31\u80fd\u591f\u5b8c\u5168\u505a\u5230\u591a\u4eba\u5206\u7ec4\u5f00\u53d1 \u4e92\u76f8\u4e0d\u5e72\u6270,\u6bcf\u4e2a\u4eba\u53ea\u5f00\u53d1\u81ea\u5df1\u7684app. \u5c0f\u7ec4\u957f\u53ea\u9700\u8981\u5c06\u6240\u6709\u4eba\u5f00\u53d1\u7684app\u6574\u5408\u5230\u4e00\u4e2a\u7a7a\u7684django\u9879\u76ee\u91cc\u9762, \u7136\u540e\u5728settings\u914d\u7f6e\u6587\u4ef6\u6ce8\u518c \u518d\u5229\u7528\u8def\u7531\u5206\u53d1\u5c06\u591a\u4e2aapp\u6574\u5408\u5230\u4e00\u8d77\u5373\u53ef\u5b8c\u6210\u5927\u9879\u76ee\u7684\u62fc\u63a5 ''' \u8def\u7531\u5206\u53d1\u89e3\u51b3\u7684\u5c31\u662f \u9879\u76ee\u7684\u603b\u8def\u7531 \u5339\u914d\u5173\u7cfb\u8fc7\u591a\u7684\u60c5\u51b5\u3002\u4f7f\u7528\u8def\u7531\u5206\u53d1\uff0c \u4f1a\u51fa\u73b0\uff1a \u603b\u8def\u7531\u4e0d\u518d\u505a\u5339\u914d\u7684\u6d3b \u800c\u4ec5\u4ec5\u662f\u505a\u4efb\u52a1\u5206\u53d1 \u8bf7\u6c42\u6765\u4e86\u4e4b\u540e \u603b\u8def\u7531\u4e0d\u505a\u5bf9\u5e94\u5173\u7cfb\uff0c\u53ea\u8be2\u95ee\u4f60\u8981\u8bbf\u95ee\u54ea\u4e2aapp\u7684\u529f\u80fd \u7136\u540e\u5c06\u8bf7\u6c42\u8f6c\u53d1\u7ed9\u5bf9\u5e94\u7684app\u53bb\u5904\u7406 \u603b\u8def\u7531 (include) # \u53ea\u9700\u8981\u5c06\u6240\u6709\u7684app\u7684urls.py\u5bfc\u5165\u5373\u53ef from django.conf.urls import url , include from app01 import urls as app01_urls from app02 import urls as app02_urls urlpatterns = [ url ( r '^app01/' , include ( app01_urls )), url ( r '^app02/' , include ( app02_urls )), ] # \u8def\u7531\u5206\u53d1 \u5b50\u8def\u7531 # # app01 urls.py from django.conf.urls import url from app01 import views urlpatterns = [ url ( r '^reg/' , views . reg ), ] # app02 urls.py from django.conf.urls import url from app02 import views urlpatterns = [ url ( r '^reg/' , views . reg ), ] \u6700\u7701\u4e8b\u7684\u5199\u6cd5\uff1a # \u8fde\u5bfc\u5165\u90fd\u4e0d\u9700\u8981 url ( r '^app01/' , include ( 'app01.urls' )), url ( r '^app02/' , include ( 'app02.urls' )) \u540d\u79f0\u7a7a\u95f4 (namespace) # \u5f53\u591a\u4e2aapp\u4e2d\u51fa\u73b0\u4e86\u8d77\u522b\u540d\u51b2\u7a81\u7684\u60c5\u51b5 \u4f60\u5728\u505a\u8def\u7531\u5206\u53d1\u7684\u65f6\u5019 \u53ef\u4ee5\u7ed9\u6bcf\u4e00\u4e2aapp\u521b\u5efa\u4e00\u4e2a\u540d\u79f0\u7a7a\u95f4\u3002 \u7136\u540e\u5728\u53cd\u5411\u89e3\u6790\u7684\u65f6\u5019 \u53ef\u4ee5\u9009\u62e9\u5230\u5e95\u53bb\u54ea\u4e2a\u540d\u79f0\u7a7a\u95f4\u4e2d\u67e5\u627e\u522b\u540d \u5728\u603b\u8def\u7531\u4e2d\uff1a url ( r '^app01/' , include ( 'app01.urls' , namespace = 'app01' )), url ( r '^app02/' , include ( 'app02.urls' , namespace = 'app02' )) \u524d\u7aef\uff1a < a href = \"{% url 'app01:reg' %}\" ></ a > < a href = \"{% url 'app02:reg' %}\" ></ a > \u540e\u7aef\uff1a print ( reverse ( 'app01:reg' )) print ( reverse ( 'app02:reg' )) \u4f46\u662f\u4e5f\u53ef\u4ee5\u4e0d\u7528\uff0c\u4f60\u53ea\u8981 \u4fdd\u8bc1\u8d77\u522b\u540d\u7684\u65f6\u5019\uff0c\u5728\u6574\u4e2adjango\u9879\u76ee\u4e2d\u4e0d\u51b2\u7a81\u5373\u53ef django\u540e\u7aef\u83b7\u53d6\u6587\u4ef6\u5bf9\u8c61 # form\u8868\u8fbe\u4f20\u6587\u4ef6\u9700\u8981\u6ce8\u610f\u7684\u4e8b\u9879 method\u5fc5\u987b\u6539\u6210post enctype\u6539\u4e3aformdata\u683c\u5f0f # urls.py from django.conf.urls import url from app02 import views urlpatterns = [ url ( r '^upload/' , views . upload ) ] # views.py def upload ( request ): if request . method == 'POST' : print ( request . FILES ) # django\u4f1a\u5c06\u6587\u4ef6\u7c7b\u578b\u7684\u6570\u636e\u81ea\u52a8\u653e\u5165request.FILES file_obj = request . FILES . get ( 'myfile' ) # \u6587\u4ef6\u5bf9\u8c61 # print(file_obj) # print(file_obj.name) with open ( file_obj . name , 'wb' ) as f : for line in file_obj : f . write ( line ) return render ( request , 'upload.html' )","title":"06 django\u4e4b\u8def\u7531\u5c42"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/06%20django%E4%B9%8B%E8%B7%AF%E7%94%B1%E5%B1%82/#django","text":"","title":"django\u4e4b\u8def\u7531\u5c42"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/06%20django%E4%B9%8B%E8%B7%AF%E7%94%B1%E5%B1%82/#django_1","text":"wsgi\u2014\u4e2d\u95f4\u4ef6\u2014\u8def\u7531----\u89c6\u56fe\u2014\u4e2d\u95f4\u4ef6\u2014wsgi","title":"django\u8bf7\u6c42\u751f\u547d\u5468\u671f\u6d41\u7a0b\u56fe"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/06%20django%E4%B9%8B%E8%B7%AF%E7%94%B1%E5%B1%82/#urlpy","text":"urlpatterns = [ url ( r '^admin/' , admin . site . urls ), url ( r 'test/' , views . test ), url ( r 'testadd/' , views . testadd ) ] \u5982\u679curl.py\u8fd9\u6837\u5199\uff0c test \u548c testadd \u540e\u7f00\u7684\u8bbf\u95ee\u8def\u5f84\uff0c\u8fd4\u56de\u7684\u5185\u5bb9\u662f\u4e00\u6837\u7684\uff0c\u539f\u56e0\u5982\u4e0b\uff1a url\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f \u4e00\u65e6\u6b63\u7acb\u523b\u7ed3\u675f\u5219\u8868\u8fbe\u5f0f\u80fd\u591f\u5339\u914d\u5230\u5185\u5bb9\uff0c\u4f1a\u7acb\u523b\u7ed3\u675f\u5339\u914d\u5173\u7cfb\uff0c\u76f4\u63a5\u6267\u884c\u540e\u9762\u5bf9\u5e94\u7684\u51fd\u6570","title":"url.py\u8def\u7531\u5c42"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/06%20django%E4%B9%8B%E8%B7%AF%E7%94%B1%E5%B1%82/#_1","text":"\u542f\u52a8django\uff0c\u5728\u6d4f\u89c8\u5668\u8f93\u5165 127.0.0.1:8000/test \uff0cdjango\u4f1a\u81ea\u52a8\u52a0\u659c\u6760\u3002","title":"\u8def\u7531\u5339\u914d"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/06%20django%E4%B9%8B%E8%B7%AF%E7%94%B1%E5%B1%82/#django_2","text":"\u4e0d\u52a0\u659c\u6760( 127.0.0.1:8000/test )\uff0c\u5148\u5339\u914d\u4e00\u6b21\u8bd5\u8bd5\uff0c\u5982\u679c\u5339\u914d\u4e0d\u4e0a\uff0c\u4f1a\u8ba9\u6d4f\u89c8\u5668\u91cd\u5b9a\u5411\uff0c\u52a0\u4e00\u4e2a\u659c\u6760( 127.0.0.1:8000/test/ )\u518d\u6765\u4e00\u6b21\u5339\u914d\uff0c\u5982\u679c\u8fd8\u5339\u914d\u4e0d\u4e0a\uff0c\u624d\u4f1a\u62a5\u9519\u3002","title":"django\u5339\u914d\u8def\u7531\u89c4\u5f8b"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/06%20django%E4%B9%8B%E8%B7%AF%E7%94%B1%E5%B1%82/#django_3","text":"\u5728\u914d\u7f6e\u6587\u4ef6\u4e2dsettings.py\u4e2d\u6dfb\u52a0: APPEND_SLASH = False # \u8be5\u53c2\u6570\u9ed8\u8ba4\u4e3aTrue","title":"\u53d6\u6d88django\u81ea\u52a8\u8ba9\u6d4f\u89c8\u5668\u52a0\u659c\u6760\u7684\u529f\u80fd"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/06%20django%E4%B9%8B%E8%B7%AF%E7%94%B1%E5%B1%82/#url","text":"urlpatterns = [ url ( r '^admin/' , admin . site . urls ), # url\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f url ( r '^test/$' , views . test ), # \u4e00\u65e6\u6b63\u7acb\u523b\u7ed3\u675f\u5219\u8868\u8fbe\u5f0f\u80fd\u591f\u5339\u914d\u5230\u5185\u5bb9\uff0c\u4f1a\u7acb\u523b\u7ed3\u675f\u5339\u914d\u5173\u7cfb\uff0c\u76f4\u63a5\u6267\u884c\u540e\u9762\u5bf9\u5e94\u7684\u51fd\u6570 url ( r '^testadd/$' , views . testadd ) ] \u8fd9\u6837\u8bbe\u7f6e\uff0c\u53ea\u80fd\u8f93\u5165 127.0.0.1:8000/test/ \u6216 127.0.0.1:8000/testadd/ \u6ce8\u610f\uff1a\u8def\u7531\u5339\u914d\u53ea\u662f\u5339\u914dURL\u90e8\u5206\uff0c\u4e0d\u5339\u914dget\u643a\u5e26\u7684\u53c2\u6570 ?\u540e\u9762\u7684\u53c2\u6570","title":"\u9650\u5236\u6307\u5b9a\u8f93\u5165\u7684url"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/06%20django%E4%B9%8B%E8%B7%AF%E7%94%B1%E5%B1%82/#_2","text":"\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u65e0\u540d\u5206\u7ec4 urlpatterns = [ url ( r '^admin/' , admin . site . urls ), url ( r '^test/([0-9] {4} )' , views . test ), # \u8868\u793atest\u540e\u9762\u8ddf4\u4e2a\u6570\u5b57 url ( r '^testadd/' , views . testadd ) ] \u5f53\u4f60\u7684\u8def\u7531\u4e2d\u6709\u5206\u7ec4\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u90a3\u4e48\u5728\u5339\u914d\u5230\u5185\u5bb9\u6267\u884c\u89c6\u56fe\u51fd\u6570\u7684\u65f6\u5019\uff0c\u4f1a\u5c06\u5206\u7ec4\u5185\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u5230\u7684\u5185\u5bb9\u5f53\u4f5c \u4f4d\u7f6e\u53c2\u6570 \u4f20\u9012\u7ed9\u89c6\u56fe\u51fd\u6570\u3002 # \u5728\u89c6\u56fe\u51fd\u6570 def test ( request , xxx ): print ( '\u591a\u4f59\u7684\u53c2\u6570:' , xxx ) return HttpResponse ( 'test view' ) \u5f53\u4f60\u7684\u8def\u7531\u4e2d\u6709\u5206\u7ec4\u5e76\u4e14\u7ed9\u5206\u7ec4\u8d77\u4e86\u522b\u540d\uff0c\u90a3\u4e48\u5728\u5339\u914d\u5185\u5bb9\u7684\u65f6\u5019\uff0c\u4f1a\u5c06\u5206\u7ec4\u5185\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u5230\u7684\u5185\u5bb9\u5f53\u4f5c \u5173\u952e\u5b57\u53c2\u6570 \u4f20\u9012\u7ed9\u89c6\u56fe\u51fd\u6570 # \u5728\u89c6\u56fe\u51fd\u6570 def test ( request , year ): print ( '\u591a\u4f59\u7684\u53c2\u6570:' , year ) return HttpResponse ( 'test view' ) \u8fd9\u6837\u5c31\u53ef\u4ee5\u5229\u7528\u6709\u540d\u548c\u65e0\u540d\u5206\u7ec4\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u8c03\u7528\u89c6\u56fe\u51fd\u6570\u4e4b\u524d\u7ed9\u51fd\u6570\u4f20\u9012\u989d\u5916\u7684\u53c2\u6570 \u6ce8\u610f\uff1a\u6709\u540d\u5206\u7ec4\u548c\u65e0\u540d\u5206\u7ec4\u4e0d\u80fd\u6df7\u5408\u4f7f\u7528\uff0c\u4f46\u662f\u540c\u4e00\u60c5\u51b5\u4e0b\uff0c\u65e0\u540d\u5206\u7ec4\u53ef\u4ee5\u4f7f\u7528\u591a\u6b21\uff0c\u6709\u540d\u5206\u7ec4\u4e5f\u53ef\u4ee5\u4f7f\u7528\u591a\u6b21","title":"\u65e0\u540d\u5206\u7ec4"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/06%20django%E4%B9%8B%E8%B7%AF%E7%94%B1%E5%B1%82/#_3","text":"\u4e3e\u4e2a\u4f8b\u5b50\uff1a # urls.py urlpatterns = [ url ( r '^admin/' , admin . site . urls ), url ( r '^test/(\\d+)/' , views . test ), url ( r '^testadd/(?P<year>\\d+)/' , views . testadd ), url ( r '^index/' , views . index ), url ( r '^home/' , views . home ), ] # views.py def index ( request ): return render ( request , 'index.html' ) def home ( request ): return HttpResponse ( 'home' ) \u5728\u4e0a\u8ff0\u4ee3\u7801\u4e2d\uff0c index.html \u9875\u9762\u4e2d\u6709\u5f88\u591a\u8df3\u8f6c\u7684\u94fe\u63a5\uff0c\u90fd\u6307\u5411 home \u8def\u7531\u3002\u5982\u679c\u50cf\u6539\u53d8 home \u7684url\u5730\u5740\uff0c\u90a3\u4e48 index.html \u9875\u9762\u4e2d\u7684\u5f88\u591a\u8df3\u8f6c home \u7684\u94fe\u63a5\u90fd\u6709\u6539\u53d8\uff0c\u6709\u6ca1\u6709\u52a8\u6001\u7ed1\u5b9aurl\u5730\u5740\u7684\u65b9\u6cd5\u5462\uff1f\u53cd\u5411\u89e3\u6790\u5c31\u662f\u3002","title":"\u53cd\u5411\u89e3\u6790"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/06%20django%E4%B9%8B%E8%B7%AF%E7%94%B1%E5%B1%82/#_4","text":"\u53cd\u5411\u89e3\u6790\uff1a\u6839\u636e\u4e00\u4e2a\u522b\u540d\uff0c\u52a8\u6001\u89e3\u6790\u51fa\u4e00\u4e2a\u7ed3\u679c\uff0c\u8be5\u7ed3\u679c\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u5bf9\u5e94\u7684url","title":"\u5b9a\u4e49"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/06%20django%E4%B9%8B%E8%B7%AF%E7%94%B1%E5%B1%82/#_5","text":"url ( r '^home/' , views . home , name = 'xxx' ), # \u7ed9\u8def\u7531\u4e0e\u89c6\u56fe\u51fd\u6570\u5bf9\u5e94\u5173\u7cfb\u8d77\u522b\u540d","title":"\u8def\u7531\u4e2d\u6ca1\u6709\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u76f4\u63a5\u5c31\u662f\u5199\u6b7b\u7684"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/06%20django%E4%B9%8B%E8%B7%AF%E7%94%B1%E5%B1%82/#_6","text":"< p >< a href = \"{% url 'xxx'%}\" > 111 </ a ></ p >","title":"\u524d\u7aef\u53cd\u5411\u89e3\u6790"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/06%20django%E4%B9%8B%E8%B7%AF%E7%94%B1%E5%B1%82/#_7","text":"from django.shortcuts import render , HttpResponse , redirect , reverse def get_url ( request ): url = reverse ( 'xxx' ) print ( url ) return HttpResponse ( 'get_url' )","title":"\u540e\u7aef\u53cd\u5411\u89e3\u6790"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/06%20django%E4%B9%8B%E8%B7%AF%E7%94%B1%E5%B1%82/#_8","text":"\u5728\u89e3\u6790\u7684\u65f6\u5019\uff0c\u4f60\u9700\u8981\u624b\u52a8\u6307\u5b9a\u6b63\u5219\u5339\u914d\u5185\u5bb9\u7684\u662f\u4ec0\u4e48 url ( r '^home/(\\d+)/' , views . home , name = 'xxx' ),","title":"\u65e0\u540d\u5206\u7ec4\u7684\u53cd\u5411\u89e3\u6790"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/06%20django%E4%B9%8B%E8%B7%AF%E7%94%B1%E5%B1%82/#_9","text":"< p >< a href = \"{% url 'xxx' 12 %}\" > 111 </ a ></ p >","title":"\u524d\u7aef\u53cd\u5411\u89e3\u6790"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/06%20django%E4%B9%8B%E8%B7%AF%E7%94%B1%E5%B1%82/#_10","text":"def get_url ( request ): url = reverse ( 'xxx' , args = ( 1 ,)) url2 = reverse ( 'xxx' , args = ( 1231 ,)) print ( url ) print ( url2 ) return HttpResponse ( 'get_url' ) \u624b\u52a8\u4f20\u5165\u7684\u53c2\u6570 \u53ea\u9700\u8981\u6ee1\u8db3 \u80fd\u591f\u88ab\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u5373\u53ef","title":"\u540e\u7aef\u53cd\u5411\u89e3\u6790"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/06%20django%E4%B9%8B%E8%B7%AF%E7%94%B1%E5%B1%82/#_11","text":"url(r'^home/(?P<year>\\d+)/', views.home, name='xxx'),","title":"\u6709\u540d\u5206\u7ec4\u7684\u53cd\u5411\u89e3\u6790"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/06%20django%E4%B9%8B%E8%B7%AF%E7%94%B1%E5%B1%82/#_12","text":"\u53ef\u4ee5\u76f4\u63a5\u7528\u65e0\u540d\u5206\u7ec4\u7684\u60c5\u51b5 < p >< a href = \"{% url 'xxx' 12 %}\" > 111 </ a ></ p > \u89c4\u8303\u7684\u5199\u6cd5\uff1a < p >< a href = \"{% url 'xxx' year=121 %}\" > 111 </ a ></ p >","title":"\u524d\u7aef\u53cd\u5411\u89e3\u6790"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/06%20django%E4%B9%8B%E8%B7%AF%E7%94%B1%E5%B1%82/#_13","text":"\u53ef\u4ee5\u76f4\u63a5\u7528\u65e0\u540d\u5206\u7ec4\u7684\u60c5\u51b5 \u4e5f\u53ef\u4ee5\u89c4\u8303\u5199\uff1a def get_url ( request ): url = reverse ( 'xxx' , kwargs = { 'year' : 13123 }) print ( url ) return HttpResponse ( 'get_url' )","title":"\u540e\u7aef\u53cd\u5411\u89e3\u6790"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/06%20django%E4%B9%8B%E8%B7%AF%E7%94%B1%E5%B1%82/#_14","text":"# urls.py url = ( r '^edit_user/(\\d+)/' , views . edit_user , name = 'edit' ) # views.py def edit_user ( request , edit_id ): # edit_id\u5c31\u662f\u7528\u6237\u60f3\u8981\u7f16\u8f91\u6570\u636e\u4e3b\u952e\u503c pass <!--\u9875\u9762--> {% for user_obj in user_list %} < a href = '/edit_user/{{user_obj.id}}/' > \u7f16\u8f91 </ a > < a href = '{% url ' edit ' user_obj . id %}' > \u7f16\u8f91 </ a > {% endfor %}","title":"\u4ee5\u7f16\u8f91\u529f\u80fd\u4e3a\u4f8b\uff0c\u53cd\u5411\u89e3\u6790\u7684\u5e94\u7528"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/06%20django%E4%B9%8B%E8%B7%AF%E7%94%B1%E5%B1%82/#_15","text":"\u524d\u63d0\uff1a ''' \u5728django\u4e2d\u6240\u6709\u7684app\u90fd\u53ef\u4ee5\u6709\u81ea\u5df1\u72ec\u7acb\u7684urls.py \\ templates \\ static. \u6b63\u662f\u7531\u4e8e\u4e0a\u9762\u7684\u7279\u70b9 \u4f60\u7528django\u5f00\u53d1\u9879\u76ee\u5c31\u80fd\u591f\u5b8c\u5168\u505a\u5230\u591a\u4eba\u5206\u7ec4\u5f00\u53d1 \u4e92\u76f8\u4e0d\u5e72\u6270,\u6bcf\u4e2a\u4eba\u53ea\u5f00\u53d1\u81ea\u5df1\u7684app. \u5c0f\u7ec4\u957f\u53ea\u9700\u8981\u5c06\u6240\u6709\u4eba\u5f00\u53d1\u7684app\u6574\u5408\u5230\u4e00\u4e2a\u7a7a\u7684django\u9879\u76ee\u91cc\u9762, \u7136\u540e\u5728settings\u914d\u7f6e\u6587\u4ef6\u6ce8\u518c \u518d\u5229\u7528\u8def\u7531\u5206\u53d1\u5c06\u591a\u4e2aapp\u6574\u5408\u5230\u4e00\u8d77\u5373\u53ef\u5b8c\u6210\u5927\u9879\u76ee\u7684\u62fc\u63a5 ''' \u8def\u7531\u5206\u53d1\u89e3\u51b3\u7684\u5c31\u662f \u9879\u76ee\u7684\u603b\u8def\u7531 \u5339\u914d\u5173\u7cfb\u8fc7\u591a\u7684\u60c5\u51b5\u3002\u4f7f\u7528\u8def\u7531\u5206\u53d1\uff0c \u4f1a\u51fa\u73b0\uff1a \u603b\u8def\u7531\u4e0d\u518d\u505a\u5339\u914d\u7684\u6d3b \u800c\u4ec5\u4ec5\u662f\u505a\u4efb\u52a1\u5206\u53d1 \u8bf7\u6c42\u6765\u4e86\u4e4b\u540e \u603b\u8def\u7531\u4e0d\u505a\u5bf9\u5e94\u5173\u7cfb\uff0c\u53ea\u8be2\u95ee\u4f60\u8981\u8bbf\u95ee\u54ea\u4e2aapp\u7684\u529f\u80fd \u7136\u540e\u5c06\u8bf7\u6c42\u8f6c\u53d1\u7ed9\u5bf9\u5e94\u7684app\u53bb\u5904\u7406","title":"\u8def\u7531\u5206\u53d1"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/06%20django%E4%B9%8B%E8%B7%AF%E7%94%B1%E5%B1%82/#include","text":"\u53ea\u9700\u8981\u5c06\u6240\u6709\u7684app\u7684urls.py\u5bfc\u5165\u5373\u53ef from django.conf.urls import url , include from app01 import urls as app01_urls from app02 import urls as app02_urls urlpatterns = [ url ( r '^app01/' , include ( app01_urls )), url ( r '^app02/' , include ( app02_urls )), ] # \u8def\u7531\u5206\u53d1","title":"\u603b\u8def\u7531 (include)"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/06%20django%E4%B9%8B%E8%B7%AF%E7%94%B1%E5%B1%82/#_16","text":"# app01 urls.py from django.conf.urls import url from app01 import views urlpatterns = [ url ( r '^reg/' , views . reg ), ] # app02 urls.py from django.conf.urls import url from app02 import views urlpatterns = [ url ( r '^reg/' , views . reg ), ] \u6700\u7701\u4e8b\u7684\u5199\u6cd5\uff1a # \u8fde\u5bfc\u5165\u90fd\u4e0d\u9700\u8981 url ( r '^app01/' , include ( 'app01.urls' )), url ( r '^app02/' , include ( 'app02.urls' ))","title":"\u5b50\u8def\u7531"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/06%20django%E4%B9%8B%E8%B7%AF%E7%94%B1%E5%B1%82/#namespace","text":"\u5f53\u591a\u4e2aapp\u4e2d\u51fa\u73b0\u4e86\u8d77\u522b\u540d\u51b2\u7a81\u7684\u60c5\u51b5 \u4f60\u5728\u505a\u8def\u7531\u5206\u53d1\u7684\u65f6\u5019 \u53ef\u4ee5\u7ed9\u6bcf\u4e00\u4e2aapp\u521b\u5efa\u4e00\u4e2a\u540d\u79f0\u7a7a\u95f4\u3002 \u7136\u540e\u5728\u53cd\u5411\u89e3\u6790\u7684\u65f6\u5019 \u53ef\u4ee5\u9009\u62e9\u5230\u5e95\u53bb\u54ea\u4e2a\u540d\u79f0\u7a7a\u95f4\u4e2d\u67e5\u627e\u522b\u540d \u5728\u603b\u8def\u7531\u4e2d\uff1a url ( r '^app01/' , include ( 'app01.urls' , namespace = 'app01' )), url ( r '^app02/' , include ( 'app02.urls' , namespace = 'app02' )) \u524d\u7aef\uff1a < a href = \"{% url 'app01:reg' %}\" ></ a > < a href = \"{% url 'app02:reg' %}\" ></ a > \u540e\u7aef\uff1a print ( reverse ( 'app01:reg' )) print ( reverse ( 'app02:reg' )) \u4f46\u662f\u4e5f\u53ef\u4ee5\u4e0d\u7528\uff0c\u4f60\u53ea\u8981 \u4fdd\u8bc1\u8d77\u522b\u540d\u7684\u65f6\u5019\uff0c\u5728\u6574\u4e2adjango\u9879\u76ee\u4e2d\u4e0d\u51b2\u7a81\u5373\u53ef","title":"\u540d\u79f0\u7a7a\u95f4 (namespace)"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/06%20django%E4%B9%8B%E8%B7%AF%E7%94%B1%E5%B1%82/#django_4","text":"form\u8868\u8fbe\u4f20\u6587\u4ef6\u9700\u8981\u6ce8\u610f\u7684\u4e8b\u9879 method\u5fc5\u987b\u6539\u6210post enctype\u6539\u4e3aformdata\u683c\u5f0f # urls.py from django.conf.urls import url from app02 import views urlpatterns = [ url ( r '^upload/' , views . upload ) ] # views.py def upload ( request ): if request . method == 'POST' : print ( request . FILES ) # django\u4f1a\u5c06\u6587\u4ef6\u7c7b\u578b\u7684\u6570\u636e\u81ea\u52a8\u653e\u5165request.FILES file_obj = request . FILES . get ( 'myfile' ) # \u6587\u4ef6\u5bf9\u8c61 # print(file_obj) # print(file_obj.name) with open ( file_obj . name , 'wb' ) as f : for line in file_obj : f . write ( line ) return render ( request , 'upload.html' )","title":"django\u540e\u7aef\u83b7\u53d6\u6587\u4ef6\u5bf9\u8c61"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/07%20django%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%B1%82/","text":"django\u4e4b\u89c6\u56fe\u5c42 # \u89c6\u56fe\u5c42\u51fd\u6570 # \u5728\u89c6\u56fe\u5c42\uff0c\u4e09\u4e2a\u91cd\u8981\u7684\u65b9\u6cd5\uff1aHttpResponse\u3001render\u3001redirect \u5728\u89c6\u56fe\u51fd\u6570\u5fc5\u987b\u8981\u6709\u4e00\u4e2a\u8fd4\u56de\u503c\uff0c\u5e76\u4e14\u8fd4\u56de\u503c\u7684\u6570\u636e\u7c7b\u578b\u5fc5\u987b\u662fHttpResponse\u5bf9\u8c61 \u539f\u7406\uff1a\u5229\u7528\u4e24\u4e2a\u6a21\u5757 from django.template import Template , Context def login ( request ): res = Template ( '<h1>{{ user }}</h1>' ) con = Context ({ 'user' :{ 'username' : 'cwz' , 'password' : '123' }}) return HttpResponse ( res . render ( con )) JsonResponse\u5bf9\u8c61 # \u524d\u540e\u7aef\u6570\u636e\u4ea4\u4e92 # \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u524d\u540e\u7aef\u6570\u636e\u4ea4\u4e92\u91c7\u7528\u7684\u90fd\u662fjson\u7684\u5b57\u7b26\u4e32\u3002\u540e\u7aef\u53ea\u9700\u8981\u5199\u597d\u5bf9\u5e94\u7684url\u63a5\u53e3\uff0c\u524d\u7aef\u8bbf\u95ee\u8fd9\u4e2a\u63a5\u53e3\u3002 \u7528\u6765\u544a\u8bc9\u524d\u7aef\u5de5\u7a0b\u5e08\uff0c\u8fd9\u4e2a\u63a5\u53e3\u80fd\u591f\u8fd4\u56de\u54ea\u4e9b\u6570\u636e \u524d\u540e\u7aef\u5e8f\u5217\u5316 \u53cd\u5e8f\u5217\u5316\u4f7f\u7528\u7684\u65b9\u6cd5 # python\u540e\u7aef JavaScript\u524d\u7aef json.dumps JSON.stringify json.loads JSON.parse JsonResponse # \u5c06\u4e00\u4e2a\u5b57\u5178\u5e8f\u5217\u5316\u6210\u5b57\u7b26\u4e32\uff1a import json def index ( request ): user_dic = { 'name' : 'cwz\u4f60\u597d\u554a' , 'password' : '123' } # ensure_ascii \u53c2\u6570\u63a7\u5236\u5bf9\u4e2d\u6587\u662f\u5426\u8f6c\u7801, \u9ed8\u8ba4\u662fTrue json_str = json . dumps ( user_dic , ensure_ascii = False ) return HttpResponse ( json_str ) \u5728django\u4e2d\u6709JsonResponse from django.http import JsonResponse def index ( request ): user_dic = { 'name' : 'cwz\u4f60\u597d\u554a' , 'password' : '123' } return JsonResponse ( user_dic , json_dumps_params = { 'ensure_ascii' : False }) JsonResponse\u9ed8\u8ba4\u5e8f\u5217\u5316\u5b57\u5178\uff0c\u5982\u679c\u60f3\u5e8f\u5217\u5316\u5176\u4ed6\u6570\u636e\u7c7b\u578b\uff0c\u53ef\u4ee5\u52a0safe\u53c2\u6570 from django.http import JsonResponse def index ( request ): lt = [ 1 , 2 , 3 , 4 , 5 ,] return JsonResponse ( lt , safe = False ) FBV\u4e0eCBV # \u533a\u522b # FBV \uff1a\u57fa\u4e8e\u51fd\u6570\u7684\u89c6\u56fe CBV\uff1a\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe CBV\u7b80\u5355\u4f7f\u7528 # \u5728 urls.py \u4e2d\u5199\u8def\u7531\u5730\u5740 url ( r 'login/' , views . MyLogin . as_view ()) \u5728\u89c6\u56fe\u5c42 views.py \u4e2d\u5199 from django.views import View class MyLogin ( View ): def get ( self , request ): print ( '\u6211\u662fMyLogin\u91cc\u9762\u7684get\u65b9\u6cd5' ) return render ( request , 'login.html' ) def post ( self , request ): print ( '\u6211\u662fMyLogin\u7684post\u65b9\u6cd5' ) return HttpResponse ( 'post' ) \u8fd0\u884c\u4e0a\u9762\u7684\u4ee3\u7801\uff0c\u53ef\u77e5CBV\u80fd\u591f\u6839\u636e\u8bf7\u6c42\u65b9\u5f0f\u7684\u4e0d\u540c\uff0c\u81ea\u52a8\u7684\u6267\u884c\u4e0d\u540c\u7684\u65b9\u6cd5\u3002 CBV\u6e90\u7801\u5206\u6790 # \u9996\u5148\u770b\u8def\u7531\uff0c urls.py \u4e2d\uff1a url ( r 'login/' , views . MyLogin . as_view ()) \u7ecf\u8fc7\u5206\u6790\u53ef\u77e5\uff1a MyLogin\u662f\u7c7b\uff0c\u7c7b.\u65b9\u6cd5\u52a0\u62ec\u53f7\uff0c\u8bf4\u660e\u662f\u8bbf\u95ee\u65b9\u6cd5 \u65b9\u6cd5\u540e\u9762\u6ca1\u6709\u52a0\u53c2\u6570\uff0c\u6709\u4e24\u79cd\u53ef\u80fd\uff0c\u4e00\u4e2a\u662f\u7c7b\u7684\u7ed1\u5b9a\u65b9\u6cd5\uff08classmethod\uff09\u6ca1\u6709\u4f20\u53c2\u6570\uff0c\u53e6\u4e00\u4e2a\u5c31\u662f\u52a0staticmethod\u88c5\u9970\uff0c\u5c31\u662f\u4e00\u4e2a\u666e\u901a\u7684\u51fd\u6570\uff0c\u6ca1\u6709\u4f20\u5f62\u53c2\u3002 as_view() \u65b9\u6cd5\u5c31\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u51fd\u6570\u540d\u52a0\u62ec\u53f7\u6267\u884c\u4f18\u5148\u7ea7\u6700\u9ad8 \u8fdb\u5165 as_view \u6e90\u7801\uff1a \u8fd9\u6837\u8def\u7531\u5339\u914d\u5173\u7cfb\u5c31\u76f8\u5f53\u4e8e\u8fd9\u6837\uff1a url(r'login/', views.view) \u3002\u8fd9\u5c31\u8bf4\u660e\u4e86CBV\u5728\u8def\u7531\u5339\u914d\u4e0a\uff0c\u5176\u5b9e\u672c\u8d28\u4e0a\u8fd8\u662fFBV\u3002 \u7136\u540e\u53bb dispatch \u65b9\u6cd5\u4e2d\u770b\uff1a \u603b\u7ed3CBV\u80fd\u591f\u6839\u636e\u8bf7\u6c42\u65b9\u5f0f\u7684\u4e0d\u540c\uff0c\u81ea\u52a8\u7684\u6267\u884c\u4e0d\u540c\u7684\u65b9\u6cd5\uff1a \u8fdb\u5165 as_view \u6e90\u7801\uff0c\u662f\u4e00\u4e2a\u7c7b\u7684\u7ed1\u5b9a\u65b9\u6cd5\uff0c\u8fd4\u56de\u4e00\u4e2aview\u51fd\u6570\u540d \u7136\u540e\u770bview\u51fd\u6570\u65b9\u6cd5\uff0c\u91cc\u9762\u7ed9\u5bf9\u8c61\u6dfb\u52a0\u4e86\u4e00\u5806\u5c5e\u6027\uff0c\u6700\u540e\u8fd4\u56de self.dispatch , dispatch\u5bf9\u8c61\u3001\u7c7b\u4e2d\u90fd\u6ca1\u6709\uff0c\u5728\u7236\u7c7b\u4e2d\u6709\uff0c\u5728dispatch\u4e2d\u5206\u6790 \u5148\u5224\u65ad\u5f53\u524d\u8bf7\u6c42\u65b9\u5f0f\u662f\u5426\u5728\u8fd98\u4e2a\u8bf7\u6c42\u65b9\u5f0f\u4e4b\u5185\uff0c\u5982\u679c\u4e0d\u5728\u5c31\u62a5\u9519 \u4ee5get\u8bf7\u6c42\u4e3a\u4f8b\uff0c\u5229\u7528\u53cd\u5c04\u53bb\u6211\u4eec\u5b9a\u4e49\u7c7b\u7684\u5bf9\u8c61\u4e2d\u67e5\u627eget\u5c5e\u6027\u548c\u65b9\u6cd5\u3002\u6700\u7ec8\u5728\u81ea\u5b9a\u4e49\u7684\u7c7b\u4e2d\u627e\u5230get\u65b9\u6cd5\uff0c\u5373\u8fd9\u91cc\u7684 hander=get\u65b9\u6cd5 \uff0c\u7136\u540e\u8c03\u7528get\u65b9\u6cd5\uff0c\u6267\u884cget\u51fd\u6570\u3002 CBV\u52a0\u88c5\u9970\u5668\u7684\u65b9\u5f0f # # \u8ba1\u65f6\u4efb\u52a1\u7684\u88c5\u9970\u5668 import time from functools import wraps def outter ( func ): @wraps ( func ) def inner ( * args , ** kwargs ): start = time . time () res = func ( * args , ** kwargs ) end = time . time () - start print ( f '\u51fd\u6570\u6267\u884c\u65f6\u95f4\uff1a { end } ' ) return res return inner # \u6cd51\uff0c\u76f4\u63a5\u5199 class MyLogin ( View ): @outter def get ( self , request ): print ( '\u6211\u662fMyLogin\u91cc\u9762\u7684get\u65b9\u6cd5' ) return render ( request , 'login.html' ) @outter def post ( self , request ): print ( '\u6211\u662fMyLogin\u7684post\u65b9\u6cd5' ) return HttpResponse ( 'post' ) \u63a8\u8350\u4f7f\u7528django\u63d0\u4f9b\u7684\u6a21\u5757\u5199 from django.utils.decorators import method_decorator # \u6cd52 from django.views import View from django.utils.decorators import method_decorator @method_decorator ( outter , name = 'get' ) # \u53ef\u4ee5\u6307\u5b9a\u7ed9\u8c01\u88c5 class MyLogin ( View ): def get ( self , request ): print ( '\u6211\u662fMyLogin\u91cc\u9762\u7684get\u65b9\u6cd5' ) return render ( request , 'login.html' ) # \u6cd53 class MyLogin ( View ): @method_decorator ( outter ) def get ( self , request ): print ( '\u6211\u662fMyLogin\u91cc\u9762\u7684get\u65b9\u6cd5' ) return render ( request , 'login.html' ) # \u6cd54 @method_decorator ( outter , name = 'dispatch' ) class MyLogin ( View ): #@method_decorator(outter) # \u4e5f\u53ef\u4ee5\u5728dispatch\u65b9\u6cd5\u4e0a\u52a0\u88c5 def dispatch ( self , request , * args , ** kwargs ): return super () . dispatch ( request , * args , ** kwargs ) def get ( self , request ): print ( '\u6211\u662fMyLogin\u91cc\u9762\u7684get\u65b9\u6cd5' ) return render ( request , 'login.html' ) def post ( self , request ): print ( '\u6211\u662fMyLogin\u7684post\u65b9\u6cd5' ) return HttpResponse ( 'post' )","title":"07 django\u4e4b\u89c6\u56fe\u5c42"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/07%20django%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%B1%82/#django","text":"","title":"django\u4e4b\u89c6\u56fe\u5c42"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/07%20django%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%B1%82/#_1","text":"\u5728\u89c6\u56fe\u5c42\uff0c\u4e09\u4e2a\u91cd\u8981\u7684\u65b9\u6cd5\uff1aHttpResponse\u3001render\u3001redirect \u5728\u89c6\u56fe\u51fd\u6570\u5fc5\u987b\u8981\u6709\u4e00\u4e2a\u8fd4\u56de\u503c\uff0c\u5e76\u4e14\u8fd4\u56de\u503c\u7684\u6570\u636e\u7c7b\u578b\u5fc5\u987b\u662fHttpResponse\u5bf9\u8c61 \u539f\u7406\uff1a\u5229\u7528\u4e24\u4e2a\u6a21\u5757 from django.template import Template , Context def login ( request ): res = Template ( '<h1>{{ user }}</h1>' ) con = Context ({ 'user' :{ 'username' : 'cwz' , 'password' : '123' }}) return HttpResponse ( res . render ( con ))","title":"\u89c6\u56fe\u5c42\u51fd\u6570"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/07%20django%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%B1%82/#jsonresponse","text":"","title":"JsonResponse\u5bf9\u8c61"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/07%20django%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%B1%82/#_2","text":"\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u524d\u540e\u7aef\u6570\u636e\u4ea4\u4e92\u91c7\u7528\u7684\u90fd\u662fjson\u7684\u5b57\u7b26\u4e32\u3002\u540e\u7aef\u53ea\u9700\u8981\u5199\u597d\u5bf9\u5e94\u7684url\u63a5\u53e3\uff0c\u524d\u7aef\u8bbf\u95ee\u8fd9\u4e2a\u63a5\u53e3\u3002 \u7528\u6765\u544a\u8bc9\u524d\u7aef\u5de5\u7a0b\u5e08\uff0c\u8fd9\u4e2a\u63a5\u53e3\u80fd\u591f\u8fd4\u56de\u54ea\u4e9b\u6570\u636e","title":"\u524d\u540e\u7aef\u6570\u636e\u4ea4\u4e92"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/07%20django%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%B1%82/#_3","text":"python\u540e\u7aef JavaScript\u524d\u7aef json.dumps JSON.stringify json.loads JSON.parse","title":"\u524d\u540e\u7aef\u5e8f\u5217\u5316 \u53cd\u5e8f\u5217\u5316\u4f7f\u7528\u7684\u65b9\u6cd5"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/07%20django%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%B1%82/#jsonresponse_1","text":"\u5c06\u4e00\u4e2a\u5b57\u5178\u5e8f\u5217\u5316\u6210\u5b57\u7b26\u4e32\uff1a import json def index ( request ): user_dic = { 'name' : 'cwz\u4f60\u597d\u554a' , 'password' : '123' } # ensure_ascii \u53c2\u6570\u63a7\u5236\u5bf9\u4e2d\u6587\u662f\u5426\u8f6c\u7801, \u9ed8\u8ba4\u662fTrue json_str = json . dumps ( user_dic , ensure_ascii = False ) return HttpResponse ( json_str ) \u5728django\u4e2d\u6709JsonResponse from django.http import JsonResponse def index ( request ): user_dic = { 'name' : 'cwz\u4f60\u597d\u554a' , 'password' : '123' } return JsonResponse ( user_dic , json_dumps_params = { 'ensure_ascii' : False }) JsonResponse\u9ed8\u8ba4\u5e8f\u5217\u5316\u5b57\u5178\uff0c\u5982\u679c\u60f3\u5e8f\u5217\u5316\u5176\u4ed6\u6570\u636e\u7c7b\u578b\uff0c\u53ef\u4ee5\u52a0safe\u53c2\u6570 from django.http import JsonResponse def index ( request ): lt = [ 1 , 2 , 3 , 4 , 5 ,] return JsonResponse ( lt , safe = False )","title":"JsonResponse"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/07%20django%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%B1%82/#fbvcbv","text":"","title":"FBV\u4e0eCBV"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/07%20django%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%B1%82/#_4","text":"FBV \uff1a\u57fa\u4e8e\u51fd\u6570\u7684\u89c6\u56fe CBV\uff1a\u57fa\u4e8e\u7c7b\u7684\u89c6\u56fe","title":"\u533a\u522b"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/07%20django%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%B1%82/#cbv","text":"\u5728 urls.py \u4e2d\u5199\u8def\u7531\u5730\u5740 url ( r 'login/' , views . MyLogin . as_view ()) \u5728\u89c6\u56fe\u5c42 views.py \u4e2d\u5199 from django.views import View class MyLogin ( View ): def get ( self , request ): print ( '\u6211\u662fMyLogin\u91cc\u9762\u7684get\u65b9\u6cd5' ) return render ( request , 'login.html' ) def post ( self , request ): print ( '\u6211\u662fMyLogin\u7684post\u65b9\u6cd5' ) return HttpResponse ( 'post' ) \u8fd0\u884c\u4e0a\u9762\u7684\u4ee3\u7801\uff0c\u53ef\u77e5CBV\u80fd\u591f\u6839\u636e\u8bf7\u6c42\u65b9\u5f0f\u7684\u4e0d\u540c\uff0c\u81ea\u52a8\u7684\u6267\u884c\u4e0d\u540c\u7684\u65b9\u6cd5\u3002","title":"CBV\u7b80\u5355\u4f7f\u7528"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/07%20django%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%B1%82/#cbv_1","text":"\u9996\u5148\u770b\u8def\u7531\uff0c urls.py \u4e2d\uff1a url ( r 'login/' , views . MyLogin . as_view ()) \u7ecf\u8fc7\u5206\u6790\u53ef\u77e5\uff1a MyLogin\u662f\u7c7b\uff0c\u7c7b.\u65b9\u6cd5\u52a0\u62ec\u53f7\uff0c\u8bf4\u660e\u662f\u8bbf\u95ee\u65b9\u6cd5 \u65b9\u6cd5\u540e\u9762\u6ca1\u6709\u52a0\u53c2\u6570\uff0c\u6709\u4e24\u79cd\u53ef\u80fd\uff0c\u4e00\u4e2a\u662f\u7c7b\u7684\u7ed1\u5b9a\u65b9\u6cd5\uff08classmethod\uff09\u6ca1\u6709\u4f20\u53c2\u6570\uff0c\u53e6\u4e00\u4e2a\u5c31\u662f\u52a0staticmethod\u88c5\u9970\uff0c\u5c31\u662f\u4e00\u4e2a\u666e\u901a\u7684\u51fd\u6570\uff0c\u6ca1\u6709\u4f20\u5f62\u53c2\u3002 as_view() \u65b9\u6cd5\u5c31\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u51fd\u6570\u540d\u52a0\u62ec\u53f7\u6267\u884c\u4f18\u5148\u7ea7\u6700\u9ad8 \u8fdb\u5165 as_view \u6e90\u7801\uff1a \u8fd9\u6837\u8def\u7531\u5339\u914d\u5173\u7cfb\u5c31\u76f8\u5f53\u4e8e\u8fd9\u6837\uff1a url(r'login/', views.view) \u3002\u8fd9\u5c31\u8bf4\u660e\u4e86CBV\u5728\u8def\u7531\u5339\u914d\u4e0a\uff0c\u5176\u5b9e\u672c\u8d28\u4e0a\u8fd8\u662fFBV\u3002 \u7136\u540e\u53bb dispatch \u65b9\u6cd5\u4e2d\u770b\uff1a \u603b\u7ed3CBV\u80fd\u591f\u6839\u636e\u8bf7\u6c42\u65b9\u5f0f\u7684\u4e0d\u540c\uff0c\u81ea\u52a8\u7684\u6267\u884c\u4e0d\u540c\u7684\u65b9\u6cd5\uff1a \u8fdb\u5165 as_view \u6e90\u7801\uff0c\u662f\u4e00\u4e2a\u7c7b\u7684\u7ed1\u5b9a\u65b9\u6cd5\uff0c\u8fd4\u56de\u4e00\u4e2aview\u51fd\u6570\u540d \u7136\u540e\u770bview\u51fd\u6570\u65b9\u6cd5\uff0c\u91cc\u9762\u7ed9\u5bf9\u8c61\u6dfb\u52a0\u4e86\u4e00\u5806\u5c5e\u6027\uff0c\u6700\u540e\u8fd4\u56de self.dispatch , dispatch\u5bf9\u8c61\u3001\u7c7b\u4e2d\u90fd\u6ca1\u6709\uff0c\u5728\u7236\u7c7b\u4e2d\u6709\uff0c\u5728dispatch\u4e2d\u5206\u6790 \u5148\u5224\u65ad\u5f53\u524d\u8bf7\u6c42\u65b9\u5f0f\u662f\u5426\u5728\u8fd98\u4e2a\u8bf7\u6c42\u65b9\u5f0f\u4e4b\u5185\uff0c\u5982\u679c\u4e0d\u5728\u5c31\u62a5\u9519 \u4ee5get\u8bf7\u6c42\u4e3a\u4f8b\uff0c\u5229\u7528\u53cd\u5c04\u53bb\u6211\u4eec\u5b9a\u4e49\u7c7b\u7684\u5bf9\u8c61\u4e2d\u67e5\u627eget\u5c5e\u6027\u548c\u65b9\u6cd5\u3002\u6700\u7ec8\u5728\u81ea\u5b9a\u4e49\u7684\u7c7b\u4e2d\u627e\u5230get\u65b9\u6cd5\uff0c\u5373\u8fd9\u91cc\u7684 hander=get\u65b9\u6cd5 \uff0c\u7136\u540e\u8c03\u7528get\u65b9\u6cd5\uff0c\u6267\u884cget\u51fd\u6570\u3002","title":"CBV\u6e90\u7801\u5206\u6790"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/07%20django%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%B1%82/#cbv_2","text":"# \u8ba1\u65f6\u4efb\u52a1\u7684\u88c5\u9970\u5668 import time from functools import wraps def outter ( func ): @wraps ( func ) def inner ( * args , ** kwargs ): start = time . time () res = func ( * args , ** kwargs ) end = time . time () - start print ( f '\u51fd\u6570\u6267\u884c\u65f6\u95f4\uff1a { end } ' ) return res return inner # \u6cd51\uff0c\u76f4\u63a5\u5199 class MyLogin ( View ): @outter def get ( self , request ): print ( '\u6211\u662fMyLogin\u91cc\u9762\u7684get\u65b9\u6cd5' ) return render ( request , 'login.html' ) @outter def post ( self , request ): print ( '\u6211\u662fMyLogin\u7684post\u65b9\u6cd5' ) return HttpResponse ( 'post' ) \u63a8\u8350\u4f7f\u7528django\u63d0\u4f9b\u7684\u6a21\u5757\u5199 from django.utils.decorators import method_decorator # \u6cd52 from django.views import View from django.utils.decorators import method_decorator @method_decorator ( outter , name = 'get' ) # \u53ef\u4ee5\u6307\u5b9a\u7ed9\u8c01\u88c5 class MyLogin ( View ): def get ( self , request ): print ( '\u6211\u662fMyLogin\u91cc\u9762\u7684get\u65b9\u6cd5' ) return render ( request , 'login.html' ) # \u6cd53 class MyLogin ( View ): @method_decorator ( outter ) def get ( self , request ): print ( '\u6211\u662fMyLogin\u91cc\u9762\u7684get\u65b9\u6cd5' ) return render ( request , 'login.html' ) # \u6cd54 @method_decorator ( outter , name = 'dispatch' ) class MyLogin ( View ): #@method_decorator(outter) # \u4e5f\u53ef\u4ee5\u5728dispatch\u65b9\u6cd5\u4e0a\u52a0\u88c5 def dispatch ( self , request , * args , ** kwargs ): return super () . dispatch ( request , * args , ** kwargs ) def get ( self , request ): print ( '\u6211\u662fMyLogin\u91cc\u9762\u7684get\u65b9\u6cd5' ) return render ( request , 'login.html' ) def post ( self , request ): print ( '\u6211\u662fMyLogin\u7684post\u65b9\u6cd5' ) return HttpResponse ( 'post' )","title":"CBV\u52a0\u88c5\u9970\u5668\u7684\u65b9\u5f0f"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/08%20django%E4%B9%8B%E6%A8%A1%E6%9D%BF%E5%B1%82/","text":"django\u4e4b\u6a21\u677f\u5c42 # \u6a21\u677f\u8bed\u6cd5 # \u4e24\u79cd\u4e66\u5199\u683c\u5f0f\uff1a - \u53d8\u91cf\u76f8\u5173\u7528 {{ }} - \u903b\u8f91\u76f8\u5173\u7528 {% %} \u6a21\u677f\u4f20\u503c # \u7ed9html\u9875\u9762\u4f20\u503c\u7684\u4e24\u79cd\u65b9\u5f0f # \u7b2c\u4e00\u79cd\u65b9\u5f0f def test ( request ): n = 1 f = 1.21 s = 'hellow world' lt = [ 11 , 22 , 33 , 44 , 55 , 66 ] tu = ( 111 , 222 , 333 ) dic = { 'username' : 'neo' , 'password' : '123' } se = { 1 , 3 , 5 , 7 , 9 } bo = True return render ( request , 'test.html' , 'n' : n , 'dic' : dic ) \u5f0a\u7aef\u5c31\u662f\uff1a\u5f53\u8981\u4f20\u7684\u53d8\u91cf\u540d\u5f88\u591a\u7684\u65f6\u5019\uff0c\u5c31\u5f88\u9ebb\u70e6 \u7b2c\u4e8c\u79cd locals() locals() \u4f1a\u5c06\u5f53\u524d\u6240\u5728\u7684\u540d\u79f0\u7a7a\u95f4\u4e2d\u6240\u6709\u7684\u540d\u5b57\u5168\u90e8\u4f20\u9012\u7ed9html\u9875\u9762 \u4f20\u503c \u57fa\u672c\u6570\u636e\u7c7b\u578b # def test ( request ): n = 1 f = 1.21 s = 'hellow world' lt = [ 11 , 22 , 33 , 44 , 55 , 66 ] tu = ( 111 , 222 , 333 ) dic = { 'username' : 'neo' , 'password' : '123' } se = { 1 , 3 , 5 , 7 , 9 } bo = True return render ( request , 'test.html' , locals ()) \u524d\u7aef\u63a5\u6536\uff1a < p > {{ n }} </ p > < p > {{ f }} </ p > < p > {{ lt }} </ p > < p > {{ tu }} </ p > < p > {{ s }} </ p > < p > {{ se }} </ p > < p > {{ bo }} </ p > < p > {{ dic }} </ p > \u4f20\u51fd\u6570\u540d # def test ( request ): def func1 (): pass return render ( request , 'test.html' , locals ()) \u524d\u7aef < p > \u4f20\u51fd\u6570\u540d {{ func1 }} </ p > \u663e\u793a\u6548\u679c\uff1a \u4f20\u51fd\u6570\u540d None \u6ce8\u610f\uff1a \u7ed9HTML\u9875\u9762\u4f20\u9012\u51fd\u6570\u540d\u7684\u65f6\u5019\uff0c\u6a21\u677f\u8bed\u6cd5\u4f1a\u81ea\u52a8\u52a0\u62ec\u53f7\u8c03\u7528\u8be5\u51fd\u6570\uff0c\u5e76\u4e14\u5c06\u51fd\u6570\u7684\u8fd4\u56de\u503c\u663e\u793a\u5728\u6d4f\u89c8\u5668\u9875\u9762\u4e0a \u3002 \u4f46\u662f\u6a21\u677f\u8bed\u6cd5\u4e0d\u652f\u6301\u51fd\u6570\u4f20\u53c2\uff0c\u610f\u5473\u7740\u7ed9html\u9875\u9762\u4f20\u7684\u51fd\u6570\u53ea\u80fd\u662f\u4e0d\u9700\u8981\u4f20\u53c2\u6570\u8c03\u7528\u7684\u51fd\u6570\u3002 \u4f20\u7c7b\u540d\u548c\u5bf9\u8c61 # def func1 (): pass class MyClass ( object ): def get_self ( self ): return 'get_self' @classmethod def get_cls ( cls ): return 'get_cls' @staticmethod def get_func (): return 'get_func' obj = MyClass () \u524d\u7aef\uff1a < p > \u4f20\u7c7b\u540d\uff1a{{ MyClass }} </ p > < p > \u4f20\u5bf9\u8c61\u540d: {{ obj }} </ p > < p > {{ obj.get_cls }} </ p > < p > {{ obj.get_self }} </ p > < p > {{ obj.get_func }} </ p > \u603b\u7ed3:\u53ea\u8981\u662f\u80fd\u591f\u52a0\u62ec\u53f7\u8c03\u7528\u7684 \u4f20\u9012\u5230html\u9875\u9762\u4e0a\u90fd\u4f1a\u81ea\u52a8\u52a0\u62ec\u53f7\u8c03\u7528 \u8fc7\u6ee4\u5668 # \u8bed\u6cd5\u7ed3\u6784 # \u7528 | \u6765\u4f7f\u7528\uff0c \u4f1a\u81ea\u52a8\u5c06 | \u5de6\u8fb9\u7684\u6570\u636e\u5f53\u4f5c\u8fc7\u6ee4\u5668\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20\u5165, : \u53f3\u8fb9\u7684\u5f53\u4f5c\u7b2c\u4e8c\u4e2a\u53c2\u6570 <p>\u7edf\u8ba1\u957f\u5ea6\uff1a{{ s|length }}</p> \u5e38\u7528\u7684\u65b9\u6cd5 # \u7edf\u8ba1\u957f\u5ea6 \uff1a <p>\u7edf\u8ba1\u957f\u5ea6\uff1a{{ s|length }}</p> , \u5982\u679c\u65e0\u6cd5\u7edf\u8ba1\u957f\u5ea6\u4f1a\u9ed8\u8ba4\u8fd4\u56de0 \u52a0\u6cd5\u8fd0\u7b97\uff1a {{ n|add:666 }} \uff0c \u5185\u90e8\u5f02\u5e38\u6355\u83b7 \u652f\u6301\u6570\u5b57\u76f8\u52a0 \u5b57\u7b26\u4e32\u62fc\u63a5 \u90fd\u4e0d\u7b26\u5408\u8fd4\u56de\u7a7a \u5207\u7247\u64cd\u4f5c\uff1a {{ lt|slice:'0:5:2' }} \uff0c \u987e\u5934\u4e0d\u987e\u5c3e \u4e5f\u652f\u6301\u6b65\u957f \u81ea\u52a8\u8f6c\u6210\u6587\u4ef6\u5927\u5c0f\u683c\u5f0f \uff1a {{ file_size|filesizeformat }} \u622a\u53d6\u6587\u672c\u5185\u5bb9\uff1a s|truncatechars:5 \uff08\u6309\u5b57\u7b26\u8ba1\u7b97\uff09\u622a\u53d6\u4e94\u4e2a\u5b57\u7b26\uff0c\u4e09\u4e2a\u70b9\u4e5f\u7b97 \u622a\u53d6\u6587\u672c\u5185\u5bb9\uff1a {{ s1|truncatewords:5 }} \uff0c (\u6309\u7167\u7a7a\u683c\u8ba1\u7b97) \u622a\u53d6\u4e94\u4e2a\u5355\u8bcd \u4e09\u4e2a\u70b9\u4e0d\u7b97 \u5224\u65ad\u662f\u5426\u6709\u503c\uff1a {{ is_value|default:'is_value\u53d8\u91cf\u540d\u6307\u5411\u7684\u503c\u4e3a\u7a7a' }} , \u6709\u503c\u5c55\u793a\u503c\u672c\u8eab \u6ca1\u503c\u5c55\u793a\u9ed8\u8ba4\u503c \u5c55\u793a\u5e26\u6709\u6807\u7b7e\u7684\u6587\u672c \uff1a {{ sss }} \u9ed8\u8ba4\u60c5\u51b5\u4e0b \u662f\u4e0d\u4f1a\u81ea\u52a8\u8f6c\u6362\u6210\u524d\u7aefhtml\u6807\u7b7e\uff0c\u9632\u6b62\u6076\u610f\u653b\u51fb \u524d\u540e\u7aef\u53d6\u6d88\u8f6c\u4e49 \u524d\u7aef\uff1a <p>{{ sss|safe}}</p> \u8fd9\u6837\u5c31\u53ef\u4ee5\u81ea\u52a8\u8f6c\u6362\u6210\u524d\u7aefhtml\u6807\u7b7e \u540e\u7aef\uff1a from django.utils.safestring import mark_safe def test ( request ): sss2 = \"<h2>h2\u6807\u7b7e</h2>\" res = mark_safe ( sss2 ) return render ( request , 'test.html' , locals ()) # \u524d\u7aef\u4f20res\u5c31\u884c\u4e86 \u4e5f\u5c31\u610f\u5473\u7740 html\u4ee3\u7801\u53ef\u4ee5\u4e0d\u5728html\u6587\u4ef6\u5185\u5199\uff0c\u53ef\u4ee5\u5728\u540e\u7aef\u5199\u5b8c\u4e86\u4f20\u7ed9\u524d\u7aef \u6807\u7b7e # \u903b\u8f91\u76f8\u5173\u7684\u8bed\u6cd5 for\u5faa\u73af\uff1a # < p > \u6807\u7b7e \u903b\u8f91\u76f8\u5173 </ p > {% for foo in lt %} < p > {{ forloop }} </ p > < p > {{ foo }} </ p > {% endfor %} forloop \u5185\u7f6e\u7684\u5bf9\u8c61\uff1a {'parentloop': {}, 'counter0': 0, 'counter': 1, 'revcounter': 6, 'revcounter0': 5, 'first': True, 'last': False} if\u5224\u65ad # {% if s %} < p > s\u6709\u503c </ p > {% else %} < p > s\u6ca1\u6709\u503c </ p > {% endif %} for\u5faa\u73af\u548cif\u5224\u65ad\u8054\u5408\u4f7f\u7528 # {% for foo in lt %} {% if forloop.first %} < p > \u7b2c\u4e00\u6b21 </ p > {% elif forloop.last %} < p > \u6700\u540e\u4e00\u6b21 </ p > {% else %} < p > {{ foo }}\u6709\u70b9\u610f\u601d </ p > {% endif %} {% endfor %} {% empty %} <p>\u5f53for\u5faa\u73af\u7684\u5bf9\u8c61\u662f\u7a7a\u7684\u65f6\u5019\u4f1a\u8d70 </p> with\u8d77\u522b\u540d # \u540e\u7aef\u6709\u4e2a\u5927\u5b57\u5178\uff0c\u4f20\u5230\u524d\u7aef\uff1a comp_dic = { 'username' : '123' , 'hobby' :[ 'study' , 'run' , [ 'rap' , { 'age' : 20 }]]} \u524d\u7aef: <p>{{ comp_dic.hobby.2.1.age }}</p> \u6ce8\u610f\uff1a\u6a21\u677f\u8bed\u6cd5\u7684\u53d6\u503c \u53ea\u6709\u4e00\u79cd\u65b9\u5f0f \u7edf\u4e00\u91c7\u7528\u53e5\u70b9\u7b26 < p > \u5f53\u4f60\u7684\u6570\u636e\u662f\u901a\u8fc7\u591a\u4e2a\u53e5\u70b9\u7b26\u83b7\u53d6\u5230\u7684\uff0c\u540e\u7eed\u53c8\u9700\u8981\u7ecf\u5e38\u4f7f\u7528\uff0c\u53ef\u4ee5\u7ed9\u8be5\u6570\u636e\u8d77\u522b\u540d\uff0c\u4f46\u522b\u540d\u53ea\u80fd\u5728with\u5185\u90e8\u4f7f\u7528 </ p > {% with comp_dic.hobby.2.1.age as age %} < p > {{ age }} </ p > {% endwith %} \u81ea\u5b9a\u4e49\u8fc7\u6ee4\u5668\u548c\u6807\u7b7e # django\u652f\u6301\u7528\u6237\u81ea\u5b9a\u4e49\u8fc7\u6ee4\u5668\u548c\u6807\u7b7e \u6709\u4e09\u4e2a\u6b65\u9aa4\uff1a \u5728\u5e94\u7528\u540d\u4e0b\u65b0\u5efa\u4e00\u4e2a\u540d\u5b57\u5fc5\u987b\u53eb\u505atemplatetags\u7684\u6587\u4ef6\u5939 \u5728\u8be5\u6587\u4ef6\u5939\u5185\uff0c\u65b0\u5efa\u4e00\u4e2a\u4efb\u610f\u540d\u79f0\u7684py\u6587\u4ef6 \u5728\u8be5py\u6587\u4ef6\u4e2d\uff0c\u5fc5\u987b\u5148\u5199\u4e0b\u9762\u4e24\u53e5\u4ee3\u7801 from django.template import Library register = Library () \u4e4b\u540e\u5c31\u53ef\u4ee5\u7528register\u81ea\u5b9a\u4e49\u8fc7\u6ee4\u5668\u548c\u6807\u7b7e\u4e86 \u81ea\u5b9a\u4e49\u8fc7\u6ee4\u5668 # \u548c\u9ed8\u8ba4\u7684\u8fc7\u6ee4\u5668\u4e00\u6837 \u6700\u591a\u53ea\u80fd\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570 from django.template import Library register = Library () # \u81ea\u5b9a\u4e49\u8fc7\u6ee4\u5668 @register . filter ( name = 'neo' ) def index ( a , b ): return a + b # \u4e24\u4e2a\u6570\u7684\u548c \u9700\u8981\u5148\u5728html\u9875\u9762\u4e0a \u52a0\u8f7d {% load mytag %} {{ 1|neo:2 }} \u81ea\u5b9a\u4e49\u7684\u8fc7\u6ee4\u5668\u53ef\u4ee5\u5728\u903b\u8f91\u8bed\u53e5\u4e2d\u4f7f\u7528\uff0c\u800c\u81ea\u5b9a\u4e49\u7684\u6807\u7b7e\u4e0d\u53ef\u4ee5 {% load mytag %} {% if 1|neo:2 %} < p > \u6709\u503c </ p > {% else %} < p > \u6ca1\u6709\u503c </ p > {% endif %} \u81ea\u5b9a\u4e49\u6807\u7b7e # \u53ef\u4ee5\u63a5\u6536\u4efb\u610f\u591a\u4e2a\u53c2\u6570\uff0c\u53c2\u6570\u4e0e\u53c2\u6570\u4e4b\u95f4\u5fc5\u987b\u7a7a\u683c\u9694\u5f00 from django.template import Library register = Library () @register . simple_tag ( name = 'mytag' ) def mytag ( a , b , c , d ): return ' %s * %s * %s * %s ' % ( a , b , c , d ) # \u63a5\u6536\u56db\u4e2a\u53c2\u6570\u7528*\u62fc\u63a5 \u81ea\u5b9a\u4e49inclusion_tag # \u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u80fd\u591f\u63a5\u6536\u5916\u754c\u4f20\u5165\u7684\u53c2\u6570\uff0c\u7136\u540e\u4f20\u9012\u7ed9\u4e00\u4e2a\u9875\u9762\uff0c\u9875\u9762\u4e0a\u83b7\u53d6\u6570\u636e\uff0c\u6e32\u67d3\u5b8c\u6210\u4e4b\u540e\uff0c\u5c06\u6e32\u67d3\u597d\u7684\u9875\u9762\u653e\u5230\u8c03\u7528inclusion_tag\u7684\u5730\u65b9\u3002 mytag.py from django.template import Library register = Library () @register . inclusion_tag ( 'mytag.html' , name = 'xxx' ) def func ( n ): lt = [] for i in range ( n ): lt . append ( f '\u7b2c { i } \u9879' ) return locals () # \u5c06lt\u76f4\u63a5\u4f20\u9012\u7ed9mytag\u9875\u9762 template\u6587\u4ef6\u5939\u4e0bmytag.html < ul > {% for foo in lt %} < li > {{ foo }} </ li > {% endfor %} </ ul > views.py\u8fd4\u56de\u7684test.html\u9875\u9762 {% load mytag %} {% xxx 5 %} \u6ce8\u610f\uff1a \u5f53\u4f60\u9700\u8981\u4f7f\u7528\u4e00\u4e9b\u9875\u9762\u7ec4\u4ef6\u7684\u65f6\u5019 \u5e76\u4e14\u8be5\u9875\u9762\u7ec4\u4ef6\u9700\u8981\u53c2\u6570\u624d\u80fd\u591f\u6b63\u5e38\u6e32\u67d3 \u4f60\u53ef\u4ee5\u8003\u8651\u4f7f\u7528inclusion_tag \u6a21\u677f\u7684\u7ee7\u627f # \u7ee7\u627f\u6a21\u677fextends # \u5728\u5b50\u9875\u9762\u4e2d\u5728\u9875\u9762\u6700\u4e0a\u65b9\u4f7f\u7528\u4e0b\u9762\u7684\u8bed\u6cd5\u6765\u7ee7\u627f\u6bcd\u677f {% extends 'home.html' %} \u5757\uff08block\uff09 # \u5728\u7236\u9875\u9762\u4e0a\u5229\u7528block\u5212\u5b9a\u60f3\u8981\u4fee\u6539\u7684\u533a\u57df\uff0c\u7ee7\u627f\u540e\u5c31\u53ef\u4ee5\u901a\u8fc7\u540d\u5b57\u627e\u5230\u5bf9\u5e94\u7684\u540d\u5b57\u627e\u5230\u8be5\u533a\u57df\uff0c\u5e76\u4fee\u6539 \u6a21\u677f\u4e0a\u7684block\u533a\u57df\u8d8a\u591a\uff0c\u9875\u9762\u7684\u6269\u5c55\u6027\u8d8a\u5f3a\uff0c\u63a8\u8350\u4f60\u4e00\u4e2a\u6a21\u677f\u9875\u9762\u81f3\u5c11\u6709\u4e09\u5757\u533a\u57df\uff08css\u533a\u57df\uff0chtml\u4ee3\u7801\u533a\u57df\uff0cjs\u533a\u57df\uff09 \u901a\u8fc7\u8fd9\u4e09\u4e2a\u533a\u57df\uff0c\u5c31\u80fd\u591f\u5b9e\u73b0\u6bcf\u4e00\u4e2a\u9875\u9762\u90fd\u6709\u81ea\u5df1\u72ec\u7acb\u7684css\u548cjs\u4ee3\u7801 \u53ef\u4ee5\u5728\u5b50\u9875\u9762\u4e0a\u901a\u8fc7{{ block.super }}\u6cbf\u7528\u7236\u9875\u9762\u7684\u5185\u5bb9 \u5bfc\u5165\uff08include\uff09 # \u5c06html\u9875\u9762\u5f53\u505a\u6a21\u5757\u7684\u76f4\u63a5\u5bfc\u5165\u4f7f\u7528\uff1a {% include 'form.html'%} {% block content %} < p > \u6211\u6539\u6210home1\u9875\u9762\u5185\u5bb9 </ p > {{block.super}} {% include 'form.html' %} {% endblock %} {% block css %} < style > p { color : green ; } </ style > {% endblock %} {% block js %} < script > alert ( 'login' ) </ script > {% endblock %}","title":"08 django\u4e4b\u6a21\u677f\u5c42"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/08%20django%E4%B9%8B%E6%A8%A1%E6%9D%BF%E5%B1%82/#django","text":"","title":"django\u4e4b\u6a21\u677f\u5c42"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/08%20django%E4%B9%8B%E6%A8%A1%E6%9D%BF%E5%B1%82/#_1","text":"\u4e24\u79cd\u4e66\u5199\u683c\u5f0f\uff1a - \u53d8\u91cf\u76f8\u5173\u7528 {{ }} - \u903b\u8f91\u76f8\u5173\u7528 {% %}","title":"\u6a21\u677f\u8bed\u6cd5"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/08%20django%E4%B9%8B%E6%A8%A1%E6%9D%BF%E5%B1%82/#_2","text":"","title":"\u6a21\u677f\u4f20\u503c"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/08%20django%E4%B9%8B%E6%A8%A1%E6%9D%BF%E5%B1%82/#html","text":"\u7b2c\u4e00\u79cd\u65b9\u5f0f def test ( request ): n = 1 f = 1.21 s = 'hellow world' lt = [ 11 , 22 , 33 , 44 , 55 , 66 ] tu = ( 111 , 222 , 333 ) dic = { 'username' : 'neo' , 'password' : '123' } se = { 1 , 3 , 5 , 7 , 9 } bo = True return render ( request , 'test.html' , 'n' : n , 'dic' : dic ) \u5f0a\u7aef\u5c31\u662f\uff1a\u5f53\u8981\u4f20\u7684\u53d8\u91cf\u540d\u5f88\u591a\u7684\u65f6\u5019\uff0c\u5c31\u5f88\u9ebb\u70e6 \u7b2c\u4e8c\u79cd locals() locals() \u4f1a\u5c06\u5f53\u524d\u6240\u5728\u7684\u540d\u79f0\u7a7a\u95f4\u4e2d\u6240\u6709\u7684\u540d\u5b57\u5168\u90e8\u4f20\u9012\u7ed9html\u9875\u9762","title":"\u7ed9html\u9875\u9762\u4f20\u503c\u7684\u4e24\u79cd\u65b9\u5f0f"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/08%20django%E4%B9%8B%E6%A8%A1%E6%9D%BF%E5%B1%82/#_3","text":"def test ( request ): n = 1 f = 1.21 s = 'hellow world' lt = [ 11 , 22 , 33 , 44 , 55 , 66 ] tu = ( 111 , 222 , 333 ) dic = { 'username' : 'neo' , 'password' : '123' } se = { 1 , 3 , 5 , 7 , 9 } bo = True return render ( request , 'test.html' , locals ()) \u524d\u7aef\u63a5\u6536\uff1a < p > {{ n }} </ p > < p > {{ f }} </ p > < p > {{ lt }} </ p > < p > {{ tu }} </ p > < p > {{ s }} </ p > < p > {{ se }} </ p > < p > {{ bo }} </ p > < p > {{ dic }} </ p >","title":"\u4f20\u503c  \u57fa\u672c\u6570\u636e\u7c7b\u578b"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/08%20django%E4%B9%8B%E6%A8%A1%E6%9D%BF%E5%B1%82/#_4","text":"def test ( request ): def func1 (): pass return render ( request , 'test.html' , locals ()) \u524d\u7aef < p > \u4f20\u51fd\u6570\u540d {{ func1 }} </ p > \u663e\u793a\u6548\u679c\uff1a \u4f20\u51fd\u6570\u540d None \u6ce8\u610f\uff1a \u7ed9HTML\u9875\u9762\u4f20\u9012\u51fd\u6570\u540d\u7684\u65f6\u5019\uff0c\u6a21\u677f\u8bed\u6cd5\u4f1a\u81ea\u52a8\u52a0\u62ec\u53f7\u8c03\u7528\u8be5\u51fd\u6570\uff0c\u5e76\u4e14\u5c06\u51fd\u6570\u7684\u8fd4\u56de\u503c\u663e\u793a\u5728\u6d4f\u89c8\u5668\u9875\u9762\u4e0a \u3002 \u4f46\u662f\u6a21\u677f\u8bed\u6cd5\u4e0d\u652f\u6301\u51fd\u6570\u4f20\u53c2\uff0c\u610f\u5473\u7740\u7ed9html\u9875\u9762\u4f20\u7684\u51fd\u6570\u53ea\u80fd\u662f\u4e0d\u9700\u8981\u4f20\u53c2\u6570\u8c03\u7528\u7684\u51fd\u6570\u3002","title":"\u4f20\u51fd\u6570\u540d"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/08%20django%E4%B9%8B%E6%A8%A1%E6%9D%BF%E5%B1%82/#_5","text":"def func1 (): pass class MyClass ( object ): def get_self ( self ): return 'get_self' @classmethod def get_cls ( cls ): return 'get_cls' @staticmethod def get_func (): return 'get_func' obj = MyClass () \u524d\u7aef\uff1a < p > \u4f20\u7c7b\u540d\uff1a{{ MyClass }} </ p > < p > \u4f20\u5bf9\u8c61\u540d: {{ obj }} </ p > < p > {{ obj.get_cls }} </ p > < p > {{ obj.get_self }} </ p > < p > {{ obj.get_func }} </ p > \u603b\u7ed3:\u53ea\u8981\u662f\u80fd\u591f\u52a0\u62ec\u53f7\u8c03\u7528\u7684 \u4f20\u9012\u5230html\u9875\u9762\u4e0a\u90fd\u4f1a\u81ea\u52a8\u52a0\u62ec\u53f7\u8c03\u7528","title":"\u4f20\u7c7b\u540d\u548c\u5bf9\u8c61"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/08%20django%E4%B9%8B%E6%A8%A1%E6%9D%BF%E5%B1%82/#_6","text":"","title":"\u8fc7\u6ee4\u5668"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/08%20django%E4%B9%8B%E6%A8%A1%E6%9D%BF%E5%B1%82/#_7","text":"\u7528 | \u6765\u4f7f\u7528\uff0c \u4f1a\u81ea\u52a8\u5c06 | \u5de6\u8fb9\u7684\u6570\u636e\u5f53\u4f5c\u8fc7\u6ee4\u5668\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20\u5165, : \u53f3\u8fb9\u7684\u5f53\u4f5c\u7b2c\u4e8c\u4e2a\u53c2\u6570 <p>\u7edf\u8ba1\u957f\u5ea6\uff1a{{ s|length }}</p>","title":"\u8bed\u6cd5\u7ed3\u6784"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/08%20django%E4%B9%8B%E6%A8%A1%E6%9D%BF%E5%B1%82/#_8","text":"\u7edf\u8ba1\u957f\u5ea6 \uff1a <p>\u7edf\u8ba1\u957f\u5ea6\uff1a{{ s|length }}</p> , \u5982\u679c\u65e0\u6cd5\u7edf\u8ba1\u957f\u5ea6\u4f1a\u9ed8\u8ba4\u8fd4\u56de0 \u52a0\u6cd5\u8fd0\u7b97\uff1a {{ n|add:666 }} \uff0c \u5185\u90e8\u5f02\u5e38\u6355\u83b7 \u652f\u6301\u6570\u5b57\u76f8\u52a0 \u5b57\u7b26\u4e32\u62fc\u63a5 \u90fd\u4e0d\u7b26\u5408\u8fd4\u56de\u7a7a \u5207\u7247\u64cd\u4f5c\uff1a {{ lt|slice:'0:5:2' }} \uff0c \u987e\u5934\u4e0d\u987e\u5c3e \u4e5f\u652f\u6301\u6b65\u957f \u81ea\u52a8\u8f6c\u6210\u6587\u4ef6\u5927\u5c0f\u683c\u5f0f \uff1a {{ file_size|filesizeformat }} \u622a\u53d6\u6587\u672c\u5185\u5bb9\uff1a s|truncatechars:5 \uff08\u6309\u5b57\u7b26\u8ba1\u7b97\uff09\u622a\u53d6\u4e94\u4e2a\u5b57\u7b26\uff0c\u4e09\u4e2a\u70b9\u4e5f\u7b97 \u622a\u53d6\u6587\u672c\u5185\u5bb9\uff1a {{ s1|truncatewords:5 }} \uff0c (\u6309\u7167\u7a7a\u683c\u8ba1\u7b97) \u622a\u53d6\u4e94\u4e2a\u5355\u8bcd \u4e09\u4e2a\u70b9\u4e0d\u7b97 \u5224\u65ad\u662f\u5426\u6709\u503c\uff1a {{ is_value|default:'is_value\u53d8\u91cf\u540d\u6307\u5411\u7684\u503c\u4e3a\u7a7a' }} , \u6709\u503c\u5c55\u793a\u503c\u672c\u8eab \u6ca1\u503c\u5c55\u793a\u9ed8\u8ba4\u503c \u5c55\u793a\u5e26\u6709\u6807\u7b7e\u7684\u6587\u672c \uff1a {{ sss }} \u9ed8\u8ba4\u60c5\u51b5\u4e0b \u662f\u4e0d\u4f1a\u81ea\u52a8\u8f6c\u6362\u6210\u524d\u7aefhtml\u6807\u7b7e\uff0c\u9632\u6b62\u6076\u610f\u653b\u51fb \u524d\u540e\u7aef\u53d6\u6d88\u8f6c\u4e49 \u524d\u7aef\uff1a <p>{{ sss|safe}}</p> \u8fd9\u6837\u5c31\u53ef\u4ee5\u81ea\u52a8\u8f6c\u6362\u6210\u524d\u7aefhtml\u6807\u7b7e \u540e\u7aef\uff1a from django.utils.safestring import mark_safe def test ( request ): sss2 = \"<h2>h2\u6807\u7b7e</h2>\" res = mark_safe ( sss2 ) return render ( request , 'test.html' , locals ()) # \u524d\u7aef\u4f20res\u5c31\u884c\u4e86 \u4e5f\u5c31\u610f\u5473\u7740 html\u4ee3\u7801\u53ef\u4ee5\u4e0d\u5728html\u6587\u4ef6\u5185\u5199\uff0c\u53ef\u4ee5\u5728\u540e\u7aef\u5199\u5b8c\u4e86\u4f20\u7ed9\u524d\u7aef","title":"\u5e38\u7528\u7684\u65b9\u6cd5"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/08%20django%E4%B9%8B%E6%A8%A1%E6%9D%BF%E5%B1%82/#_9","text":"\u903b\u8f91\u76f8\u5173\u7684\u8bed\u6cd5","title":"\u6807\u7b7e"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/08%20django%E4%B9%8B%E6%A8%A1%E6%9D%BF%E5%B1%82/#for","text":"< p > \u6807\u7b7e \u903b\u8f91\u76f8\u5173 </ p > {% for foo in lt %} < p > {{ forloop }} </ p > < p > {{ foo }} </ p > {% endfor %} forloop \u5185\u7f6e\u7684\u5bf9\u8c61\uff1a {'parentloop': {}, 'counter0': 0, 'counter': 1, 'revcounter': 6, 'revcounter0': 5, 'first': True, 'last': False}","title":"for\u5faa\u73af\uff1a"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/08%20django%E4%B9%8B%E6%A8%A1%E6%9D%BF%E5%B1%82/#if","text":"{% if s %} < p > s\u6709\u503c </ p > {% else %} < p > s\u6ca1\u6709\u503c </ p > {% endif %}","title":"if\u5224\u65ad"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/08%20django%E4%B9%8B%E6%A8%A1%E6%9D%BF%E5%B1%82/#forif","text":"{% for foo in lt %} {% if forloop.first %} < p > \u7b2c\u4e00\u6b21 </ p > {% elif forloop.last %} < p > \u6700\u540e\u4e00\u6b21 </ p > {% else %} < p > {{ foo }}\u6709\u70b9\u610f\u601d </ p > {% endif %} {% endfor %} {% empty %} <p>\u5f53for\u5faa\u73af\u7684\u5bf9\u8c61\u662f\u7a7a\u7684\u65f6\u5019\u4f1a\u8d70 </p>","title":"for\u5faa\u73af\u548cif\u5224\u65ad\u8054\u5408\u4f7f\u7528"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/08%20django%E4%B9%8B%E6%A8%A1%E6%9D%BF%E5%B1%82/#with","text":"\u540e\u7aef\u6709\u4e2a\u5927\u5b57\u5178\uff0c\u4f20\u5230\u524d\u7aef\uff1a comp_dic = { 'username' : '123' , 'hobby' :[ 'study' , 'run' , [ 'rap' , { 'age' : 20 }]]} \u524d\u7aef: <p>{{ comp_dic.hobby.2.1.age }}</p> \u6ce8\u610f\uff1a\u6a21\u677f\u8bed\u6cd5\u7684\u53d6\u503c \u53ea\u6709\u4e00\u79cd\u65b9\u5f0f \u7edf\u4e00\u91c7\u7528\u53e5\u70b9\u7b26 < p > \u5f53\u4f60\u7684\u6570\u636e\u662f\u901a\u8fc7\u591a\u4e2a\u53e5\u70b9\u7b26\u83b7\u53d6\u5230\u7684\uff0c\u540e\u7eed\u53c8\u9700\u8981\u7ecf\u5e38\u4f7f\u7528\uff0c\u53ef\u4ee5\u7ed9\u8be5\u6570\u636e\u8d77\u522b\u540d\uff0c\u4f46\u522b\u540d\u53ea\u80fd\u5728with\u5185\u90e8\u4f7f\u7528 </ p > {% with comp_dic.hobby.2.1.age as age %} < p > {{ age }} </ p > {% endwith %}","title":"with\u8d77\u522b\u540d"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/08%20django%E4%B9%8B%E6%A8%A1%E6%9D%BF%E5%B1%82/#_10","text":"django\u652f\u6301\u7528\u6237\u81ea\u5b9a\u4e49\u8fc7\u6ee4\u5668\u548c\u6807\u7b7e \u6709\u4e09\u4e2a\u6b65\u9aa4\uff1a \u5728\u5e94\u7528\u540d\u4e0b\u65b0\u5efa\u4e00\u4e2a\u540d\u5b57\u5fc5\u987b\u53eb\u505atemplatetags\u7684\u6587\u4ef6\u5939 \u5728\u8be5\u6587\u4ef6\u5939\u5185\uff0c\u65b0\u5efa\u4e00\u4e2a\u4efb\u610f\u540d\u79f0\u7684py\u6587\u4ef6 \u5728\u8be5py\u6587\u4ef6\u4e2d\uff0c\u5fc5\u987b\u5148\u5199\u4e0b\u9762\u4e24\u53e5\u4ee3\u7801 from django.template import Library register = Library () \u4e4b\u540e\u5c31\u53ef\u4ee5\u7528register\u81ea\u5b9a\u4e49\u8fc7\u6ee4\u5668\u548c\u6807\u7b7e\u4e86","title":"\u81ea\u5b9a\u4e49\u8fc7\u6ee4\u5668\u548c\u6807\u7b7e"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/08%20django%E4%B9%8B%E6%A8%A1%E6%9D%BF%E5%B1%82/#_11","text":"\u548c\u9ed8\u8ba4\u7684\u8fc7\u6ee4\u5668\u4e00\u6837 \u6700\u591a\u53ea\u80fd\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570 from django.template import Library register = Library () # \u81ea\u5b9a\u4e49\u8fc7\u6ee4\u5668 @register . filter ( name = 'neo' ) def index ( a , b ): return a + b # \u4e24\u4e2a\u6570\u7684\u548c \u9700\u8981\u5148\u5728html\u9875\u9762\u4e0a \u52a0\u8f7d {% load mytag %} {{ 1|neo:2 }} \u81ea\u5b9a\u4e49\u7684\u8fc7\u6ee4\u5668\u53ef\u4ee5\u5728\u903b\u8f91\u8bed\u53e5\u4e2d\u4f7f\u7528\uff0c\u800c\u81ea\u5b9a\u4e49\u7684\u6807\u7b7e\u4e0d\u53ef\u4ee5 {% load mytag %} {% if 1|neo:2 %} < p > \u6709\u503c </ p > {% else %} < p > \u6ca1\u6709\u503c </ p > {% endif %}","title":"\u81ea\u5b9a\u4e49\u8fc7\u6ee4\u5668"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/08%20django%E4%B9%8B%E6%A8%A1%E6%9D%BF%E5%B1%82/#_12","text":"\u53ef\u4ee5\u63a5\u6536\u4efb\u610f\u591a\u4e2a\u53c2\u6570\uff0c\u53c2\u6570\u4e0e\u53c2\u6570\u4e4b\u95f4\u5fc5\u987b\u7a7a\u683c\u9694\u5f00 from django.template import Library register = Library () @register . simple_tag ( name = 'mytag' ) def mytag ( a , b , c , d ): return ' %s * %s * %s * %s ' % ( a , b , c , d ) # \u63a5\u6536\u56db\u4e2a\u53c2\u6570\u7528*\u62fc\u63a5","title":"\u81ea\u5b9a\u4e49\u6807\u7b7e"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/08%20django%E4%B9%8B%E6%A8%A1%E6%9D%BF%E5%B1%82/#inclusion_tag","text":"\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u80fd\u591f\u63a5\u6536\u5916\u754c\u4f20\u5165\u7684\u53c2\u6570\uff0c\u7136\u540e\u4f20\u9012\u7ed9\u4e00\u4e2a\u9875\u9762\uff0c\u9875\u9762\u4e0a\u83b7\u53d6\u6570\u636e\uff0c\u6e32\u67d3\u5b8c\u6210\u4e4b\u540e\uff0c\u5c06\u6e32\u67d3\u597d\u7684\u9875\u9762\u653e\u5230\u8c03\u7528inclusion_tag\u7684\u5730\u65b9\u3002 mytag.py from django.template import Library register = Library () @register . inclusion_tag ( 'mytag.html' , name = 'xxx' ) def func ( n ): lt = [] for i in range ( n ): lt . append ( f '\u7b2c { i } \u9879' ) return locals () # \u5c06lt\u76f4\u63a5\u4f20\u9012\u7ed9mytag\u9875\u9762 template\u6587\u4ef6\u5939\u4e0bmytag.html < ul > {% for foo in lt %} < li > {{ foo }} </ li > {% endfor %} </ ul > views.py\u8fd4\u56de\u7684test.html\u9875\u9762 {% load mytag %} {% xxx 5 %} \u6ce8\u610f\uff1a \u5f53\u4f60\u9700\u8981\u4f7f\u7528\u4e00\u4e9b\u9875\u9762\u7ec4\u4ef6\u7684\u65f6\u5019 \u5e76\u4e14\u8be5\u9875\u9762\u7ec4\u4ef6\u9700\u8981\u53c2\u6570\u624d\u80fd\u591f\u6b63\u5e38\u6e32\u67d3 \u4f60\u53ef\u4ee5\u8003\u8651\u4f7f\u7528inclusion_tag","title":"\u81ea\u5b9a\u4e49inclusion_tag"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/08%20django%E4%B9%8B%E6%A8%A1%E6%9D%BF%E5%B1%82/#_13","text":"","title":"\u6a21\u677f\u7684\u7ee7\u627f"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/08%20django%E4%B9%8B%E6%A8%A1%E6%9D%BF%E5%B1%82/#extends","text":"\u5728\u5b50\u9875\u9762\u4e2d\u5728\u9875\u9762\u6700\u4e0a\u65b9\u4f7f\u7528\u4e0b\u9762\u7684\u8bed\u6cd5\u6765\u7ee7\u627f\u6bcd\u677f {% extends 'home.html' %}","title":"\u7ee7\u627f\u6a21\u677fextends"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/08%20django%E4%B9%8B%E6%A8%A1%E6%9D%BF%E5%B1%82/#block","text":"\u5728\u7236\u9875\u9762\u4e0a\u5229\u7528block\u5212\u5b9a\u60f3\u8981\u4fee\u6539\u7684\u533a\u57df\uff0c\u7ee7\u627f\u540e\u5c31\u53ef\u4ee5\u901a\u8fc7\u540d\u5b57\u627e\u5230\u5bf9\u5e94\u7684\u540d\u5b57\u627e\u5230\u8be5\u533a\u57df\uff0c\u5e76\u4fee\u6539 \u6a21\u677f\u4e0a\u7684block\u533a\u57df\u8d8a\u591a\uff0c\u9875\u9762\u7684\u6269\u5c55\u6027\u8d8a\u5f3a\uff0c\u63a8\u8350\u4f60\u4e00\u4e2a\u6a21\u677f\u9875\u9762\u81f3\u5c11\u6709\u4e09\u5757\u533a\u57df\uff08css\u533a\u57df\uff0chtml\u4ee3\u7801\u533a\u57df\uff0cjs\u533a\u57df\uff09 \u901a\u8fc7\u8fd9\u4e09\u4e2a\u533a\u57df\uff0c\u5c31\u80fd\u591f\u5b9e\u73b0\u6bcf\u4e00\u4e2a\u9875\u9762\u90fd\u6709\u81ea\u5df1\u72ec\u7acb\u7684css\u548cjs\u4ee3\u7801 \u53ef\u4ee5\u5728\u5b50\u9875\u9762\u4e0a\u901a\u8fc7{{ block.super }}\u6cbf\u7528\u7236\u9875\u9762\u7684\u5185\u5bb9","title":"\u5757\uff08block\uff09"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/08%20django%E4%B9%8B%E6%A8%A1%E6%9D%BF%E5%B1%82/#include","text":"\u5c06html\u9875\u9762\u5f53\u505a\u6a21\u5757\u7684\u76f4\u63a5\u5bfc\u5165\u4f7f\u7528\uff1a {% include 'form.html'%} {% block content %} < p > \u6211\u6539\u6210home1\u9875\u9762\u5185\u5bb9 </ p > {{block.super}} {% include 'form.html' %} {% endblock %} {% block css %} < style > p { color : green ; } </ style > {% endblock %} {% block js %} < script > alert ( 'login' ) </ script > {% endblock %}","title":"\u5bfc\u5165\uff08include\uff09"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/09%20django%E4%B9%8B%E6%A8%A1%E5%9E%8B%E5%B1%82/","text":"django\u4e4b\u6a21\u578b\u5c42 # \u914d\u7f6e\u6d4b\u8bd5\u6587\u4ef6 # \u7b2c\u4e00\u79cd\u65b9\u6cd5\uff1a \u76f4\u63a5\u5728\u67d0\u4e00\u4e2a\u5e94\u7528\u4e0b\u7684test\u6587\u4ef6\u4e2d\u4e66\u5199\uff08\u524d\u56db\u884c\u4ee3\u7801\u53bbmanage.py\u4e2d\u62f7\u8d1d\uff09\uff1a import os if __name__ == \"__main__\" : os . environ . setdefault ( \"DJANGO_SETTINGS_MODULE\" , \"mysite.settings\" ) import django django . setup () \u7b2c\u4e8c\u79cd\u65b9\u6cd5\uff1a \u76f4\u63a5\u65b0\u5efa\u4e00\u4e2a\u4efb\u610f\u540d\u79f0\u7684py\u6587\u4ef6 \u5728\u91cc\u9762\u5199\u4e0a\u4e0a\u9762\u7684\u914d\u7f6e ORM\u5355\u8868\u64cd\u4f5c # \u5148\u524d\u64cd\u4f5c # # \u6a21\u578b\u7c7b class Books ( models . Model ): title = models . CharField ( max_length = 32 ) price = models . DecimalField ( max_digits = 8 , decimal_places = 2 ) publish_date = models . DateField () \u521b\u5efa\u6570\u636e # # \u65b9\u5f0f1\uff1acreate\u65b9\u6cd5 models . Books . objects . create ( title = '\u4e09\u56fd\u6f14\u4e49' , price = 345.66 , publish_date = '2019-11-27' ) # \u65b9\u5f0f2\uff1a\u5229\u7528\u5bf9\u8c61\u7684\u7ed1\u5b9a\u65b9\u6cd5 book_obj = models . Books ( title = '\u7ea2\u697c\u68a6' , price = 235.66 , publish_date = '2018-09-12' ) book_obj . save () \u4fee\u6539\u6570\u636e # # \u65b9\u5f0f1\uff1a\u5229\u7528queryset\u65b9\u6cd5 res = models . Books . objects . filter ( pk = 1 ) . update ( price = 320.23 ) print ( res ) # <QuerySet [<Books: Books object>]> # \u65b9\u5f0f2\uff1a\u5229\u7528\u5bf9\u8c61 (\u4e0d\u63a8\u8350\u4f7f\u7528) \u5229\u7528\u5bf9\u8c61\u4fee\u6539 \u5185\u90e8\u5176\u5b9e\u662f\u4ece\u5934\u5230\u5c3e\u5c06\u6570\u636e\u7684\u6240\u6709\u5b57\u6bb5\u90fd\u91cd\u65b0\u5199\u4e00\u904d book_obj = models . Books . objects . get ( pk = 2 ) book_obj . price = 150.33 book_obj . save () \u6ce8\uff1a pk \u4f1a\u81ea\u52a8\u67e5\u627e\u5f53\u524d\u8868\u7684\u4e3b\u952e\u5b57\u6bb5 filter\u67e5\u8be2\u51fa\u6765\u7684\u7ed3\u679c\u662f\u4e00\u4e2a QuerySet \u5bf9\u8c61 QuerySet\u5bf9\u8c61\u7279\u70b9 # \u53ea\u8981\u662fQuerySet\u5bf9\u8c61\u5c31\u53ef\u4ee5\u65e0\u9650\u5236\u7684\u8c03\u7528QuerySet\u7684\u65b9\u6cd5 book_obj = models . Books . objects . filter ( pk = 1 ) . filter () . filter () # \u53ef\u4ee5\u65e0\u9650\u5236 \u7684\u5220\u9009 \u53ea\u8981\u662fQuerySet\u5bf9\u8c61\u5c31\u53ef\u4ee5\u7528\u53e5\u70b9\u7b26 \u70b9query\u67e5\u770b\u5f53\u524d\u5185\u90e8\u5bf9\u5e94\u7684sql\u8bed\u53e5 book_obj = models . Books . objects . filter ( pk = 1 ) print ( book_obj . query ) get\u548cfilter\u533a\u522b # filter\u83b7\u53d6\u5230\u7684\u662f\u4e00\u4e2aqueryset\u5bf9\u8c61\uff0c\u7c7b\u4f3c\u4e8e\u4e00\u4e2a\u5217\u8868 get\u83b7\u53d6\u5230\u7684\u76f4\u63a5\u5c31\u662f\u6570\u636e\u5bf9\u8c61\u672c\u8eab \u5f53\u6761\u4ef6\u4e0d\u5b58\u5728\u65f6\uff0cfilter\u4e0d\u62a5\u9519\u76f4\u63a5\u8fd4\u56de\u4e00\u4e2a\u7a7a\uff0cget\u76f4\u63a5\u62a5\u9519 \u5220\u9664\u6570\u636e # # \u65b9\u5f0f1\uff1a models . Books . objects . filter ( pk = 7 ) . delete () # \u65b9\u5f0f2\uff1a book_obj = models . Books . objects . get ( pk = 6 ) book_obj . delete () \u5fc5\u77e5\u5fc5\u4f1a13\u6761\u64cd\u4f5c # \u5982\u679c\u60f3\u8981\u5728\u7ec8\u7aef\u67e5\u770b orm\u5bf9\u5e94\u7684sql\u8bed\u53e5\uff0c\u53ef\u4ee5\u5728settings.py\u4e2d\u52a0\u914d\u7f6e LOGGING = { 'version' : 1 , 'disable_existing_loggers' : False , 'handlers' : { 'console' :{ 'level' : 'DEBUG' , 'class' : 'logging.StreamHandler' , }, }, 'loggers' : { 'django.db.backends' : { 'handlers' : [ 'console' ], 'propagate' : True , 'level' : 'DEBUG' , }, } } 1. all() \u67e5\u8be2\u6240\u6709 # \u8fd4\u56de\u7684\u662fqueryset\u5bf9\u8c61 res = models . Books . objects . all () print ( res ) \u6ce8\u610f\uff1aorm\u8bed\u53e5\u7684\u67e5\u8be2\u9ed8\u8ba4\u662f\u60f0\u6027\u67e5\u8be2\uff0c\u53ea\u6709\u5f53\u4f60\u771f\u6b63\u4f7f\u7528\u6570\u636e\u7684\u65f6\u5019\u624d\u4f1a\u6267\u884corm\u8bed\u53e5 2. filter() \u7b5b\u9009 # \u76f8\u5f53\u4e8e\u539f\u751fSQL\u8bed\u53e5\u7684where res = models . Books . objects . filter ( pk = 3 , title = '\u4eba' ) # \u53ef\u4ee5\u4f20\u591a\u4e2a\u53c2\u6570\uff0cand\u5173\u7cfb print ( res ) 3. get() # \u7b5b\u9009\uff0c\u83b7\u53d6\u7684\u662f\u6570\u636e\u5bf9\u8c61\u672c\u8eab\uff0c\u6761\u4ef6\u4e0d\u5b58\u5728\u65f6\u62a5\u9519, \u800c\u4e14\u67e5\u8be2\u6761\u4ef6\u53ea\u80fd\u662f\u4e00\u4e2a res = models . Books . object . get ( pk = 2 ) print ( res ) 4. first() # \u53d6queryset\u4e2d\u7b2c\u4e00\u4e2a\u6570\u636e\u5bf9\u8c61 res = models . Books . objects . filter ( title = '\u897f\u6e38\u8bb0' ) . first () print ( res . price ) 5. last() # \u53d6queryset\u4e2d\u6700\u540e\u4e00\u4e2a\u6570\u636e\u5bf9\u8c61 res = models . Books . objects . filter ( title = '\u897f\u6e38\u8bb0' ) . last () print ( res ) 6. count() # \u7edf\u8ba1\u6570\u636e\u7684\u4e2a\u6570 num = models . Books . objects . count () print ( num ) 7. values() # \u83b7\u53d6\u5bf9\u8c61\u4e2d\u6307\u5b9a\u5b57\u6bb5\u7684\u503c\uff0c\u53ef\u4ee5\u4f20\u591a\u4e2a\u53c2\u6570\uff0c\u8fd4\u56de\u7684\u662f queryset\u5bf9\u8c61 \u5217\u8868\u5957\u5b57\u5178 res = models . Books . objects . values ( 'title' , 'price' ) print ( res ) 8. values_list() # \u83b7\u53d6\u5bf9\u8c61\u4e2d\u6307\u5b9a\u5b57\u6bb5\u7684\u503c\uff0c\u53ef\u4ee5\u4f20\u591a\u4e2a\u53c2\u6570\uff0c\u8fd4\u56de\u7684\u662f queryset\u5bf9\u8c61 \u5217\u8868\u5957\u5143\u7ec4 res = models . Books . objects . values_list ( 'title' , 'price' ) print ( res ) 9. order_by() # \u6309\u7167\u6307\u5b9a\u7684\u5b57\u6bb5\u6392\u5e8f\uff0c \u9ed8\u8ba4\u662f\u5347\u5e8f \u964d\u5e8f\u53ea\u8981\u5728\u5b57\u6bb5\u524d\u9762\u52a0\u8d1f\u53f7\uff08-\uff09 res = models . Books . objects . order_by ( 'price' ) res = models . Books . objects . all () . order_by ( 'price' ) # \u4e24\u8005\u7b49\u4ef7\uff0c\u9ed8\u8ba4\u662f\u5347\u5e8f res = models . Books . objects . order_by ( '-rice' ) 10. reverse() # \u98a0\u5012\u987a\u5e8f\u7684\u524d\u63d0\u662f \u98a0\u5012\u7684\u5bf9\u8c61\u5fc5\u987b\u8981\u6709\u987a\u5e8f\uff08\u63d0\u524d\u6392\u5e8f\u4e4b\u540e\u624d\u80fd\u98a0\u5012\u987a\u5e8f\uff09 \u6240\u4ee5\u5fc5\u987b\u548corder_by\u8054\u7528 res = models . Books . objects . order_by ( 'price' ) res1 = models . Books . objects . all () . order_by ( 'price' ) . reverse () print ( res1 ) 11. exclude() # \u6392\u9664 res = models . Books . objects . all () . exclude ( title = '\u4eba\u95f4\u5931\u683c' ) print ( res ) 12. exists() # \u5224\u65ad\u67e5\u8be2\u7ed3\u679c\u662f\u5426\u6709\u503c\uff0c\u8fd4\u56de\u7ed3\u679c\u662f\u4e00\u4e2a\u5e03\u5c14\u503c res = models . Books . objects . filter ( pk = 12 ) . exists () print ( res ) 13. distinct() # \u5bf9\u67e5\u8be2\u7ed3\u679c\u53bb\u91cd\uff0c\u4f46\u662f\u5fc5\u987b\u8981\u6709\u5b8c\u5168\u76f8\u540c\u7684\u6570\u636e\uff0c\u624d\u80fd\u53bb\u91cd \u6ce8\u610f\uff1a\u4e3b\u952eid\u4e0d\u4e00\u6837\uff0c\u4f1a\u5ffd\u7565 res = models . Books . objects . values ( 'title' , 'price' ) . distinct () print ( res ) \u53cc\u4e0b\u5212\u7ebf\u67e5\u8be2 # __gt \u5927\u4e8e __lt \u5c0f\u4e8e __gte \u5927\u4e8e\u7b49\u4e8e __lte \u5c0f\u4e8e\u7b49\u4e8e __range \u8303\u56f4\u67e5\u8be2 \u987e\u5934\u987e\u5c3e __in \u5728\u91cc\u9762 __year __month # \u67e5\u8be2\u4ef7\u683c\u5927\u4e8e200\u7684\u4e66\u7c4d res = models . Books . objects . filter ( price__gt = 200 ) print ( res ) # \u67e5\u8be2\u4ef7\u683c\u5c0f\u4e8e300 \u7684\u4e66\u7c4d res = models . Books . objects . filter ( price__lt = 200 ) print ( res ) # \u67e5\u8be2\u4ef7\u683c\u5927\u4e8e\u7b49\u4e8e200 res = models . Books . objects . filter ( price__gte = 200 ) print ( res ) # \u67e5\u8be2\u4ef7\u683c\u5c0f\u4e8e\u7b49\u4e8e200 res = models . Books . objects . filter ( price__lte = 200 ) print ( res ) # \u67e5\u8be2\u4ef7\u683c\u5728200~300\u4e4b\u95f4\u7684\u4e66\u7c4d res = models . Books . objects . filter ( price__range = ( 200 , 300 )) # \u987e\u5934\u987e\u5c3e print ( res ) # \u67e5\u8be2\u4ef7\u683c\u662f200 \u6216 300 \u7684\u4e66\u7c4d res = models . Books . objects . filter ( price__in = [ 200 , 300 ]) print ( res ) # \u67e5\u8be2\u51fa\u7248\u65e5\u671f\u4e3a2019\u5e74\u7684\u4e66\u7c4d res = models . Books . objects . filter ( publish_date__year = 2019 ) print ( res ) # \u67e5\u8be2\u51fa\u7248\u65e5\u671f\u662f11\u6708\u4efd\u7684\u4e66\u7c4d res = models . Books . objects . filter ( publish_date__month = 11 ) print ( res ) __startswitch \u4ee5....\u5f00\u5934 __endswith \u4ee5...\u7ed3\u5c3e __contains \u5305\u542b \u5982\u679c\u67e5\u8be2\u5b57\u6bcd\uff0c\u9ed8\u8ba4\u533a\u5206\u5927\u5c0f\u5199 __icontains \u52a0 i \u5ffd\u7565\u5927\u5c0f\u5199 # \u67e5\u8be2\u4e66\u7c4d\u662f\u4ee5\u201c\u4eba\u201d\u5f00\u5934\u7684\u4e66 res = models . Books . objects . filter ( title__startswith = '\u4eba' ) print ( res ) # \u67e5\u8be2\u4e66\u7c4d\u662f\u4ee5\u201c\u68a6\u201d\u7ed3\u5c3e\u7684\u4e66 res = models . Books . objects . filter ( title__endswith = '\u68a6' ) print ( res ) # \u67e5\u8be2\u4e66\u7c4d\u540d\u79f0\u4e2d\u5305\u542b\u201c\u7684\u201d\u5b57\u7684\u4e66\u7c4d res = models . Books . objects . filter ( title__contains = '\u7684' ) print ( res ) # \u67e5\u8be2\u4e66\u7c4d\u540d\u79f0\u4e2d\u5305\u542b\u5b57\u6bcdp\u7684\u4e66\u7c4d res = models . Books . objects . filter ( title__contains = 'p' ) # \u9ed8\u8ba4\u533a\u5206\u5927\u5c0f\u5199 res = models . Books . objects . filter ( title__icontains = 'p' ) # \u52a0i\u4e0d\u533a\u5206\u5927\u5c0f \u4e00\u5bf9\u591a\u5916\u952e\u5b57\u6bb5\u589e\u5220\u6539\u67e5 # \u51c6\u5907\u5de5\u4f5c # \u5148\u5efa\u7acb\u56fe\u4e66\u8868\u3001\u51fa\u7248\u793e\u8868\u3001\u4f5c\u8005\u8868\u3001\u4f5c\u8005\u8be6\u60c5\u8868 class Book ( models . Model ): title = models . CharField ( max_length = 32 ) price = models . DecimalField ( max_digits = 8 , decimal_places = 2 ) publish_date = models . DateField ( auto_now_add = True ) publish = models . ForeignKey ( to = 'Publish' ) authors = models . ManyToManyField ( to = 'Author' ) class Publish ( models . Model ): name = models . CharField ( max_length = 32 ) addr = models . CharField ( max_length = 64 ) class Author ( models . Model ): name = models . CharField ( max_length = 32 ) email = models . EmailField () author_detail = models . OneToOneField ( to = 'AuthorDetail' ) class AuthorDetail ( models . Model ): phone = models . BigIntegerField () addr = models . CharField ( max_length = 64 ) \u82b1\u5f0f\u64cd\u4f5c # \u589e\uff1a # \u65b9\u6cd51 \uff1a\u76f4\u63a5\u4f20\u8868\u91cc\u9762\u7684\u5b9e\u9645\u5b57\u6bb5 models . Book . objects . create ( title = '\u4eba\u95f4\u5931\u683c' , price = 123.56 , publish_id = 1 ) # \u65b9\u6cd52 \uff1a\u4f20\u865a\u62df\u5b57\u6bb5 \u8ddf\u6570\u636e\u5bf9\u8c61\u5373\u53ef publish_obj = models . Publish . objects . filter ( pk = 2 ) . first () models . Book . objects . create ( title = '\u6c34\u6d52\u4f20' , price = 223.45 , publish = publish_obj ) \u6539\uff1a # \u65b9\u6cd51\uff1a \u76f4\u63a5\u4f20\u5b9e\u9645\u5b57\u6bb5 models . Book . objects . filter ( pk = 1 ) . update ( publish_id = 2 ) # \u65b9\u6cd52\uff1a\u4f20\u6570\u636e\u5bf9\u8c61 publish_obj = models . Publish . objects . filter ( pk = 1 ) . first () models . Book . objects . filter ( pk = 1 ) . update ( publish = publish_obj ) \u5220\uff1a # \u9ed8\u8ba4\u5c31\u662f\u7ea7\u8054\u5220\u9664 \u7ea7\u8054\u66f4\u65b0 models . Publish . objects . filter ( pk = 1 ) . delete () \u591a\u5bf9\u591a\u5916\u952e\u5b57\u6bb5\u7684\u589e\u5220\u6539\u67e5 # \u5176\u5b9e\u5c31\u662f\u64cd\u4f5c\u7b2c\u4e09\u5f20\u5173\u7cfb\u8868 \u589e\uff1aadd # book_obj = models . Book . objects . filter ( pk = 1 ) . first () book_obj . authors . add ( 1 ) # book_obj.authors \u5c31\u5df2\u7ecf\u8fdb\u5165\u7b2c\u4e09\u5f20\u8868\u4e86 book_obj . authors . add ( 1 , 2 ) # \u6dfb\u52a0\u4e24\u4e2a\u4e66\u7c4d\u4f5c\u8005 # \u540c\u6837\u652f\u6301\u4f20\u6570\u636e\u5bf9\u8c61 book_obj = models . Book . objects . filter ( pk = 2 ) . first () author_obj = models . Author . objects . filter ( pk = 2 ) . first () book_obj . authors . add ( author_obj ) # \u6570\u636e\u5bf9\u8c61\u4e5f\u652f\u6301\u4f20\u591a\u4e2a book_obj = models . Book . objects . filter ( pk = 2 ) . first () author_obj1 = models . Author . objects . filter ( pk = 1 ) . first () author_obj2 = models . Author . objects . filter ( pk = 2 ) . first () book_obj . authors . add ( author_obj1 , author_obj2 ) add\u65b9\u6cd5 \u80fd\u591f\u5411\u7b2c\u4e09\u5f20\u5173\u7cfb\u8868\u6dfb\u52a0\u6570\u636e \u652f\u6301\u4f20\u6570\u5b57 \u4e5f\u652f\u6301\u4f20\u5bf9\u8c61\uff0c\u5e76\u4e14\u4e24\u8005\u90fd\u53ef\u4ee5\u662f\u591a\u4e2a \u6539\uff1aset # # \u65b9\u6cd51\uff1a\u4f20\u5b57\u6bb5 book_obj = models . Book . objects . filter ( pk = 2 ) . first () book_obj . authors . set ([ 1 , 3 ]) book_obj . authors . set ([ 1 ,]) # set\u91cc\u9762\u8981\u4f20\u53ef\u8fed\u4ee3\u5bf9\u8c61 # \u65b9\u6cd52\uff1a\u4f20\u6570\u636e\u5bf9\u8c61 author_obj1 = models . Author . objects . filter ( pk = 1 ) . first () author_obj2 = models . Author . objects . filter ( pk = 2 ) . first () book_obj . authors . set (( author_obj1 , author_obj2 )) set\u65b9\u6cd5 \u80fd\u4fee\u6539\u591a\u5bf9\u591a\u5173\u7cfb\u8868\u4e2d\u7684\u6570\u636e \u53ef\u4ee5\u4f20\u6570\u5b57\uff0c\u4e5f\u53ef\u4ee5\u4f20\u5bf9\u8c61\uff0c\u90fd\u652f\u6301\u4f20\u591a\u4e2a set\u91cc\u9762\u4f20\u7684\u662f\u53ef\u8fed\u4ee3\u5bf9\u8c61 \u5220\uff1aremove # # \u65b9\u6cd51\uff1a\u4f20\u5b57\u6bb5 book_obj = models . Book . objects . filter ( pk = 2 ) . first () book_obj . authors . remove ( 1 ) book_obj . authors . remove ( 1 , 2 ) # \u652f\u6301\u591a\u4e2a # \u65b9\u6cd52\uff1a\u4f20\u6570\u636e\u5bf9\u8c61 book_obj = models . Book . objects . filter ( pk = 1 ) . first () author_obj = models . Author . objects . filter ( pk = 1 ) . first () book_obj . authors . remove ( author_obj ) remove\u65b9\u6cd5 \u80fd\u5220\u9664\u591a\u5bf9\u591a\u5173\u7cfb\u8868\u4e2d\u7684\u6570\u636e \u53ef\u4ee5\u4f20\u6570\u5b57\uff0c\u4e5f\u53ef\u4ee5\u4f20\u5bf9\u8c61\uff0c \u90fd\u652f\u6301\u4f20\u591a\u4e2a\uff0c \u4e0d\u9700\u8981\u4f20\u8fed\u4ee3\u5bf9\u8c61 \u6e05\u7a7a\uff1aclear # book_obj = models . Book . objects . filter ( pk = 2 ) . first () book_obj . authors . clear () clear\u6e05\u7a7a\u6570\u636e\uff0c\u62ec\u53f7\u91cc\u9762\u4e0d\u9700\u8981\u4f20\u53c2\u6570 \u8de8\u8868\u67e5\u8be2 # \u6b63\u53cd\u5411\u67e5\u8be2 # \u6b63\u5411\u67e5\u8be2 \u5173\u7cfb\u5b57\u6bb5\u5728\u8c01\u90a3\uff0c\u7531\u6709\u5173\u7cfb\u5b57\u6bb5\u7684\u8868\u67e5\uff0c\u5c31\u662f\u6b63\u5411\u67e5\u8be2 \u53cd\u5411\u67e5\u8be2 \u5173\u7cfb\u5b57\u6bb5\u4e0d\u5728\u90a3 \u6b63\u5411\u67e5\u8be2\u6309\u5b57\u6bb5\uff0c\u53cd\u5411\u67e5\u8be2\u6309\u8868\u540d\u5c0f\u5199 + _set \u57fa\u4e8e\u5bf9\u8c61\u7684\u8de8\u8868\u67e5\u8be2\uff08\u5b50\u67e5\u8be2\uff09 # # 1.\u67e5\u8be2\u4e66\u7c4d\u4e3b\u952e\u4e3a2\u7684\u51fa\u7248\u793e\u540d\u79f0 book_obj = models . Book . objects . filter ( pk = 2 ) . first () print ( book_obj . publish . name ) # 2.\u67e5\u8be2\u4e66\u7c4d\u4e3b\u952e\u4e3a1\u7684\u4f5c\u8005\u59d3\u540d book_obj = models . Book . objects . filter ( pk = 1 ) . first () # print(book_obj.authors) # app01.Author.None print ( book_obj . authors . all ()) # \u5f53\u6b63\u5411\u67e5\u8be2\u70b9\u51fb\u5916\u952e\u5b57\u6bb5\u6570\u636e\u6709\u591a\u4e2a\u7684\u60c5\u51b5\u4e0b \u9700\u8981.all() # 3.\u67e5\u8be2\u4f5c\u8005\u662f\u5f0f\u5fae\u7684\u624b\u673a\u53f7\u7801 author_obj = models . Author . objects . filter ( name = '\u5f0f\u5fae' ) . first () print ( author_obj . author_detail . phone ) # 4.\u67e5\u8be2\u51fa\u7248\u793e\u662f\u4e1c\u65b9\u51fa\u7248\u793e\u51fa\u7248\u8fc7\u7684\u4e66\u7c4d publish_obj = models . Publish . objects . filter ( name = '\u4e1c\u65b9\u51fa\u7248\u793e' ) . first () print ( publish_obj . book_set . all ()) # 5.\u67e5\u8be2\u624b\u673a\u53f7\u662f120\u7684\u4f5c\u8005\u59d3\u540d author_detail_obj = models . AuthorDetail . objects . filter ( phone = 120 ) . first () print ( author_detail_obj . author . name ) # 6.\u67e5\u8be2\u4f5c\u8005\u662f\u65e0\u540d\u5199\u8fc7\u7684\u4e66\u7c4d author_obj = models . Author . objects . filter ( name = '\u65e0\u540d' ) . first () print ( author_obj . book_set . all ()) \u603b\u7ed3\uff1a \u6b63\u5411\u67e5\u8be2\uff0c \u70b9\u51fb\u5916\u952e\u5b57\u6bb5\u6570\u636e\u6709\u591a\u4e2a\u7684\u60c5\u51b5\u4e0b \u9700\u8981.all() \u53cd\u5411\u67e5\u8be2\uff0c\u4e00\u5bf9\u591a\u548c\u591a\u5bf9\u591a\u9700\u8981 \u8868\u540d + _set \uff0c\u4e00\u5bf9\u4e00\u4e0d\u9700\u8981\u52a0 _set \u57fa\u4e8e\u53cc\u4e0b\u5212\u7ebf\u7684\u8de8\u8868\u67e5\u8be2\uff08\u8054\u8868\u67e5\u8be2\uff09 # # 1.\u67e5\u8be2\u4e66\u7c4dpk\u4e3a2\u7684\u51fa\u7248\u793e\u540d\u79f0 res = models . Book . objects . filter ( pk = 2 ) . values ( 'publish__name' ) print ( res ) res = models . Publish . objects . filter ( book__pk = 2 ) . values ( 'name' ) # 2.\u67e5\u8be2\u4e66\u7c4dpk\u4e3a2\u7684\u4f5c\u8005\u59d3\u540d\u548c\u90ae\u7bb1 res = models . Book . objects . filter ( pk = 2 ) . values ( 'authors__name' , 'authors__email' ) print ( res ) res = models . Author . objects . filter ( book__pk = 2 ) . values ( 'name' , 'email' ) # 3.\u67e5\u8be2\u4f5c\u8005\u662f\u90b6\u98ce\u7684\u5bb6\u5ead\u5730\u5740 res = models . Author . objects . filter ( name = '\u90b6\u98ce' ) . values ( 'author_detail__addr' ) print ( res ) res = models . AuthorDetail . objects . filter ( author__name = '\u90b6\u98ce' ) . values ( 'addr' ) # 4.\u67e5\u8be2\u51fa\u7248\u793e\u662f\u4e1c\u65b9\u51fa\u7248\u793e\u51fa\u7248\u8fc7\u7684\u4e66\u7684\u540d\u5b57 res = models . Publish . objects . filter ( name = '\u4e1c\u65b9\u51fa\u7248\u793e' ) . values ( 'book__title' ) print ( res ) res = models . Book . objects . filter ( publish__name = '\u4e1c\u65b9\u51fa\u7248\u793e' ) . values ( 'title' ) # 5. \u67e5\u8be2\u4e66\u7c4dpk\u662f2\u7684\u4f5c\u8005\u7684\u624b\u673a\u53f7 res = models . Book . objects . filter ( pk = 2 ) . values ( 'authors__author_detail__phone' ) print ( res ) res = models . Author . objects . filter ( book__pk = 2 ) . values ( 'author_detail__phone' )","title":"09 django\u4e4b\u6a21\u578b\u5c42"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/09%20django%E4%B9%8B%E6%A8%A1%E5%9E%8B%E5%B1%82/#django","text":"","title":"django\u4e4b\u6a21\u578b\u5c42"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/09%20django%E4%B9%8B%E6%A8%A1%E5%9E%8B%E5%B1%82/#_1","text":"\u7b2c\u4e00\u79cd\u65b9\u6cd5\uff1a \u76f4\u63a5\u5728\u67d0\u4e00\u4e2a\u5e94\u7528\u4e0b\u7684test\u6587\u4ef6\u4e2d\u4e66\u5199\uff08\u524d\u56db\u884c\u4ee3\u7801\u53bbmanage.py\u4e2d\u62f7\u8d1d\uff09\uff1a import os if __name__ == \"__main__\" : os . environ . setdefault ( \"DJANGO_SETTINGS_MODULE\" , \"mysite.settings\" ) import django django . setup () \u7b2c\u4e8c\u79cd\u65b9\u6cd5\uff1a \u76f4\u63a5\u65b0\u5efa\u4e00\u4e2a\u4efb\u610f\u540d\u79f0\u7684py\u6587\u4ef6 \u5728\u91cc\u9762\u5199\u4e0a\u4e0a\u9762\u7684\u914d\u7f6e","title":"\u914d\u7f6e\u6d4b\u8bd5\u6587\u4ef6"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/09%20django%E4%B9%8B%E6%A8%A1%E5%9E%8B%E5%B1%82/#orm","text":"","title":"ORM\u5355\u8868\u64cd\u4f5c"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/09%20django%E4%B9%8B%E6%A8%A1%E5%9E%8B%E5%B1%82/#_2","text":"# \u6a21\u578b\u7c7b class Books ( models . Model ): title = models . CharField ( max_length = 32 ) price = models . DecimalField ( max_digits = 8 , decimal_places = 2 ) publish_date = models . DateField ()","title":"\u5148\u524d\u64cd\u4f5c"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/09%20django%E4%B9%8B%E6%A8%A1%E5%9E%8B%E5%B1%82/#_3","text":"# \u65b9\u5f0f1\uff1acreate\u65b9\u6cd5 models . Books . objects . create ( title = '\u4e09\u56fd\u6f14\u4e49' , price = 345.66 , publish_date = '2019-11-27' ) # \u65b9\u5f0f2\uff1a\u5229\u7528\u5bf9\u8c61\u7684\u7ed1\u5b9a\u65b9\u6cd5 book_obj = models . Books ( title = '\u7ea2\u697c\u68a6' , price = 235.66 , publish_date = '2018-09-12' ) book_obj . save ()","title":"\u521b\u5efa\u6570\u636e"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/09%20django%E4%B9%8B%E6%A8%A1%E5%9E%8B%E5%B1%82/#_4","text":"# \u65b9\u5f0f1\uff1a\u5229\u7528queryset\u65b9\u6cd5 res = models . Books . objects . filter ( pk = 1 ) . update ( price = 320.23 ) print ( res ) # <QuerySet [<Books: Books object>]> # \u65b9\u5f0f2\uff1a\u5229\u7528\u5bf9\u8c61 (\u4e0d\u63a8\u8350\u4f7f\u7528) \u5229\u7528\u5bf9\u8c61\u4fee\u6539 \u5185\u90e8\u5176\u5b9e\u662f\u4ece\u5934\u5230\u5c3e\u5c06\u6570\u636e\u7684\u6240\u6709\u5b57\u6bb5\u90fd\u91cd\u65b0\u5199\u4e00\u904d book_obj = models . Books . objects . get ( pk = 2 ) book_obj . price = 150.33 book_obj . save () \u6ce8\uff1a pk \u4f1a\u81ea\u52a8\u67e5\u627e\u5f53\u524d\u8868\u7684\u4e3b\u952e\u5b57\u6bb5 filter\u67e5\u8be2\u51fa\u6765\u7684\u7ed3\u679c\u662f\u4e00\u4e2a QuerySet \u5bf9\u8c61","title":"\u4fee\u6539\u6570\u636e"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/09%20django%E4%B9%8B%E6%A8%A1%E5%9E%8B%E5%B1%82/#queryset","text":"\u53ea\u8981\u662fQuerySet\u5bf9\u8c61\u5c31\u53ef\u4ee5\u65e0\u9650\u5236\u7684\u8c03\u7528QuerySet\u7684\u65b9\u6cd5 book_obj = models . Books . objects . filter ( pk = 1 ) . filter () . filter () # \u53ef\u4ee5\u65e0\u9650\u5236 \u7684\u5220\u9009 \u53ea\u8981\u662fQuerySet\u5bf9\u8c61\u5c31\u53ef\u4ee5\u7528\u53e5\u70b9\u7b26 \u70b9query\u67e5\u770b\u5f53\u524d\u5185\u90e8\u5bf9\u5e94\u7684sql\u8bed\u53e5 book_obj = models . Books . objects . filter ( pk = 1 ) print ( book_obj . query )","title":"QuerySet\u5bf9\u8c61\u7279\u70b9"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/09%20django%E4%B9%8B%E6%A8%A1%E5%9E%8B%E5%B1%82/#getfilter","text":"filter\u83b7\u53d6\u5230\u7684\u662f\u4e00\u4e2aqueryset\u5bf9\u8c61\uff0c\u7c7b\u4f3c\u4e8e\u4e00\u4e2a\u5217\u8868 get\u83b7\u53d6\u5230\u7684\u76f4\u63a5\u5c31\u662f\u6570\u636e\u5bf9\u8c61\u672c\u8eab \u5f53\u6761\u4ef6\u4e0d\u5b58\u5728\u65f6\uff0cfilter\u4e0d\u62a5\u9519\u76f4\u63a5\u8fd4\u56de\u4e00\u4e2a\u7a7a\uff0cget\u76f4\u63a5\u62a5\u9519","title":"get\u548cfilter\u533a\u522b"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/09%20django%E4%B9%8B%E6%A8%A1%E5%9E%8B%E5%B1%82/#_5","text":"# \u65b9\u5f0f1\uff1a models . Books . objects . filter ( pk = 7 ) . delete () # \u65b9\u5f0f2\uff1a book_obj = models . Books . objects . get ( pk = 6 ) book_obj . delete ()","title":"\u5220\u9664\u6570\u636e"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/09%20django%E4%B9%8B%E6%A8%A1%E5%9E%8B%E5%B1%82/#13","text":"\u5982\u679c\u60f3\u8981\u5728\u7ec8\u7aef\u67e5\u770b orm\u5bf9\u5e94\u7684sql\u8bed\u53e5\uff0c\u53ef\u4ee5\u5728settings.py\u4e2d\u52a0\u914d\u7f6e LOGGING = { 'version' : 1 , 'disable_existing_loggers' : False , 'handlers' : { 'console' :{ 'level' : 'DEBUG' , 'class' : 'logging.StreamHandler' , }, }, 'loggers' : { 'django.db.backends' : { 'handlers' : [ 'console' ], 'propagate' : True , 'level' : 'DEBUG' , }, } }","title":"\u5fc5\u77e5\u5fc5\u4f1a13\u6761\u64cd\u4f5c"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/09%20django%E4%B9%8B%E6%A8%A1%E5%9E%8B%E5%B1%82/#1-all","text":"\u8fd4\u56de\u7684\u662fqueryset\u5bf9\u8c61 res = models . Books . objects . all () print ( res ) \u6ce8\u610f\uff1aorm\u8bed\u53e5\u7684\u67e5\u8be2\u9ed8\u8ba4\u662f\u60f0\u6027\u67e5\u8be2\uff0c\u53ea\u6709\u5f53\u4f60\u771f\u6b63\u4f7f\u7528\u6570\u636e\u7684\u65f6\u5019\u624d\u4f1a\u6267\u884corm\u8bed\u53e5","title":"1. all()   \u67e5\u8be2\u6240\u6709"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/09%20django%E4%B9%8B%E6%A8%A1%E5%9E%8B%E5%B1%82/#2-filter","text":"\u76f8\u5f53\u4e8e\u539f\u751fSQL\u8bed\u53e5\u7684where res = models . Books . objects . filter ( pk = 3 , title = '\u4eba' ) # \u53ef\u4ee5\u4f20\u591a\u4e2a\u53c2\u6570\uff0cand\u5173\u7cfb print ( res )","title":"2. filter()   \u7b5b\u9009"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/09%20django%E4%B9%8B%E6%A8%A1%E5%9E%8B%E5%B1%82/#3-get","text":"\u7b5b\u9009\uff0c\u83b7\u53d6\u7684\u662f\u6570\u636e\u5bf9\u8c61\u672c\u8eab\uff0c\u6761\u4ef6\u4e0d\u5b58\u5728\u65f6\u62a5\u9519, \u800c\u4e14\u67e5\u8be2\u6761\u4ef6\u53ea\u80fd\u662f\u4e00\u4e2a res = models . Books . object . get ( pk = 2 ) print ( res )","title":"3. get()"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/09%20django%E4%B9%8B%E6%A8%A1%E5%9E%8B%E5%B1%82/#4-first","text":"\u53d6queryset\u4e2d\u7b2c\u4e00\u4e2a\u6570\u636e\u5bf9\u8c61 res = models . Books . objects . filter ( title = '\u897f\u6e38\u8bb0' ) . first () print ( res . price )","title":"4. first()"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/09%20django%E4%B9%8B%E6%A8%A1%E5%9E%8B%E5%B1%82/#5-last","text":"\u53d6queryset\u4e2d\u6700\u540e\u4e00\u4e2a\u6570\u636e\u5bf9\u8c61 res = models . Books . objects . filter ( title = '\u897f\u6e38\u8bb0' ) . last () print ( res )","title":"5. last()"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/09%20django%E4%B9%8B%E6%A8%A1%E5%9E%8B%E5%B1%82/#6-count","text":"\u7edf\u8ba1\u6570\u636e\u7684\u4e2a\u6570 num = models . Books . objects . count () print ( num )","title":"6. count()"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/09%20django%E4%B9%8B%E6%A8%A1%E5%9E%8B%E5%B1%82/#7-values","text":"\u83b7\u53d6\u5bf9\u8c61\u4e2d\u6307\u5b9a\u5b57\u6bb5\u7684\u503c\uff0c\u53ef\u4ee5\u4f20\u591a\u4e2a\u53c2\u6570\uff0c\u8fd4\u56de\u7684\u662f queryset\u5bf9\u8c61 \u5217\u8868\u5957\u5b57\u5178 res = models . Books . objects . values ( 'title' , 'price' ) print ( res )","title":"7. values()"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/09%20django%E4%B9%8B%E6%A8%A1%E5%9E%8B%E5%B1%82/#8-values_list","text":"\u83b7\u53d6\u5bf9\u8c61\u4e2d\u6307\u5b9a\u5b57\u6bb5\u7684\u503c\uff0c\u53ef\u4ee5\u4f20\u591a\u4e2a\u53c2\u6570\uff0c\u8fd4\u56de\u7684\u662f queryset\u5bf9\u8c61 \u5217\u8868\u5957\u5143\u7ec4 res = models . Books . objects . values_list ( 'title' , 'price' ) print ( res )","title":"8. values_list()"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/09%20django%E4%B9%8B%E6%A8%A1%E5%9E%8B%E5%B1%82/#9-order_by","text":"\u6309\u7167\u6307\u5b9a\u7684\u5b57\u6bb5\u6392\u5e8f\uff0c \u9ed8\u8ba4\u662f\u5347\u5e8f \u964d\u5e8f\u53ea\u8981\u5728\u5b57\u6bb5\u524d\u9762\u52a0\u8d1f\u53f7\uff08-\uff09 res = models . Books . objects . order_by ( 'price' ) res = models . Books . objects . all () . order_by ( 'price' ) # \u4e24\u8005\u7b49\u4ef7\uff0c\u9ed8\u8ba4\u662f\u5347\u5e8f res = models . Books . objects . order_by ( '-rice' )","title":"9. order_by()"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/09%20django%E4%B9%8B%E6%A8%A1%E5%9E%8B%E5%B1%82/#10-reverse","text":"\u98a0\u5012\u987a\u5e8f\u7684\u524d\u63d0\u662f \u98a0\u5012\u7684\u5bf9\u8c61\u5fc5\u987b\u8981\u6709\u987a\u5e8f\uff08\u63d0\u524d\u6392\u5e8f\u4e4b\u540e\u624d\u80fd\u98a0\u5012\u987a\u5e8f\uff09 \u6240\u4ee5\u5fc5\u987b\u548corder_by\u8054\u7528 res = models . Books . objects . order_by ( 'price' ) res1 = models . Books . objects . all () . order_by ( 'price' ) . reverse () print ( res1 )","title":"10. reverse()"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/09%20django%E4%B9%8B%E6%A8%A1%E5%9E%8B%E5%B1%82/#11-exclude","text":"\u6392\u9664 res = models . Books . objects . all () . exclude ( title = '\u4eba\u95f4\u5931\u683c' ) print ( res )","title":"11. exclude()"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/09%20django%E4%B9%8B%E6%A8%A1%E5%9E%8B%E5%B1%82/#12-exists","text":"\u5224\u65ad\u67e5\u8be2\u7ed3\u679c\u662f\u5426\u6709\u503c\uff0c\u8fd4\u56de\u7ed3\u679c\u662f\u4e00\u4e2a\u5e03\u5c14\u503c res = models . Books . objects . filter ( pk = 12 ) . exists () print ( res )","title":"12. exists()"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/09%20django%E4%B9%8B%E6%A8%A1%E5%9E%8B%E5%B1%82/#13-distinct","text":"\u5bf9\u67e5\u8be2\u7ed3\u679c\u53bb\u91cd\uff0c\u4f46\u662f\u5fc5\u987b\u8981\u6709\u5b8c\u5168\u76f8\u540c\u7684\u6570\u636e\uff0c\u624d\u80fd\u53bb\u91cd \u6ce8\u610f\uff1a\u4e3b\u952eid\u4e0d\u4e00\u6837\uff0c\u4f1a\u5ffd\u7565 res = models . Books . objects . values ( 'title' , 'price' ) . distinct () print ( res )","title":"13. distinct()"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/09%20django%E4%B9%8B%E6%A8%A1%E5%9E%8B%E5%B1%82/#_6","text":"__gt \u5927\u4e8e __lt \u5c0f\u4e8e __gte \u5927\u4e8e\u7b49\u4e8e __lte \u5c0f\u4e8e\u7b49\u4e8e __range \u8303\u56f4\u67e5\u8be2 \u987e\u5934\u987e\u5c3e __in \u5728\u91cc\u9762 __year __month # \u67e5\u8be2\u4ef7\u683c\u5927\u4e8e200\u7684\u4e66\u7c4d res = models . Books . objects . filter ( price__gt = 200 ) print ( res ) # \u67e5\u8be2\u4ef7\u683c\u5c0f\u4e8e300 \u7684\u4e66\u7c4d res = models . Books . objects . filter ( price__lt = 200 ) print ( res ) # \u67e5\u8be2\u4ef7\u683c\u5927\u4e8e\u7b49\u4e8e200 res = models . Books . objects . filter ( price__gte = 200 ) print ( res ) # \u67e5\u8be2\u4ef7\u683c\u5c0f\u4e8e\u7b49\u4e8e200 res = models . Books . objects . filter ( price__lte = 200 ) print ( res ) # \u67e5\u8be2\u4ef7\u683c\u5728200~300\u4e4b\u95f4\u7684\u4e66\u7c4d res = models . Books . objects . filter ( price__range = ( 200 , 300 )) # \u987e\u5934\u987e\u5c3e print ( res ) # \u67e5\u8be2\u4ef7\u683c\u662f200 \u6216 300 \u7684\u4e66\u7c4d res = models . Books . objects . filter ( price__in = [ 200 , 300 ]) print ( res ) # \u67e5\u8be2\u51fa\u7248\u65e5\u671f\u4e3a2019\u5e74\u7684\u4e66\u7c4d res = models . Books . objects . filter ( publish_date__year = 2019 ) print ( res ) # \u67e5\u8be2\u51fa\u7248\u65e5\u671f\u662f11\u6708\u4efd\u7684\u4e66\u7c4d res = models . Books . objects . filter ( publish_date__month = 11 ) print ( res ) __startswitch \u4ee5....\u5f00\u5934 __endswith \u4ee5...\u7ed3\u5c3e __contains \u5305\u542b \u5982\u679c\u67e5\u8be2\u5b57\u6bcd\uff0c\u9ed8\u8ba4\u533a\u5206\u5927\u5c0f\u5199 __icontains \u52a0 i \u5ffd\u7565\u5927\u5c0f\u5199 # \u67e5\u8be2\u4e66\u7c4d\u662f\u4ee5\u201c\u4eba\u201d\u5f00\u5934\u7684\u4e66 res = models . Books . objects . filter ( title__startswith = '\u4eba' ) print ( res ) # \u67e5\u8be2\u4e66\u7c4d\u662f\u4ee5\u201c\u68a6\u201d\u7ed3\u5c3e\u7684\u4e66 res = models . Books . objects . filter ( title__endswith = '\u68a6' ) print ( res ) # \u67e5\u8be2\u4e66\u7c4d\u540d\u79f0\u4e2d\u5305\u542b\u201c\u7684\u201d\u5b57\u7684\u4e66\u7c4d res = models . Books . objects . filter ( title__contains = '\u7684' ) print ( res ) # \u67e5\u8be2\u4e66\u7c4d\u540d\u79f0\u4e2d\u5305\u542b\u5b57\u6bcdp\u7684\u4e66\u7c4d res = models . Books . objects . filter ( title__contains = 'p' ) # \u9ed8\u8ba4\u533a\u5206\u5927\u5c0f\u5199 res = models . Books . objects . filter ( title__icontains = 'p' ) # \u52a0i\u4e0d\u533a\u5206\u5927\u5c0f","title":"\u53cc\u4e0b\u5212\u7ebf\u67e5\u8be2"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/09%20django%E4%B9%8B%E6%A8%A1%E5%9E%8B%E5%B1%82/#_7","text":"","title":"\u4e00\u5bf9\u591a\u5916\u952e\u5b57\u6bb5\u589e\u5220\u6539\u67e5"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/09%20django%E4%B9%8B%E6%A8%A1%E5%9E%8B%E5%B1%82/#_8","text":"\u5148\u5efa\u7acb\u56fe\u4e66\u8868\u3001\u51fa\u7248\u793e\u8868\u3001\u4f5c\u8005\u8868\u3001\u4f5c\u8005\u8be6\u60c5\u8868 class Book ( models . Model ): title = models . CharField ( max_length = 32 ) price = models . DecimalField ( max_digits = 8 , decimal_places = 2 ) publish_date = models . DateField ( auto_now_add = True ) publish = models . ForeignKey ( to = 'Publish' ) authors = models . ManyToManyField ( to = 'Author' ) class Publish ( models . Model ): name = models . CharField ( max_length = 32 ) addr = models . CharField ( max_length = 64 ) class Author ( models . Model ): name = models . CharField ( max_length = 32 ) email = models . EmailField () author_detail = models . OneToOneField ( to = 'AuthorDetail' ) class AuthorDetail ( models . Model ): phone = models . BigIntegerField () addr = models . CharField ( max_length = 64 )","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/09%20django%E4%B9%8B%E6%A8%A1%E5%9E%8B%E5%B1%82/#_9","text":"\u589e\uff1a # \u65b9\u6cd51 \uff1a\u76f4\u63a5\u4f20\u8868\u91cc\u9762\u7684\u5b9e\u9645\u5b57\u6bb5 models . Book . objects . create ( title = '\u4eba\u95f4\u5931\u683c' , price = 123.56 , publish_id = 1 ) # \u65b9\u6cd52 \uff1a\u4f20\u865a\u62df\u5b57\u6bb5 \u8ddf\u6570\u636e\u5bf9\u8c61\u5373\u53ef publish_obj = models . Publish . objects . filter ( pk = 2 ) . first () models . Book . objects . create ( title = '\u6c34\u6d52\u4f20' , price = 223.45 , publish = publish_obj ) \u6539\uff1a # \u65b9\u6cd51\uff1a \u76f4\u63a5\u4f20\u5b9e\u9645\u5b57\u6bb5 models . Book . objects . filter ( pk = 1 ) . update ( publish_id = 2 ) # \u65b9\u6cd52\uff1a\u4f20\u6570\u636e\u5bf9\u8c61 publish_obj = models . Publish . objects . filter ( pk = 1 ) . first () models . Book . objects . filter ( pk = 1 ) . update ( publish = publish_obj ) \u5220\uff1a # \u9ed8\u8ba4\u5c31\u662f\u7ea7\u8054\u5220\u9664 \u7ea7\u8054\u66f4\u65b0 models . Publish . objects . filter ( pk = 1 ) . delete ()","title":"\u82b1\u5f0f\u64cd\u4f5c"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/09%20django%E4%B9%8B%E6%A8%A1%E5%9E%8B%E5%B1%82/#_10","text":"\u5176\u5b9e\u5c31\u662f\u64cd\u4f5c\u7b2c\u4e09\u5f20\u5173\u7cfb\u8868","title":"\u591a\u5bf9\u591a\u5916\u952e\u5b57\u6bb5\u7684\u589e\u5220\u6539\u67e5"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/09%20django%E4%B9%8B%E6%A8%A1%E5%9E%8B%E5%B1%82/#add","text":"book_obj = models . Book . objects . filter ( pk = 1 ) . first () book_obj . authors . add ( 1 ) # book_obj.authors \u5c31\u5df2\u7ecf\u8fdb\u5165\u7b2c\u4e09\u5f20\u8868\u4e86 book_obj . authors . add ( 1 , 2 ) # \u6dfb\u52a0\u4e24\u4e2a\u4e66\u7c4d\u4f5c\u8005 # \u540c\u6837\u652f\u6301\u4f20\u6570\u636e\u5bf9\u8c61 book_obj = models . Book . objects . filter ( pk = 2 ) . first () author_obj = models . Author . objects . filter ( pk = 2 ) . first () book_obj . authors . add ( author_obj ) # \u6570\u636e\u5bf9\u8c61\u4e5f\u652f\u6301\u4f20\u591a\u4e2a book_obj = models . Book . objects . filter ( pk = 2 ) . first () author_obj1 = models . Author . objects . filter ( pk = 1 ) . first () author_obj2 = models . Author . objects . filter ( pk = 2 ) . first () book_obj . authors . add ( author_obj1 , author_obj2 ) add\u65b9\u6cd5 \u80fd\u591f\u5411\u7b2c\u4e09\u5f20\u5173\u7cfb\u8868\u6dfb\u52a0\u6570\u636e \u652f\u6301\u4f20\u6570\u5b57 \u4e5f\u652f\u6301\u4f20\u5bf9\u8c61\uff0c\u5e76\u4e14\u4e24\u8005\u90fd\u53ef\u4ee5\u662f\u591a\u4e2a","title":"\u589e\uff1aadd"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/09%20django%E4%B9%8B%E6%A8%A1%E5%9E%8B%E5%B1%82/#set","text":"# \u65b9\u6cd51\uff1a\u4f20\u5b57\u6bb5 book_obj = models . Book . objects . filter ( pk = 2 ) . first () book_obj . authors . set ([ 1 , 3 ]) book_obj . authors . set ([ 1 ,]) # set\u91cc\u9762\u8981\u4f20\u53ef\u8fed\u4ee3\u5bf9\u8c61 # \u65b9\u6cd52\uff1a\u4f20\u6570\u636e\u5bf9\u8c61 author_obj1 = models . Author . objects . filter ( pk = 1 ) . first () author_obj2 = models . Author . objects . filter ( pk = 2 ) . first () book_obj . authors . set (( author_obj1 , author_obj2 )) set\u65b9\u6cd5 \u80fd\u4fee\u6539\u591a\u5bf9\u591a\u5173\u7cfb\u8868\u4e2d\u7684\u6570\u636e \u53ef\u4ee5\u4f20\u6570\u5b57\uff0c\u4e5f\u53ef\u4ee5\u4f20\u5bf9\u8c61\uff0c\u90fd\u652f\u6301\u4f20\u591a\u4e2a set\u91cc\u9762\u4f20\u7684\u662f\u53ef\u8fed\u4ee3\u5bf9\u8c61","title":"\u6539\uff1aset"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/09%20django%E4%B9%8B%E6%A8%A1%E5%9E%8B%E5%B1%82/#remove","text":"# \u65b9\u6cd51\uff1a\u4f20\u5b57\u6bb5 book_obj = models . Book . objects . filter ( pk = 2 ) . first () book_obj . authors . remove ( 1 ) book_obj . authors . remove ( 1 , 2 ) # \u652f\u6301\u591a\u4e2a # \u65b9\u6cd52\uff1a\u4f20\u6570\u636e\u5bf9\u8c61 book_obj = models . Book . objects . filter ( pk = 1 ) . first () author_obj = models . Author . objects . filter ( pk = 1 ) . first () book_obj . authors . remove ( author_obj ) remove\u65b9\u6cd5 \u80fd\u5220\u9664\u591a\u5bf9\u591a\u5173\u7cfb\u8868\u4e2d\u7684\u6570\u636e \u53ef\u4ee5\u4f20\u6570\u5b57\uff0c\u4e5f\u53ef\u4ee5\u4f20\u5bf9\u8c61\uff0c \u90fd\u652f\u6301\u4f20\u591a\u4e2a\uff0c \u4e0d\u9700\u8981\u4f20\u8fed\u4ee3\u5bf9\u8c61","title":"\u5220\uff1aremove"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/09%20django%E4%B9%8B%E6%A8%A1%E5%9E%8B%E5%B1%82/#clear","text":"book_obj = models . Book . objects . filter ( pk = 2 ) . first () book_obj . authors . clear () clear\u6e05\u7a7a\u6570\u636e\uff0c\u62ec\u53f7\u91cc\u9762\u4e0d\u9700\u8981\u4f20\u53c2\u6570","title":"\u6e05\u7a7a\uff1aclear"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/09%20django%E4%B9%8B%E6%A8%A1%E5%9E%8B%E5%B1%82/#_11","text":"","title":"\u8de8\u8868\u67e5\u8be2"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/09%20django%E4%B9%8B%E6%A8%A1%E5%9E%8B%E5%B1%82/#_12","text":"\u6b63\u5411\u67e5\u8be2 \u5173\u7cfb\u5b57\u6bb5\u5728\u8c01\u90a3\uff0c\u7531\u6709\u5173\u7cfb\u5b57\u6bb5\u7684\u8868\u67e5\uff0c\u5c31\u662f\u6b63\u5411\u67e5\u8be2 \u53cd\u5411\u67e5\u8be2 \u5173\u7cfb\u5b57\u6bb5\u4e0d\u5728\u90a3 \u6b63\u5411\u67e5\u8be2\u6309\u5b57\u6bb5\uff0c\u53cd\u5411\u67e5\u8be2\u6309\u8868\u540d\u5c0f\u5199 + _set","title":"\u6b63\u53cd\u5411\u67e5\u8be2"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/09%20django%E4%B9%8B%E6%A8%A1%E5%9E%8B%E5%B1%82/#_13","text":"# 1.\u67e5\u8be2\u4e66\u7c4d\u4e3b\u952e\u4e3a2\u7684\u51fa\u7248\u793e\u540d\u79f0 book_obj = models . Book . objects . filter ( pk = 2 ) . first () print ( book_obj . publish . name ) # 2.\u67e5\u8be2\u4e66\u7c4d\u4e3b\u952e\u4e3a1\u7684\u4f5c\u8005\u59d3\u540d book_obj = models . Book . objects . filter ( pk = 1 ) . first () # print(book_obj.authors) # app01.Author.None print ( book_obj . authors . all ()) # \u5f53\u6b63\u5411\u67e5\u8be2\u70b9\u51fb\u5916\u952e\u5b57\u6bb5\u6570\u636e\u6709\u591a\u4e2a\u7684\u60c5\u51b5\u4e0b \u9700\u8981.all() # 3.\u67e5\u8be2\u4f5c\u8005\u662f\u5f0f\u5fae\u7684\u624b\u673a\u53f7\u7801 author_obj = models . Author . objects . filter ( name = '\u5f0f\u5fae' ) . first () print ( author_obj . author_detail . phone ) # 4.\u67e5\u8be2\u51fa\u7248\u793e\u662f\u4e1c\u65b9\u51fa\u7248\u793e\u51fa\u7248\u8fc7\u7684\u4e66\u7c4d publish_obj = models . Publish . objects . filter ( name = '\u4e1c\u65b9\u51fa\u7248\u793e' ) . first () print ( publish_obj . book_set . all ()) # 5.\u67e5\u8be2\u624b\u673a\u53f7\u662f120\u7684\u4f5c\u8005\u59d3\u540d author_detail_obj = models . AuthorDetail . objects . filter ( phone = 120 ) . first () print ( author_detail_obj . author . name ) # 6.\u67e5\u8be2\u4f5c\u8005\u662f\u65e0\u540d\u5199\u8fc7\u7684\u4e66\u7c4d author_obj = models . Author . objects . filter ( name = '\u65e0\u540d' ) . first () print ( author_obj . book_set . all ()) \u603b\u7ed3\uff1a \u6b63\u5411\u67e5\u8be2\uff0c \u70b9\u51fb\u5916\u952e\u5b57\u6bb5\u6570\u636e\u6709\u591a\u4e2a\u7684\u60c5\u51b5\u4e0b \u9700\u8981.all() \u53cd\u5411\u67e5\u8be2\uff0c\u4e00\u5bf9\u591a\u548c\u591a\u5bf9\u591a\u9700\u8981 \u8868\u540d + _set \uff0c\u4e00\u5bf9\u4e00\u4e0d\u9700\u8981\u52a0 _set","title":"\u57fa\u4e8e\u5bf9\u8c61\u7684\u8de8\u8868\u67e5\u8be2\uff08\u5b50\u67e5\u8be2\uff09"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/09%20django%E4%B9%8B%E6%A8%A1%E5%9E%8B%E5%B1%82/#_14","text":"# 1.\u67e5\u8be2\u4e66\u7c4dpk\u4e3a2\u7684\u51fa\u7248\u793e\u540d\u79f0 res = models . Book . objects . filter ( pk = 2 ) . values ( 'publish__name' ) print ( res ) res = models . Publish . objects . filter ( book__pk = 2 ) . values ( 'name' ) # 2.\u67e5\u8be2\u4e66\u7c4dpk\u4e3a2\u7684\u4f5c\u8005\u59d3\u540d\u548c\u90ae\u7bb1 res = models . Book . objects . filter ( pk = 2 ) . values ( 'authors__name' , 'authors__email' ) print ( res ) res = models . Author . objects . filter ( book__pk = 2 ) . values ( 'name' , 'email' ) # 3.\u67e5\u8be2\u4f5c\u8005\u662f\u90b6\u98ce\u7684\u5bb6\u5ead\u5730\u5740 res = models . Author . objects . filter ( name = '\u90b6\u98ce' ) . values ( 'author_detail__addr' ) print ( res ) res = models . AuthorDetail . objects . filter ( author__name = '\u90b6\u98ce' ) . values ( 'addr' ) # 4.\u67e5\u8be2\u51fa\u7248\u793e\u662f\u4e1c\u65b9\u51fa\u7248\u793e\u51fa\u7248\u8fc7\u7684\u4e66\u7684\u540d\u5b57 res = models . Publish . objects . filter ( name = '\u4e1c\u65b9\u51fa\u7248\u793e' ) . values ( 'book__title' ) print ( res ) res = models . Book . objects . filter ( publish__name = '\u4e1c\u65b9\u51fa\u7248\u793e' ) . values ( 'title' ) # 5. \u67e5\u8be2\u4e66\u7c4dpk\u662f2\u7684\u4f5c\u8005\u7684\u624b\u673a\u53f7 res = models . Book . objects . filter ( pk = 2 ) . values ( 'authors__author_detail__phone' ) print ( res ) res = models . Author . objects . filter ( book__pk = 2 ) . values ( 'author_detail__phone' )","title":"\u57fa\u4e8e\u53cc\u4e0b\u5212\u7ebf\u7684\u8de8\u8868\u67e5\u8be2\uff08\u8054\u8868\u67e5\u8be2\uff09"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/10%20django%E4%B9%8BORM%E5%AD%97%E6%AE%B5%E5%8F%8A%E5%8F%82%E6%95%B0/","text":"ORM\u5b57\u6bb5\u53ca\u53c2\u6570 # orm\u5e38\u7528\u5b57\u6bb5 # \u5b57\u6bb5\u540d \u8bf4\u660e AutoField \u5982\u679c\u81ea\u5df1\u6ca1\u6709\u5b9a\u4e49\u4e3b\u952eid\uff0cdjango\u4f1a\u9ed8\u8ba4\u81ea\u52a8\u521b\u5efa\u4e00\u4e2aid\u5b57\u6bb5\uff0c\u5e76\u628a\u5b83\u4f5c\u4e3a\u4e3b\u952e IntegerField \u4e00\u4e2a\u6574\u6570\u7c7b\u578b,\u8303\u56f4\u5728 -2147483648 \u5230 2147483647 BigterField bigint EmailField varchar(254) BooleanField \u5e03\u5c14\u503c\uff0c\u8be5\u5b57\u6bb5\u5728\u5b58\u50a8\u7684\u65f6\u5019 \u4f60\u53ea\u9700\u8981\u4f20\u5e03\u5c14\u503cTrue\u6216False\uff0c\u5b83\u4f1a\u81ea\u52a8\u5b58\u62101/0 TextField \u4e13\u95e8\u7528\u6765\u5b58\u5927\u6bb5\u6587\u672c FileFiled \u4e13\u95e8\u7528\u6765\u5b58\u6587\u4ef6 upload_to=\u6587\u4ef6\u8def\u5f84 DecimalField(Field) \u53c2\u6570\uff1a max_digits \uff0c\u5c0f\u6570\u603b\u957f\u5ea6\uff0c decimal_places \uff0c\u5c0f\u6570\u4f4d\u957f\u5ea6 CharField \u5bf9\u5e94MySQL\u4e2d\u7684varchar\u5b57\u6bb5 DateField DateTimeFiled DateTimeFiled \u548c DateField \u90fd\u6709\u4e24\u4e2a\u53c2\u6570\uff1a auto_now_add \u548c auto_now auto_now \u8bbe\u4e3aTrue \uff0c\u6bcf\u6b21\u66f4\u65b0\u6570\u636e\u8bb0\u5f55\u7684\u65f6\u5019\u4f1a\u66f4\u65b0\u8be5\u5b57\u6bb5 auto_now_add \u8bbe\u4e3aTrue\uff0c \u521b\u5efa\u6570\u636e\u8bb0\u5f55\u7684\u65f6\u5019\u4f1a\u628a\u5f53\u524d\u65f6\u95f4\u6dfb\u52a0\u5230\u6570\u636e\u5e93\u3002 choices\u53c2\u6570 # choices = ( ( 1 , 'male' ), ( 2 , 'female' ), ( 3 , 'others' ) ) gender = models . IntegerField ( choices = choices ) from app01 import models user_obj = models . Userinfo . objects . filter ( pk = 4 ) . first () print ( user_obj . username ) print ( user_obj . gender ) # \u9488\u5bf9choices\u5b57\u6bb5 \u5982\u679c\u4f60\u60f3\u8981\u83b7\u53d6\u6570\u5b57\u6240\u5bf9\u5e94\u7684\u4e2d\u6587 \u4f60\u4e0d\u80fd\u76f4\u63a5\u70b9\u5b57\u6bb5 # \u56fa\u5b9a\u53e5\u5f0f \u6570\u636e\u5bf9\u8c61.get_\u5b57\u6bb5\u540d_display() \u5f53\u6ca1\u6709\u5bf9\u5e94\u5173\u7cfb\u7684\u65f6\u5019 \u8be5\u53e5\u5f0f\u83b7\u53d6\u5230\u7684\u8fd8\u662f\u6570\u5b57 print ( user_obj . get_gender_display ()) \u5b57\u6bb5\u5408\u96c6 # AutoField ( Field ) - int\u81ea\u589e\u5217 \uff0c \u5fc5\u987b\u586b\u5165\u53c2\u6570 primary_key = True BigAutoField ( AutoField ) - bigint\u81ea\u589e\u5217 \uff0c \u5fc5\u987b\u586b\u5165\u53c2\u6570 primary_key = True \u6ce8 \uff1a \u5f53model\u4e2d\u5982\u679c\u6ca1\u6709\u81ea\u589e\u5217 \uff0c \u5219\u81ea\u52a8\u4f1a\u521b\u5efa\u4e00\u4e2a\u5217\u540d\u4e3aid\u7684\u5217 from django.db import models class UserInfo ( models . Model ): # \u81ea\u52a8\u521b\u5efa\u4e00\u4e2a\u5217\u540d\u4e3aid\u7684\u4e14\u4e3a\u81ea\u589e\u7684\u6574\u6570\u5217 username = models . CharField ( max_length = 32 ) class Group ( models . Model ): # \u81ea\u5b9a\u4e49\u81ea\u589e\u5217 nid = models . AutoField ( primary_key = True ) name = models . CharField ( max_length = 32 ) SmallIntegerField ( IntegerField ): - \u5c0f\u6574\u6570 - 32768 \uff5e 32767 PositiveSmallIntegerField ( PositiveIntegerRelDbTypeMixin , IntegerField ) - \u6b63\u5c0f\u6574\u6570 0 \uff5e 32767 IntegerField ( Field ) - \u6574\u6570\u5217 ( \u6709\u7b26\u53f7\u7684 ) - 2147483648 \uff5e 2147483647 PositiveIntegerField ( PositiveIntegerRelDbTypeMixin , IntegerField ) - \u6b63\u6574\u6570 0 \uff5e 2147483647 BigIntegerField ( IntegerField ): - \u957f\u6574\u578b ( \u6709\u7b26\u53f7\u7684 ) - 9223372036854775808 \uff5e 9223372036854775807 BooleanField ( Field ) - \u5e03\u5c14\u503c\u7c7b\u578b NullBooleanField ( Field ): - \u53ef\u4ee5\u4e3a\u7a7a\u7684\u5e03\u5c14\u503c CharField ( Field ) - \u5b57\u7b26\u7c7b\u578b - \u5fc5\u987b\u63d0\u4f9bmax_length\u53c2\u6570 \uff0c max_length\u8868\u793a\u5b57\u7b26\u957f\u5ea6 TextField ( Field ) - \u6587\u672c\u7c7b\u578b EmailField ( CharField ) \uff1a - \u5b57\u7b26\u4e32\u7c7b\u578b \uff0c Django Admin\u4ee5\u53caModelForm\u4e2d\u63d0\u4f9b\u9a8c\u8bc1\u673a\u5236 IPAddressField ( Field ) - \u5b57\u7b26\u4e32\u7c7b\u578b \uff0c Django Admin\u4ee5\u53caModelForm\u4e2d\u63d0\u4f9b\u9a8c\u8bc1 IPV4 \u673a\u5236 GenericIPAddressField ( Field ) - \u5b57\u7b26\u4e32\u7c7b\u578b \uff0c Django Admin\u4ee5\u53caModelForm\u4e2d\u63d0\u4f9b\u9a8c\u8bc1 Ipv4\u548cIpv6 - \u53c2\u6570 \uff1a protocol \uff0c \u7528\u4e8e\u6307\u5b9aIpv4\u6216Ipv6 \uff0c 'both' , \"ipv4\" , \"ipv6\" unpack_ipv4 \uff0c \u5982\u679c\u6307\u5b9a\u4e3aTrue \uff0c \u5219\u8f93\u5165 :: ffff : 192.0 . 2.1 \u65f6\u5019 \uff0c \u53ef\u89e3\u6790\u4e3a192 . 0.2 . 1 \uff0c \u5f00\u542f\u6b64\u529f\u80fd \uff0c \u9700\u8981protocol = \"both\" URLField ( CharField ) - \u5b57\u7b26\u4e32\u7c7b\u578b \uff0c Django Admin\u4ee5\u53caModelForm\u4e2d\u63d0\u4f9b\u9a8c\u8bc1 URL SlugField ( CharField ) - \u5b57\u7b26\u4e32\u7c7b\u578b \uff0c Django Admin\u4ee5\u53caModelForm\u4e2d\u63d0\u4f9b\u9a8c\u8bc1\u652f\u6301 \u5b57\u6bcd \u3001 \u6570\u5b57 \u3001 \u4e0b\u5212\u7ebf \u3001 \u8fde\u63a5\u7b26 \uff08 \u51cf\u53f7 \uff09 CommaSeparatedIntegerField ( CharField ) - \u5b57\u7b26\u4e32\u7c7b\u578b \uff0c \u683c\u5f0f\u5fc5\u987b\u4e3a\u9017\u53f7\u5206\u5272\u7684\u6570\u5b57 UUIDField ( Field ) - \u5b57\u7b26\u4e32\u7c7b\u578b \uff0c Django Admin\u4ee5\u53caModelForm\u4e2d\u63d0\u4f9b\u5bf9UUID\u683c\u5f0f\u7684\u9a8c\u8bc1 FilePathField ( Field ) - \u5b57\u7b26\u4e32 \uff0c Django Admin\u4ee5\u53caModelForm\u4e2d\u63d0\u4f9b\u8bfb\u53d6\u6587\u4ef6\u5939\u4e0b\u6587\u4ef6\u7684\u529f\u80fd - \u53c2\u6570 \uff1a path , \u6587\u4ef6\u5939\u8def\u5f84 match = None , \u6b63\u5219\u5339\u914d recursive = False , \u9012\u5f52\u4e0b\u9762\u7684\u6587\u4ef6\u5939 allow_files = True , \u5141\u8bb8\u6587\u4ef6 allow_folders = False , \u5141\u8bb8\u6587\u4ef6\u5939 FileField ( Field ) - \u5b57\u7b26\u4e32 \uff0c \u8def\u5f84\u4fdd\u5b58\u5728\u6570\u636e\u5e93 \uff0c \u6587\u4ef6\u4e0a\u4f20\u5230\u6307\u5b9a\u76ee\u5f55 - \u53c2\u6570 \uff1a upload_to = \"\" \u4e0a\u4f20\u6587\u4ef6\u7684\u4fdd\u5b58\u8def\u5f84 storage = None \u5b58\u50a8\u7ec4\u4ef6 \uff0c \u9ed8\u8ba4django . core . files . storage . FileSystemStorage ImageField ( FileField ) - \u5b57\u7b26\u4e32 \uff0c \u8def\u5f84\u4fdd\u5b58\u5728\u6570\u636e\u5e93 \uff0c \u6587\u4ef6\u4e0a\u4f20\u5230\u6307\u5b9a\u76ee\u5f55 - \u53c2\u6570 \uff1a upload_to = \"\" \u4e0a\u4f20\u6587\u4ef6\u7684\u4fdd\u5b58\u8def\u5f84 storage = None \u5b58\u50a8\u7ec4\u4ef6 \uff0c \u9ed8\u8ba4django . core . files . storage . FileSystemStorage width_field = None , \u4e0a\u4f20\u56fe\u7247\u7684\u9ad8\u5ea6\u4fdd\u5b58\u7684\u6570\u636e\u5e93\u5b57\u6bb5\u540d \uff08 \u5b57\u7b26\u4e32 \uff09 height_field = None \u4e0a\u4f20\u56fe\u7247\u7684\u5bbd\u5ea6\u4fdd\u5b58\u7684\u6570\u636e\u5e93\u5b57\u6bb5\u540d \uff08 \u5b57\u7b26\u4e32 \uff09 DateTimeField ( DateField ) - \u65e5\u671f + \u65f6\u95f4\u683c\u5f0f YYYY - MM - DD HH : MM [: ss [ . uuuuuu ]][ TZ ] DateField ( DateTimeCheckMixin , Field ) - \u65e5\u671f\u683c\u5f0f YYYY - MM - DD TimeField ( DateTimeCheckMixin , Field ) - \u65f6\u95f4\u683c\u5f0f HH : MM [: ss [ . uuuuuu ]] DurationField ( Field ) - \u957f\u6574\u6570 \uff0c \u65f6\u95f4\u95f4\u9694 \uff0c \u6570\u636e\u5e93\u4e2d\u6309\u7167bigint\u5b58\u50a8 \uff0c ORM\u4e2d\u83b7\u53d6\u7684\u503c\u4e3adatetime . timedelta\u7c7b\u578b FloatField ( Field ) - \u6d6e\u70b9\u578b DecimalField ( Field ) - 10 \u8fdb\u5236\u5c0f\u6570 - \u53c2\u6570 \uff1a max_digits \uff0c \u5c0f\u6570\u603b\u957f\u5ea6 decimal_places \uff0c \u5c0f\u6570\u4f4d\u957f\u5ea6 BinaryField ( Field ) - \u4e8c\u8fdb\u5236\u7c7b\u578b \u5b57\u6bb5\u5408\u96c6 \u81ea\u5b9a\u4e49char\u5b57\u6bb5 # class MyCharField ( models . Field ): def __init__ ( self , max_length , * args , ** kwargs ): self . max_length = max_length # \u91cd\u65b0\u8c03\u7528\u7236\u7c7b\u7684\u65b9\u6cd5 super () . __init__ ( max_length = max_length , * args , ** kwargs ) def db_type ( self , connection ): return 'char( %s )' % self . max_length \u5b57\u6bb5\u53c2\u6570 # \u5b57\u6bb5\u53c2\u6570 \u8bf4\u660e null \u7528\u4e8e\u8868\u793a\u67d0\u4e2a\u5b57\u6bb5\u53ef\u4ee5\u4e3a\u7a7a\u3002 unique \u5982\u679c\u8bbe\u7f6e\u4e3aunique=True \u5219\u8be5\u5b57\u6bb5\u5728\u6b64\u8868\u4e2d\u5fc5\u987b\u662f\u552f\u4e00\u7684 db_index db_index=True \u5219\u4ee3\u8868\u7740\u4e3a\u6b64\u5b57\u6bb5\u8bbe\u7f6e\u7d22\u5f15\u3002 default \u4e3a\u8be5\u5b57\u6bb5\u8bbe\u7f6e\u9ed8\u8ba4\u503c auto now add \u521b\u5efa\u6570\u636e\u7684\u65f6\u5019\uff0c\u4f1a\u628a\u5f53\u524d\u65f6\u95f4\u81ea\u52a8\u6dfb\u52a0\u4e0a\u53bb\uff0c\u4e4b\u540e\u5c31\u4e0d\u518d\u4fee\u6539\u65f6\u95f4\u4e86\uff0c\u9664\u975e\u4eba\u4e3a\u4fee\u6539 auto_now \u6bcf\u6b21\u4fee\u6539\u6570\u636e\u7684\u65f6\u5019\uff0c\u4f1a\u81ea\u52a8\u66f4\u65b0\u5f53\u524d\u65f6\u95f4\uff0c\u5b9e\u65f6\u66f4\u65b0 \u5916\u952e\u5b57\u6bb5\u7684\u53c2\u6570 # \u53c2\u6570 \u8bf4\u660e to \u8bbe\u7f6e\u8981\u5173\u8054\u7684\u8868 to_field \u8bbe\u7f6e\u8981\u5173\u8054\u7684\u8868\u5b57\u6bb5\uff0c\u9ed8\u8ba4django\u81ea\u52a8\u5173\u8054\u4e3b\u952e on_delete \u5f53\u5220\u9664\u5173\u8054\u8868\u4e2d\u7684\u6570\u636e\u65f6\uff0c\u5f53\u524d\u4e0e\u5176\u5173\u8054\u7684\u884c\u4e3a db_constraint \u662f\u5426\u5728\u6570\u636e\u5e93\u4e2d\u521b\u5efa\u5916\u952e\u7ea6\u675f\uff0c\u9ed8\u8ba4\u662fTrue on_delete = modeles.CASCADE # \u7ea7\u8054\u5220\u9664 \u6ce8\u610f\uff1a\u5728django 2.x\u7248\u672c \u9700\u8981\u624b\u52a8\u6307\u5b9a db_constraint \u7b49\u53c2\u6570","title":"10 django\u4e4bORM\u5b57\u6bb5\u53ca\u53c2\u6570"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/10%20django%E4%B9%8BORM%E5%AD%97%E6%AE%B5%E5%8F%8A%E5%8F%82%E6%95%B0/#orm","text":"","title":"ORM\u5b57\u6bb5\u53ca\u53c2\u6570"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/10%20django%E4%B9%8BORM%E5%AD%97%E6%AE%B5%E5%8F%8A%E5%8F%82%E6%95%B0/#orm_1","text":"\u5b57\u6bb5\u540d \u8bf4\u660e AutoField \u5982\u679c\u81ea\u5df1\u6ca1\u6709\u5b9a\u4e49\u4e3b\u952eid\uff0cdjango\u4f1a\u9ed8\u8ba4\u81ea\u52a8\u521b\u5efa\u4e00\u4e2aid\u5b57\u6bb5\uff0c\u5e76\u628a\u5b83\u4f5c\u4e3a\u4e3b\u952e IntegerField \u4e00\u4e2a\u6574\u6570\u7c7b\u578b,\u8303\u56f4\u5728 -2147483648 \u5230 2147483647 BigterField bigint EmailField varchar(254) BooleanField \u5e03\u5c14\u503c\uff0c\u8be5\u5b57\u6bb5\u5728\u5b58\u50a8\u7684\u65f6\u5019 \u4f60\u53ea\u9700\u8981\u4f20\u5e03\u5c14\u503cTrue\u6216False\uff0c\u5b83\u4f1a\u81ea\u52a8\u5b58\u62101/0 TextField \u4e13\u95e8\u7528\u6765\u5b58\u5927\u6bb5\u6587\u672c FileFiled \u4e13\u95e8\u7528\u6765\u5b58\u6587\u4ef6 upload_to=\u6587\u4ef6\u8def\u5f84 DecimalField(Field) \u53c2\u6570\uff1a max_digits \uff0c\u5c0f\u6570\u603b\u957f\u5ea6\uff0c decimal_places \uff0c\u5c0f\u6570\u4f4d\u957f\u5ea6 CharField \u5bf9\u5e94MySQL\u4e2d\u7684varchar\u5b57\u6bb5 DateField DateTimeFiled DateTimeFiled \u548c DateField \u90fd\u6709\u4e24\u4e2a\u53c2\u6570\uff1a auto_now_add \u548c auto_now auto_now \u8bbe\u4e3aTrue \uff0c\u6bcf\u6b21\u66f4\u65b0\u6570\u636e\u8bb0\u5f55\u7684\u65f6\u5019\u4f1a\u66f4\u65b0\u8be5\u5b57\u6bb5 auto_now_add \u8bbe\u4e3aTrue\uff0c \u521b\u5efa\u6570\u636e\u8bb0\u5f55\u7684\u65f6\u5019\u4f1a\u628a\u5f53\u524d\u65f6\u95f4\u6dfb\u52a0\u5230\u6570\u636e\u5e93\u3002","title":"orm\u5e38\u7528\u5b57\u6bb5"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/10%20django%E4%B9%8BORM%E5%AD%97%E6%AE%B5%E5%8F%8A%E5%8F%82%E6%95%B0/#choices","text":"choices = ( ( 1 , 'male' ), ( 2 , 'female' ), ( 3 , 'others' ) ) gender = models . IntegerField ( choices = choices ) from app01 import models user_obj = models . Userinfo . objects . filter ( pk = 4 ) . first () print ( user_obj . username ) print ( user_obj . gender ) # \u9488\u5bf9choices\u5b57\u6bb5 \u5982\u679c\u4f60\u60f3\u8981\u83b7\u53d6\u6570\u5b57\u6240\u5bf9\u5e94\u7684\u4e2d\u6587 \u4f60\u4e0d\u80fd\u76f4\u63a5\u70b9\u5b57\u6bb5 # \u56fa\u5b9a\u53e5\u5f0f \u6570\u636e\u5bf9\u8c61.get_\u5b57\u6bb5\u540d_display() \u5f53\u6ca1\u6709\u5bf9\u5e94\u5173\u7cfb\u7684\u65f6\u5019 \u8be5\u53e5\u5f0f\u83b7\u53d6\u5230\u7684\u8fd8\u662f\u6570\u5b57 print ( user_obj . get_gender_display ())","title":"choices\u53c2\u6570"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/10%20django%E4%B9%8BORM%E5%AD%97%E6%AE%B5%E5%8F%8A%E5%8F%82%E6%95%B0/#_1","text":"AutoField ( Field ) - int\u81ea\u589e\u5217 \uff0c \u5fc5\u987b\u586b\u5165\u53c2\u6570 primary_key = True BigAutoField ( AutoField ) - bigint\u81ea\u589e\u5217 \uff0c \u5fc5\u987b\u586b\u5165\u53c2\u6570 primary_key = True \u6ce8 \uff1a \u5f53model\u4e2d\u5982\u679c\u6ca1\u6709\u81ea\u589e\u5217 \uff0c \u5219\u81ea\u52a8\u4f1a\u521b\u5efa\u4e00\u4e2a\u5217\u540d\u4e3aid\u7684\u5217 from django.db import models class UserInfo ( models . Model ): # \u81ea\u52a8\u521b\u5efa\u4e00\u4e2a\u5217\u540d\u4e3aid\u7684\u4e14\u4e3a\u81ea\u589e\u7684\u6574\u6570\u5217 username = models . CharField ( max_length = 32 ) class Group ( models . Model ): # \u81ea\u5b9a\u4e49\u81ea\u589e\u5217 nid = models . AutoField ( primary_key = True ) name = models . CharField ( max_length = 32 ) SmallIntegerField ( IntegerField ): - \u5c0f\u6574\u6570 - 32768 \uff5e 32767 PositiveSmallIntegerField ( PositiveIntegerRelDbTypeMixin , IntegerField ) - \u6b63\u5c0f\u6574\u6570 0 \uff5e 32767 IntegerField ( Field ) - \u6574\u6570\u5217 ( \u6709\u7b26\u53f7\u7684 ) - 2147483648 \uff5e 2147483647 PositiveIntegerField ( PositiveIntegerRelDbTypeMixin , IntegerField ) - \u6b63\u6574\u6570 0 \uff5e 2147483647 BigIntegerField ( IntegerField ): - \u957f\u6574\u578b ( \u6709\u7b26\u53f7\u7684 ) - 9223372036854775808 \uff5e 9223372036854775807 BooleanField ( Field ) - \u5e03\u5c14\u503c\u7c7b\u578b NullBooleanField ( Field ): - \u53ef\u4ee5\u4e3a\u7a7a\u7684\u5e03\u5c14\u503c CharField ( Field ) - \u5b57\u7b26\u7c7b\u578b - \u5fc5\u987b\u63d0\u4f9bmax_length\u53c2\u6570 \uff0c max_length\u8868\u793a\u5b57\u7b26\u957f\u5ea6 TextField ( Field ) - \u6587\u672c\u7c7b\u578b EmailField ( CharField ) \uff1a - \u5b57\u7b26\u4e32\u7c7b\u578b \uff0c Django Admin\u4ee5\u53caModelForm\u4e2d\u63d0\u4f9b\u9a8c\u8bc1\u673a\u5236 IPAddressField ( Field ) - \u5b57\u7b26\u4e32\u7c7b\u578b \uff0c Django Admin\u4ee5\u53caModelForm\u4e2d\u63d0\u4f9b\u9a8c\u8bc1 IPV4 \u673a\u5236 GenericIPAddressField ( Field ) - \u5b57\u7b26\u4e32\u7c7b\u578b \uff0c Django Admin\u4ee5\u53caModelForm\u4e2d\u63d0\u4f9b\u9a8c\u8bc1 Ipv4\u548cIpv6 - \u53c2\u6570 \uff1a protocol \uff0c \u7528\u4e8e\u6307\u5b9aIpv4\u6216Ipv6 \uff0c 'both' , \"ipv4\" , \"ipv6\" unpack_ipv4 \uff0c \u5982\u679c\u6307\u5b9a\u4e3aTrue \uff0c \u5219\u8f93\u5165 :: ffff : 192.0 . 2.1 \u65f6\u5019 \uff0c \u53ef\u89e3\u6790\u4e3a192 . 0.2 . 1 \uff0c \u5f00\u542f\u6b64\u529f\u80fd \uff0c \u9700\u8981protocol = \"both\" URLField ( CharField ) - \u5b57\u7b26\u4e32\u7c7b\u578b \uff0c Django Admin\u4ee5\u53caModelForm\u4e2d\u63d0\u4f9b\u9a8c\u8bc1 URL SlugField ( CharField ) - \u5b57\u7b26\u4e32\u7c7b\u578b \uff0c Django Admin\u4ee5\u53caModelForm\u4e2d\u63d0\u4f9b\u9a8c\u8bc1\u652f\u6301 \u5b57\u6bcd \u3001 \u6570\u5b57 \u3001 \u4e0b\u5212\u7ebf \u3001 \u8fde\u63a5\u7b26 \uff08 \u51cf\u53f7 \uff09 CommaSeparatedIntegerField ( CharField ) - \u5b57\u7b26\u4e32\u7c7b\u578b \uff0c \u683c\u5f0f\u5fc5\u987b\u4e3a\u9017\u53f7\u5206\u5272\u7684\u6570\u5b57 UUIDField ( Field ) - \u5b57\u7b26\u4e32\u7c7b\u578b \uff0c Django Admin\u4ee5\u53caModelForm\u4e2d\u63d0\u4f9b\u5bf9UUID\u683c\u5f0f\u7684\u9a8c\u8bc1 FilePathField ( Field ) - \u5b57\u7b26\u4e32 \uff0c Django Admin\u4ee5\u53caModelForm\u4e2d\u63d0\u4f9b\u8bfb\u53d6\u6587\u4ef6\u5939\u4e0b\u6587\u4ef6\u7684\u529f\u80fd - \u53c2\u6570 \uff1a path , \u6587\u4ef6\u5939\u8def\u5f84 match = None , \u6b63\u5219\u5339\u914d recursive = False , \u9012\u5f52\u4e0b\u9762\u7684\u6587\u4ef6\u5939 allow_files = True , \u5141\u8bb8\u6587\u4ef6 allow_folders = False , \u5141\u8bb8\u6587\u4ef6\u5939 FileField ( Field ) - \u5b57\u7b26\u4e32 \uff0c \u8def\u5f84\u4fdd\u5b58\u5728\u6570\u636e\u5e93 \uff0c \u6587\u4ef6\u4e0a\u4f20\u5230\u6307\u5b9a\u76ee\u5f55 - \u53c2\u6570 \uff1a upload_to = \"\" \u4e0a\u4f20\u6587\u4ef6\u7684\u4fdd\u5b58\u8def\u5f84 storage = None \u5b58\u50a8\u7ec4\u4ef6 \uff0c \u9ed8\u8ba4django . core . files . storage . FileSystemStorage ImageField ( FileField ) - \u5b57\u7b26\u4e32 \uff0c \u8def\u5f84\u4fdd\u5b58\u5728\u6570\u636e\u5e93 \uff0c \u6587\u4ef6\u4e0a\u4f20\u5230\u6307\u5b9a\u76ee\u5f55 - \u53c2\u6570 \uff1a upload_to = \"\" \u4e0a\u4f20\u6587\u4ef6\u7684\u4fdd\u5b58\u8def\u5f84 storage = None \u5b58\u50a8\u7ec4\u4ef6 \uff0c \u9ed8\u8ba4django . core . files . storage . FileSystemStorage width_field = None , \u4e0a\u4f20\u56fe\u7247\u7684\u9ad8\u5ea6\u4fdd\u5b58\u7684\u6570\u636e\u5e93\u5b57\u6bb5\u540d \uff08 \u5b57\u7b26\u4e32 \uff09 height_field = None \u4e0a\u4f20\u56fe\u7247\u7684\u5bbd\u5ea6\u4fdd\u5b58\u7684\u6570\u636e\u5e93\u5b57\u6bb5\u540d \uff08 \u5b57\u7b26\u4e32 \uff09 DateTimeField ( DateField ) - \u65e5\u671f + \u65f6\u95f4\u683c\u5f0f YYYY - MM - DD HH : MM [: ss [ . uuuuuu ]][ TZ ] DateField ( DateTimeCheckMixin , Field ) - \u65e5\u671f\u683c\u5f0f YYYY - MM - DD TimeField ( DateTimeCheckMixin , Field ) - \u65f6\u95f4\u683c\u5f0f HH : MM [: ss [ . uuuuuu ]] DurationField ( Field ) - \u957f\u6574\u6570 \uff0c \u65f6\u95f4\u95f4\u9694 \uff0c \u6570\u636e\u5e93\u4e2d\u6309\u7167bigint\u5b58\u50a8 \uff0c ORM\u4e2d\u83b7\u53d6\u7684\u503c\u4e3adatetime . timedelta\u7c7b\u578b FloatField ( Field ) - \u6d6e\u70b9\u578b DecimalField ( Field ) - 10 \u8fdb\u5236\u5c0f\u6570 - \u53c2\u6570 \uff1a max_digits \uff0c \u5c0f\u6570\u603b\u957f\u5ea6 decimal_places \uff0c \u5c0f\u6570\u4f4d\u957f\u5ea6 BinaryField ( Field ) - \u4e8c\u8fdb\u5236\u7c7b\u578b \u5b57\u6bb5\u5408\u96c6","title":"\u5b57\u6bb5\u5408\u96c6"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/10%20django%E4%B9%8BORM%E5%AD%97%E6%AE%B5%E5%8F%8A%E5%8F%82%E6%95%B0/#char","text":"class MyCharField ( models . Field ): def __init__ ( self , max_length , * args , ** kwargs ): self . max_length = max_length # \u91cd\u65b0\u8c03\u7528\u7236\u7c7b\u7684\u65b9\u6cd5 super () . __init__ ( max_length = max_length , * args , ** kwargs ) def db_type ( self , connection ): return 'char( %s )' % self . max_length","title":"\u81ea\u5b9a\u4e49char\u5b57\u6bb5"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/10%20django%E4%B9%8BORM%E5%AD%97%E6%AE%B5%E5%8F%8A%E5%8F%82%E6%95%B0/#_2","text":"\u5b57\u6bb5\u53c2\u6570 \u8bf4\u660e null \u7528\u4e8e\u8868\u793a\u67d0\u4e2a\u5b57\u6bb5\u53ef\u4ee5\u4e3a\u7a7a\u3002 unique \u5982\u679c\u8bbe\u7f6e\u4e3aunique=True \u5219\u8be5\u5b57\u6bb5\u5728\u6b64\u8868\u4e2d\u5fc5\u987b\u662f\u552f\u4e00\u7684 db_index db_index=True \u5219\u4ee3\u8868\u7740\u4e3a\u6b64\u5b57\u6bb5\u8bbe\u7f6e\u7d22\u5f15\u3002 default \u4e3a\u8be5\u5b57\u6bb5\u8bbe\u7f6e\u9ed8\u8ba4\u503c auto now add \u521b\u5efa\u6570\u636e\u7684\u65f6\u5019\uff0c\u4f1a\u628a\u5f53\u524d\u65f6\u95f4\u81ea\u52a8\u6dfb\u52a0\u4e0a\u53bb\uff0c\u4e4b\u540e\u5c31\u4e0d\u518d\u4fee\u6539\u65f6\u95f4\u4e86\uff0c\u9664\u975e\u4eba\u4e3a\u4fee\u6539 auto_now \u6bcf\u6b21\u4fee\u6539\u6570\u636e\u7684\u65f6\u5019\uff0c\u4f1a\u81ea\u52a8\u66f4\u65b0\u5f53\u524d\u65f6\u95f4\uff0c\u5b9e\u65f6\u66f4\u65b0","title":"\u5b57\u6bb5\u53c2\u6570"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/10%20django%E4%B9%8BORM%E5%AD%97%E6%AE%B5%E5%8F%8A%E5%8F%82%E6%95%B0/#_3","text":"\u53c2\u6570 \u8bf4\u660e to \u8bbe\u7f6e\u8981\u5173\u8054\u7684\u8868 to_field \u8bbe\u7f6e\u8981\u5173\u8054\u7684\u8868\u5b57\u6bb5\uff0c\u9ed8\u8ba4django\u81ea\u52a8\u5173\u8054\u4e3b\u952e on_delete \u5f53\u5220\u9664\u5173\u8054\u8868\u4e2d\u7684\u6570\u636e\u65f6\uff0c\u5f53\u524d\u4e0e\u5176\u5173\u8054\u7684\u884c\u4e3a db_constraint \u662f\u5426\u5728\u6570\u636e\u5e93\u4e2d\u521b\u5efa\u5916\u952e\u7ea6\u675f\uff0c\u9ed8\u8ba4\u662fTrue on_delete = modeles.CASCADE # \u7ea7\u8054\u5220\u9664 \u6ce8\u610f\uff1a\u5728django 2.x\u7248\u672c \u9700\u8981\u624b\u52a8\u6307\u5b9a db_constraint \u7b49\u53c2\u6570","title":"\u5916\u952e\u5b57\u6bb5\u7684\u53c2\u6570"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/11%20django%E4%B9%8B%E6%9F%A5%E8%AF%A2%E6%93%8D%E4%BD%9C/","text":"django\u4e4b\u67e5\u8be2\u64cd\u4f5c # \u805a\u5408\u67e5\u8be2 aggregate # \u64cd\u4f5c\u5916\u952e\u5b57\u6bb5\u7ba1\u7406\u6570\u636e\u7684\u65f6\u5019\uff0c\u56e0\u4e3a\u5916\u952e\u5b57\u6bb5\u5e26\u6765\u7684\u7ea6\u675f\uff0c\u6240\u4ee5\u4f1a \u7ea7\u8054\u66f4\u65b0\u3001\u7ea7\u8054\u5220\u9664 \u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u4e66\u4e0e\u51fa\u7248\u793e\u662f\u4e00\u5bf9\u591a\u5173\u7cfb\uff0c\u5916\u952e\u5b57\u6bb5\u5728\u4e66\u90a3\u513f\u3002\u8fd9\u65f6\u5019\u628a\u51fa\u7248\u793e\u5220\u9664\uff0c\u90a3\u4e48\u5bf9\u5e94\u7684\u4e66\u7c4d\u4e5f\u4f1a\u5220\u9664\uff1b\u5982\u679c\u628a\u51fa\u7248\u793e\u7684\u4e3b\u952e\u503c\u6539\u53d8\uff0c\u90a3\u4e48\u4e66\u7c4d\u8868\u4e2d\u5bf9\u5e94\u7684\u4e3b\u952e\u503c\u4e5f\u4f1a\u81ea\u52a8\u4fee\u6539\u3002 \u805a\u5408\u51fd\u6570 # \u805a\u5408\u51fd\u6570\u5fc5\u987b\u8981\u4f7f\u7528\u5728\u5206\u7ec4\u4e4b\u540e\uff0c\u5982\u679c\u6ca1\u6709\u5206\u7ec4\uff0c\u9ed8\u8ba4\u662f\u6574\u4f53\u5206\u4e00\u7ec4 \u4f7f\u7528\u5982\u4e0b\u51fd\u6570\uff1a Max Min Sum Avg Count \u5728django\u4e2d\u9700\u8981\u4f7f\u7528\u5173\u952e\u5b57\uff1a aggregate , \u9700\u8981\u5bfc\u5165\u6a21\u5757\uff1a from django.db.models import Max, Min, Sum, Avg, Count \u4e3e\u51e0\u4e2a\u4f8b\u5b50\u6f14\u793a\u805a\u5408\u51fd\u6570\uff1a # 1.\u7b5b\u9009\u51fa\u4ef7\u683c\u6700\u9ad8\u7684\u4e66\u7c4d from django.db.models import Max , Min , Sum , Avg , Count res = models . Book . objects . aggregate ( max = Max ( 'price' )) print ( res ) # 2.\u6c42\u4e66\u7c4d\u603b\u4ef7\u683c res = models . Book . objects . aggregate ( sum = Sum ( 'price' )) print ( res ) # 3.\u6c42\u4e66\u7c4d\u5e73\u5747\u4ef7\u683c res = models . Book . objects . aggregate ( avg = Avg ( 'price' )) print ( res ) # 4.\u4e00\u8d77\u4f7f\u7528 res = models . Book . objects . aggregate ( Max ( 'price' ), Min ( 'price' ), Sum ( 'price' ), Count ( 'price' ), Avg ( 'price' )) print ( res ) \u5206\u7ec4\u67e5\u8be2 annotate # # 1.\u7edf\u8ba1\u6bcf\u4e00\u672c\u4e66\u7684\u4e66\u540d \u548c\u5bf9\u5e94\u7684\u4f5c\u8005\u4eba\u6570 res = models . Book . objects . annotate ( author_num = Count ( 'authors__pk' )) . values ( 'title' , 'author_num' ) print ( res ) # 2.\u7edf\u8ba1\u51fa\u6bcf\u4e2a\u51fa\u7248\u793e\u5356\u7684\u6700\u4fbf\u5b9c\u7684\u4e66\u7684\u4ef7\u683c \u51fa\u7248\u793e\u7684\u540d\u5b57 \u4ef7\u683c res = models . Publish . objects . annotate ( min_price = Min ( 'book__pk' )) . values ( 'name' , 'min_price' ) print ( res ) # 3.\u7edf\u8ba1\u4e0d\u6b62\u4e00\u4e2a\u4f5c\u8005\u7684\u56fe\u4e66 res = models . Book . objects . annotate ( author_num = Count ( 'authors' )) . filter ( author_num__gt = 1 ) . values ( 'title' , 'author_num' ) print ( res ) # 4.\u67e5\u8be2\u5404\u4e2a\u4f5c\u8005\u51fa\u7684\u4e66\u7684\u603b\u4ef7\u683c \u4f5c\u8005\u540d\u5b57 \u603b\u4ef7\u683c res = models . Author . objects . annotate ( sum_price = Sum ( 'book__price' )) . values ( 'name' , 'sum_price' ) print ( res ) F\u4e0eQ\u67e5\u8be2 # F\u67e5\u8be2 # \u80fd\u591f\u62ff\u5230\u8868\u4e2d\u5b57\u6bb5\u6240\u5bf9\u5e94\u7684\u6570\u636e \u4e3e\u4f8b\u8bf4\u660e\uff1a \u67e5\u8be2\u5356\u51fa\u6570(sold)\u5927\u4e8e\u5e93\u5b58(stock)\u7684\u5546\u54c1 from django.db.models import F res = models . Book . objects . filter ( sold__gt = F ( 'stock' )) . values ( 'title' ) print ( res ) \u5c06\u6240\u6709\u4e66\u7684\u4ef7\u683c\u4e0a\u6da8100\u5757 models . Book . objects . all () . update ( price = F ( 'price' ) + 100 ) \u5c06\u6240\u6709\u4e66\u7684\u540d\u79f0\u540e\u9762\u5168\u90e8\u52a0\u4e0a \"\u65b0\u6b3e\" \u540e\u7f00 from django.db.models.functions import Concat from django.db.models import Value models . Book . objects . update ( title = Concat ( F ( 'title' ), Value ( '\u65b0\u6b3e' ))) \u64cd\u4f5c\u5b57\u7b26\u4e32\u9700\u8981\u501f\u52a9Concat \u8fdb\u884c\u62fc\u63a5\u64cd\u4f5c\uff0c \u52a0\u4e0a\u62fc\u63a5\u503cValue Q\u67e5\u8be2 # filter() \u7b49\u65b9\u6cd5\u4e2d\u9017\u53f7\u9694\u5f00\u7684\u6761\u4ef6\u662fand\u7684\u5173\u7cfb\u3002 \u5982\u679c\u4f60\u9700\u8981\u6267\u884c\u66f4\u590d\u6742\u7684\u67e5\u8be2\uff0c\u5982or\u5173\u7cfb\uff0c\u9700\u8981\u501f\u52a9 Q() \u4e3e\u4f8b\u8bf4\u660e\uff1a \u67e5\u8be2\u4e00\u4e0b\u4e66\u7c4d\u540d\u79f0\u662f\u6606\u866b\u8bb0 \u6216\u8005 \u5e93\u5b58\u6570\u662f500\u7684\u4e66\u7c4d from django.db.models import Q # res = models.Book.objects.filter(Q(title='\u6606\u866b\u8bb0'), Q(stock=500)) # \u8fd9\u6837\u4f7f\u7528\u9017\u53f7\u8fd8\u662fand\u5173\u7cfb res = models . Book . objects . filter ( Q ( title = '\u6606\u866b\u8bb0' ) | Q ( stock = 500 )) # \u4f7f\u7528 | \u53d8\u6210 or\u5173\u7cfb Q\u5bf9\u8c61\u9ad8\u7ea7\u7528\u6cd5 from django.db.models import Q q = Q () q . connector = 'or' # \u9ed8\u8ba4\u662fand\u5173\u7cfb\uff0c\u8fd9\u91cc\u6307\u5b9aor\u5173\u7cfb q . children . append (( 'title' , '\u6606\u866b\u8bb0' )) # \u8fd9\u91cc\u662f\u5143\u7ec4 q . children . append (( 'stock__gt' , 500 )) res = models . Book . objects . filter ( q ) print ( res ) \u8fd9\u6837\u5c31\u53ef\u4ee5\u5b9e\u73b0\u7528\u6237\u8f93\u5165\u4ec0\u4e48\uff0c\u5c31\u80fd\u67e5\u8be2\u4ec0\u4e48 ORM\u64cd\u4f5c\u4e8b\u52a1 # \u56de\u5fc6\u4e00\u4e0b \u4e8b\u52a1\u7684\u56db\u5927\u7279\u6027\uff1aACID \u539f\u5b50\u6027\uff1a\u4e8b\u52a1\u7684\u64cd\u4f5c\u662f\u4e00\u4e2a\u6574\u4f53\uff0c\u4e0d\u53ef\u5206\u5272\uff0c\u662f\u6700\u5c0f\u5355\u4f4d \u4e00\u81f4\u6027\uff1a\u6570\u636e\u5e93\u603b\u662f\u4ece\u4e00\u4e2a\u4e00\u81f4\u6027\u7684\u72b6\u6001\u8f6c\u6362\u5230\u53e6\u4e00\u4e2a\u4e00\u81f4\u6027\u7684\u72b6\u6001\u3002\u56e0\u4e3a\u4e8b\u52a1\u6700\u7ec8\u6ca1\u6709\u63d0\u4ea4\uff0c\u6240\u4ee5\u4e8b\u52a1\u4e2d\u6240\u505a\u7684\u4fee\u6539\u4e5f\u4e0d\u4f1a\u4fdd\u5b58\u5230\u6570\u636e\u5e93\u4e2d\u3002 \u9694\u79bb\u6027\uff1a\u4e8b\u52a1\u4e0e\u4e8b\u52a1\u7684\u64cd\u4f5c\u662f\u9694\u79bb\u7684 \u4e00\u65e6\u4e8b\u52a1\u63d0\u4ea4\uff0c\u5219\u5176\u6240\u505a\u7684\u4fee\u6539\u4f1a\u6c38\u4e45\u4fdd\u5b58\u5230\u6570\u636e\u5e93\uff0c\u4e0d\u53ef\u4fee\u6539 \u6570\u636e\u5e93\u7684\u4e09\u5927\u8303\u5f0f \u7b2c\u4e00\u8303\u5f0f\u662f\u6700\u57fa\u672c\u7684\u8303\u5f0f\uff0c\u5982\u679c\u6570\u636e\u5e93\u8868\u4e2d\u7684\u6240\u6709\u5b57\u6bb5\u503c\u90fd\u662f\u4e0d\u53ef\u5206\u89e3\u7684\u539f\u5b50\u503c\uff0c\u8bf4\u660e\u5c31\u6ee1\u8db3\u7684\u7b2c\u4e00\u8303\u5f0f \u7b2c\u4e8c\u8303\u5f0f\u662f\u5728\u7b2c\u4e00\u8303\u5f0f\u7684\u57fa\u7840\u4e0a\u7684\uff0c\u53e6\u5916\u5305\u542b\u4e24\u90e8\u5206\u5185\u5bb9\uff0c\u4e00\u662f\u8868\u5fc5\u987b\u6709\u4e00\u4e2a\u4e3b\u952e\uff1b\u4e8c\u662f\u6ca1\u6709\u5305\u542b\u5728\u4e3b\u952e\u4e2d\u7684\u5217\u5fc5\u987b\u5b8c\u5168\u4f9d\u8d56\u4e8e\u4e3b\u952e\uff0c\u800c\u4e0d\u80fd\u53ea\u4f9d\u8d56\u4e3b\u952e\u7684\u4e00\u90e8\u5206\u3002 \u4e5f\u5c31\u662f\u8bf4\u5728\u4e00\u4e2a\u6570\u636e\u8868\u4e2d\uff0c\u53ea\u80fd\u4fdd\u5b58\u4e00\u79cd\u6570\u636e\uff0c\u4e0d\u80fd\u628a\u591a\u79cd\u6570\u636e\u4fdd\u5b58\u5728\u540c\u4e00\u5f20\u8868\u4e2d\u3002 \u7b2c\u4e09\u8303\u5f0f\u57fa\u4e8e\u7b2c\u4e8c\u8303\u5f0f\uff0c \u786e\u4fdd\u6570\u636e\u8868\u4e2d\u6bcf\u4e00\u5217\u6570\u636e\u90fd\u548c\u4e3b\u952e\u76f4\u63a5\u76f8\u5173\uff0c\u800c\u4e0d\u80fd\u95f4\u63a5\u76f8\u5173\u3002 \u8981\u6c42\u4e00\u4e2a\u5173\u7cfb\u4e2d\u4e0d\u5305\u542b\u5728\u5176\u4ed6\u5173\u7cfb\u5df2\u5305\u542b\u7684\u975e\u4e3b\u952e\u5b57\u6bb5\u4fe1\u606f\u3002 django\u4e2d\u5f00\u542f\u4e8b\u52a1 # from django.db import transaction with transaction . atomic (): # \u5728\u7f29\u8fdb\u7684\u4ee3\u7801\u4e2d\u4e66\u5199\u6570\u636e\u5e93\u64cd\u4f5c # \u8be5\u7f29\u8fdb\u5185\u7684\u6240\u6709\u4ee3\u7801\uff0c \u90fd\u662f\u4e00\u4e2a\u4e8b\u52a1 pass # \u4e8b\u52a1\u5728with\u5916\u81ea\u52a8\u7ed3\u675f","title":"11 django\u4e4b\u67e5\u8be2\u64cd\u4f5c"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/11%20django%E4%B9%8B%E6%9F%A5%E8%AF%A2%E6%93%8D%E4%BD%9C/#django","text":"","title":"django\u4e4b\u67e5\u8be2\u64cd\u4f5c"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/11%20django%E4%B9%8B%E6%9F%A5%E8%AF%A2%E6%93%8D%E4%BD%9C/#aggregate","text":"\u64cd\u4f5c\u5916\u952e\u5b57\u6bb5\u7ba1\u7406\u6570\u636e\u7684\u65f6\u5019\uff0c\u56e0\u4e3a\u5916\u952e\u5b57\u6bb5\u5e26\u6765\u7684\u7ea6\u675f\uff0c\u6240\u4ee5\u4f1a \u7ea7\u8054\u66f4\u65b0\u3001\u7ea7\u8054\u5220\u9664 \u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u4e66\u4e0e\u51fa\u7248\u793e\u662f\u4e00\u5bf9\u591a\u5173\u7cfb\uff0c\u5916\u952e\u5b57\u6bb5\u5728\u4e66\u90a3\u513f\u3002\u8fd9\u65f6\u5019\u628a\u51fa\u7248\u793e\u5220\u9664\uff0c\u90a3\u4e48\u5bf9\u5e94\u7684\u4e66\u7c4d\u4e5f\u4f1a\u5220\u9664\uff1b\u5982\u679c\u628a\u51fa\u7248\u793e\u7684\u4e3b\u952e\u503c\u6539\u53d8\uff0c\u90a3\u4e48\u4e66\u7c4d\u8868\u4e2d\u5bf9\u5e94\u7684\u4e3b\u952e\u503c\u4e5f\u4f1a\u81ea\u52a8\u4fee\u6539\u3002","title":"\u805a\u5408\u67e5\u8be2 aggregate"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/11%20django%E4%B9%8B%E6%9F%A5%E8%AF%A2%E6%93%8D%E4%BD%9C/#_1","text":"\u805a\u5408\u51fd\u6570\u5fc5\u987b\u8981\u4f7f\u7528\u5728\u5206\u7ec4\u4e4b\u540e\uff0c\u5982\u679c\u6ca1\u6709\u5206\u7ec4\uff0c\u9ed8\u8ba4\u662f\u6574\u4f53\u5206\u4e00\u7ec4 \u4f7f\u7528\u5982\u4e0b\u51fd\u6570\uff1a Max Min Sum Avg Count \u5728django\u4e2d\u9700\u8981\u4f7f\u7528\u5173\u952e\u5b57\uff1a aggregate , \u9700\u8981\u5bfc\u5165\u6a21\u5757\uff1a from django.db.models import Max, Min, Sum, Avg, Count \u4e3e\u51e0\u4e2a\u4f8b\u5b50\u6f14\u793a\u805a\u5408\u51fd\u6570\uff1a # 1.\u7b5b\u9009\u51fa\u4ef7\u683c\u6700\u9ad8\u7684\u4e66\u7c4d from django.db.models import Max , Min , Sum , Avg , Count res = models . Book . objects . aggregate ( max = Max ( 'price' )) print ( res ) # 2.\u6c42\u4e66\u7c4d\u603b\u4ef7\u683c res = models . Book . objects . aggregate ( sum = Sum ( 'price' )) print ( res ) # 3.\u6c42\u4e66\u7c4d\u5e73\u5747\u4ef7\u683c res = models . Book . objects . aggregate ( avg = Avg ( 'price' )) print ( res ) # 4.\u4e00\u8d77\u4f7f\u7528 res = models . Book . objects . aggregate ( Max ( 'price' ), Min ( 'price' ), Sum ( 'price' ), Count ( 'price' ), Avg ( 'price' )) print ( res )","title":"\u805a\u5408\u51fd\u6570"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/11%20django%E4%B9%8B%E6%9F%A5%E8%AF%A2%E6%93%8D%E4%BD%9C/#annotate","text":"# 1.\u7edf\u8ba1\u6bcf\u4e00\u672c\u4e66\u7684\u4e66\u540d \u548c\u5bf9\u5e94\u7684\u4f5c\u8005\u4eba\u6570 res = models . Book . objects . annotate ( author_num = Count ( 'authors__pk' )) . values ( 'title' , 'author_num' ) print ( res ) # 2.\u7edf\u8ba1\u51fa\u6bcf\u4e2a\u51fa\u7248\u793e\u5356\u7684\u6700\u4fbf\u5b9c\u7684\u4e66\u7684\u4ef7\u683c \u51fa\u7248\u793e\u7684\u540d\u5b57 \u4ef7\u683c res = models . Publish . objects . annotate ( min_price = Min ( 'book__pk' )) . values ( 'name' , 'min_price' ) print ( res ) # 3.\u7edf\u8ba1\u4e0d\u6b62\u4e00\u4e2a\u4f5c\u8005\u7684\u56fe\u4e66 res = models . Book . objects . annotate ( author_num = Count ( 'authors' )) . filter ( author_num__gt = 1 ) . values ( 'title' , 'author_num' ) print ( res ) # 4.\u67e5\u8be2\u5404\u4e2a\u4f5c\u8005\u51fa\u7684\u4e66\u7684\u603b\u4ef7\u683c \u4f5c\u8005\u540d\u5b57 \u603b\u4ef7\u683c res = models . Author . objects . annotate ( sum_price = Sum ( 'book__price' )) . values ( 'name' , 'sum_price' ) print ( res )","title":"\u5206\u7ec4\u67e5\u8be2  annotate"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/11%20django%E4%B9%8B%E6%9F%A5%E8%AF%A2%E6%93%8D%E4%BD%9C/#fq","text":"","title":"F\u4e0eQ\u67e5\u8be2"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/11%20django%E4%B9%8B%E6%9F%A5%E8%AF%A2%E6%93%8D%E4%BD%9C/#f","text":"\u80fd\u591f\u62ff\u5230\u8868\u4e2d\u5b57\u6bb5\u6240\u5bf9\u5e94\u7684\u6570\u636e \u4e3e\u4f8b\u8bf4\u660e\uff1a \u67e5\u8be2\u5356\u51fa\u6570(sold)\u5927\u4e8e\u5e93\u5b58(stock)\u7684\u5546\u54c1 from django.db.models import F res = models . Book . objects . filter ( sold__gt = F ( 'stock' )) . values ( 'title' ) print ( res ) \u5c06\u6240\u6709\u4e66\u7684\u4ef7\u683c\u4e0a\u6da8100\u5757 models . Book . objects . all () . update ( price = F ( 'price' ) + 100 ) \u5c06\u6240\u6709\u4e66\u7684\u540d\u79f0\u540e\u9762\u5168\u90e8\u52a0\u4e0a \"\u65b0\u6b3e\" \u540e\u7f00 from django.db.models.functions import Concat from django.db.models import Value models . Book . objects . update ( title = Concat ( F ( 'title' ), Value ( '\u65b0\u6b3e' ))) \u64cd\u4f5c\u5b57\u7b26\u4e32\u9700\u8981\u501f\u52a9Concat \u8fdb\u884c\u62fc\u63a5\u64cd\u4f5c\uff0c \u52a0\u4e0a\u62fc\u63a5\u503cValue","title":"F\u67e5\u8be2"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/11%20django%E4%B9%8B%E6%9F%A5%E8%AF%A2%E6%93%8D%E4%BD%9C/#q","text":"filter() \u7b49\u65b9\u6cd5\u4e2d\u9017\u53f7\u9694\u5f00\u7684\u6761\u4ef6\u662fand\u7684\u5173\u7cfb\u3002 \u5982\u679c\u4f60\u9700\u8981\u6267\u884c\u66f4\u590d\u6742\u7684\u67e5\u8be2\uff0c\u5982or\u5173\u7cfb\uff0c\u9700\u8981\u501f\u52a9 Q() \u4e3e\u4f8b\u8bf4\u660e\uff1a \u67e5\u8be2\u4e00\u4e0b\u4e66\u7c4d\u540d\u79f0\u662f\u6606\u866b\u8bb0 \u6216\u8005 \u5e93\u5b58\u6570\u662f500\u7684\u4e66\u7c4d from django.db.models import Q # res = models.Book.objects.filter(Q(title='\u6606\u866b\u8bb0'), Q(stock=500)) # \u8fd9\u6837\u4f7f\u7528\u9017\u53f7\u8fd8\u662fand\u5173\u7cfb res = models . Book . objects . filter ( Q ( title = '\u6606\u866b\u8bb0' ) | Q ( stock = 500 )) # \u4f7f\u7528 | \u53d8\u6210 or\u5173\u7cfb Q\u5bf9\u8c61\u9ad8\u7ea7\u7528\u6cd5 from django.db.models import Q q = Q () q . connector = 'or' # \u9ed8\u8ba4\u662fand\u5173\u7cfb\uff0c\u8fd9\u91cc\u6307\u5b9aor\u5173\u7cfb q . children . append (( 'title' , '\u6606\u866b\u8bb0' )) # \u8fd9\u91cc\u662f\u5143\u7ec4 q . children . append (( 'stock__gt' , 500 )) res = models . Book . objects . filter ( q ) print ( res ) \u8fd9\u6837\u5c31\u53ef\u4ee5\u5b9e\u73b0\u7528\u6237\u8f93\u5165\u4ec0\u4e48\uff0c\u5c31\u80fd\u67e5\u8be2\u4ec0\u4e48","title":"Q\u67e5\u8be2"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/11%20django%E4%B9%8B%E6%9F%A5%E8%AF%A2%E6%93%8D%E4%BD%9C/#orm","text":"\u56de\u5fc6\u4e00\u4e0b \u4e8b\u52a1\u7684\u56db\u5927\u7279\u6027\uff1aACID \u539f\u5b50\u6027\uff1a\u4e8b\u52a1\u7684\u64cd\u4f5c\u662f\u4e00\u4e2a\u6574\u4f53\uff0c\u4e0d\u53ef\u5206\u5272\uff0c\u662f\u6700\u5c0f\u5355\u4f4d \u4e00\u81f4\u6027\uff1a\u6570\u636e\u5e93\u603b\u662f\u4ece\u4e00\u4e2a\u4e00\u81f4\u6027\u7684\u72b6\u6001\u8f6c\u6362\u5230\u53e6\u4e00\u4e2a\u4e00\u81f4\u6027\u7684\u72b6\u6001\u3002\u56e0\u4e3a\u4e8b\u52a1\u6700\u7ec8\u6ca1\u6709\u63d0\u4ea4\uff0c\u6240\u4ee5\u4e8b\u52a1\u4e2d\u6240\u505a\u7684\u4fee\u6539\u4e5f\u4e0d\u4f1a\u4fdd\u5b58\u5230\u6570\u636e\u5e93\u4e2d\u3002 \u9694\u79bb\u6027\uff1a\u4e8b\u52a1\u4e0e\u4e8b\u52a1\u7684\u64cd\u4f5c\u662f\u9694\u79bb\u7684 \u4e00\u65e6\u4e8b\u52a1\u63d0\u4ea4\uff0c\u5219\u5176\u6240\u505a\u7684\u4fee\u6539\u4f1a\u6c38\u4e45\u4fdd\u5b58\u5230\u6570\u636e\u5e93\uff0c\u4e0d\u53ef\u4fee\u6539 \u6570\u636e\u5e93\u7684\u4e09\u5927\u8303\u5f0f \u7b2c\u4e00\u8303\u5f0f\u662f\u6700\u57fa\u672c\u7684\u8303\u5f0f\uff0c\u5982\u679c\u6570\u636e\u5e93\u8868\u4e2d\u7684\u6240\u6709\u5b57\u6bb5\u503c\u90fd\u662f\u4e0d\u53ef\u5206\u89e3\u7684\u539f\u5b50\u503c\uff0c\u8bf4\u660e\u5c31\u6ee1\u8db3\u7684\u7b2c\u4e00\u8303\u5f0f \u7b2c\u4e8c\u8303\u5f0f\u662f\u5728\u7b2c\u4e00\u8303\u5f0f\u7684\u57fa\u7840\u4e0a\u7684\uff0c\u53e6\u5916\u5305\u542b\u4e24\u90e8\u5206\u5185\u5bb9\uff0c\u4e00\u662f\u8868\u5fc5\u987b\u6709\u4e00\u4e2a\u4e3b\u952e\uff1b\u4e8c\u662f\u6ca1\u6709\u5305\u542b\u5728\u4e3b\u952e\u4e2d\u7684\u5217\u5fc5\u987b\u5b8c\u5168\u4f9d\u8d56\u4e8e\u4e3b\u952e\uff0c\u800c\u4e0d\u80fd\u53ea\u4f9d\u8d56\u4e3b\u952e\u7684\u4e00\u90e8\u5206\u3002 \u4e5f\u5c31\u662f\u8bf4\u5728\u4e00\u4e2a\u6570\u636e\u8868\u4e2d\uff0c\u53ea\u80fd\u4fdd\u5b58\u4e00\u79cd\u6570\u636e\uff0c\u4e0d\u80fd\u628a\u591a\u79cd\u6570\u636e\u4fdd\u5b58\u5728\u540c\u4e00\u5f20\u8868\u4e2d\u3002 \u7b2c\u4e09\u8303\u5f0f\u57fa\u4e8e\u7b2c\u4e8c\u8303\u5f0f\uff0c \u786e\u4fdd\u6570\u636e\u8868\u4e2d\u6bcf\u4e00\u5217\u6570\u636e\u90fd\u548c\u4e3b\u952e\u76f4\u63a5\u76f8\u5173\uff0c\u800c\u4e0d\u80fd\u95f4\u63a5\u76f8\u5173\u3002 \u8981\u6c42\u4e00\u4e2a\u5173\u7cfb\u4e2d\u4e0d\u5305\u542b\u5728\u5176\u4ed6\u5173\u7cfb\u5df2\u5305\u542b\u7684\u975e\u4e3b\u952e\u5b57\u6bb5\u4fe1\u606f\u3002","title":"ORM\u64cd\u4f5c\u4e8b\u52a1"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/11%20django%E4%B9%8B%E6%9F%A5%E8%AF%A2%E6%93%8D%E4%BD%9C/#django_1","text":"from django.db import transaction with transaction . atomic (): # \u5728\u7f29\u8fdb\u7684\u4ee3\u7801\u4e2d\u4e66\u5199\u6570\u636e\u5e93\u64cd\u4f5c # \u8be5\u7f29\u8fdb\u5185\u7684\u6240\u6709\u4ee3\u7801\uff0c \u90fd\u662f\u4e00\u4e2a\u4e8b\u52a1 pass # \u4e8b\u52a1\u5728with\u5916\u81ea\u52a8\u7ed3\u675f","title":"django\u4e2d\u5f00\u542f\u4e8b\u52a1"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/12%20django%E4%B9%8BORM%E4%BC%98%E5%8C%96%E6%9F%A5%E8%AF%A2/","text":"django\u4e4bORM\u4f18\u5316\u67e5\u8be2 # only\u4e0edefer # res = models . Book . objects . all () \u8fd9\u6837\u662f\u4e0d\u4f1a\u6709\u4efb\u4f55\u8fd4\u56de\u7ed3\u679c\uff0c\u56e0\u4e3aORM\u662f\u60f0\u6027\u67e5\u8be2\uff0c\u51cf\u5c11\u4e0d\u5fc5\u8981\u7684\u6570\u636e\u5e93\u64cd\u4f5c\uff0c\u964d\u4f4e\u6570\u636e\u5e93\u7684\u538b\u529b\u3002 \u4e5f\u5c31\u662f\u8bf4 \u80fd\u5c11\u8d70\u4e00\u6b21\u6570\u636e\u5e93\u5c31\u5c11\u8d70\u4e00\u6b21 \uff0c\u6700\u597d\u662f\u4e00\u6b21\u6570\u636e\u5e93\u90fd\u4e0d\u8981\u8d70\u6216\u8005\u8bf4\u4e4b\u8d70\u4e00\u6b21\u3002 only\u4f18\u5316\uff1a # res = models . Book . objects . only ( 'title' ) # \u62ec\u53f7\u5185\u67e5\u8be2\u7684\u5b57\u6bb5\u53ef\u4ee5\u6709\u591a\u4e2a print ( res ) # \u67e5\u8be2\u4e00\u6b21\uff0c\u6253\u5370\u4e00\u6761sql\u67e5\u8be2\u8bed\u53e5 for i in res : print ( i . title ) # \u67e5\u8be2\u4e00\u6b21\uff0c\u6253\u5370\u4e00\u6761sql\u67e5\u8be2\u8bed\u53e5 print ( i . price ) # \u6709\u51e0\u4e2a\u5bf9\u8c61\uff0c\u5c31\u67e5\u8be2\u51e0\u6b21\uff0c\u6253\u5370\u51e0\u6761sql\u67e5\u8be2\u8bed\u53e5 only\u4f1a\u628a\u62ec\u53f7\u5185\u5b57\u6bb5\u5bf9\u5e94\u7684\u503c\uff0c\u5c01\u88c5\u5230\u67e5\u8be2\u8fd4\u56de\u7684\u5bf9\u8c61\u4e2d\uff0c\u901a\u8fc7\u5bf9\u8c61\u70b9\u62ec\u53f7\u5b57\u6bb5\uff0c \u4e0d\u9700\u8981\u518d\u8d70\u6570\u636e\u5e93\u67e5\u8be2\uff0c\u76f4\u63a5\u8fd4\u56de\u7ed3\u679c \uff0c \u4e00\u65e6\u4f60\u70b9\u4e86\u4e0d\u662f\u62ec\u53f7\u5185\u7684\u5b57\u6bb5 \u5c31\u4f1a\u9891\u7e41\u7684\u53bb\u8d70\u6570\u636e\u5e93\u67e5\u8be2 defer\u4f18\u5316 # res = models . Book . objects . defer ( 'title' ) # print(res) for i in res : # print(i.title) print ( i . title ) \u548c only\u76f8\u53cd\uff0cdefer\u4f1a\u5c06\u62ec\u53f7\u5185\u7684\u5b57\u6bb5\u6392\u9664\u4e4b\u5916\u5c06\u5176\u4ed6\u5b57\u6bb5\u5bf9\u5e94\u7684\u503c\uff0c \u76f4\u63a5\u5c01\u88c5\u5230\u8fd4\u56de\u7ed9\u4f60\u7684\u5bf9\u8c61\u4e2d\uff0c \u70b9\u5176\u4ed6\u5b57\u6bb5 \u4e0d\u9700\u8981\u518d\u8d70\u6570\u636e\u5e93\u67e5\u8be2\uff0c\u4e00\u65e6\u4f60\u70b9\u4e86\u62ec\u53f7\u5185\u7684\u5b57\u6bb5\u5c31\u4f1a\u6709\u591a\u5c11\u503c\uff0c\u5c31\u4f1a\u67e5\u8be2\u51e0\u6b21 select related\u548cprefetch related # select_related\u4f18\u5316 # res = models . Book . objects . select_related ( 'publish' ) # print(res) for i in res : print ( i . publish ) select_related\u62ec\u53f7\u5185\u653e\u5916\u952e\u5b57\u6bb5\uff0c\u5e76\u4e14\u5916\u952e\u5b57\u6bb5\u7684\u7c7b\u578b\u53ea\u80fd\u662f\u4e00\u5bf9\u4e00\u548c\u4e00\u5bf9\u591a\uff0c\u4e0d\u80fd\u662f\u591a\u5bf9\u591a\uff0c \u5185\u90e8\u81ea\u52a8\u505a\u8054\u8868\u64cd\u4f5c\uff0c\u4f1a\u5c06\u62ec\u53f7\u5185\u5916\u952e\u5b57\u6bb5\u6240\u5173\u8054\u7684\u8868\u4e0e\u5f53\u524d\u8868\u81ea\u52a8\u62fc\u63a5\u6210\u4e00\u5f20\u8868\uff0c\u7136\u540e\u5c06\u8868\u4e2d\u7684\u6570\u636e\u4e00\u4e2a\u4e2a\u67e5\u8be2\u51fa\u6765\u5c01\u88c5\u6210\u4e00\u4e2a\u4e2a\u7684\u5bf9\u8c61\u3002 \u8fd9\u6837\u505a \u5c31\u4e0d\u4f1a\u91cd\u590d\u7684\u8d70\u6570\u636e\u5e93\uff0c\u51cf\u8f7b\u6570\u636e\u5e93\u7684\u538b\u529b\u3002 select_related\u62ec\u53f7\u5185\u53ef\u4ee5\u653e\u591a\u4e2a\u5916\u952e\u5b57\u6bb5\uff0c\u7528\u9017\u53f7\u7ed9\u5f00\uff0c\u4f1a\u5c06\u591a\u4e2a\u5916\u952e\u5b57\u6bb5\u5173\u8054\u7684\u8868\u62fc\u63a5\u6210\u4e00\u5f20\u5927\u8868 prefetch_related\u4f18\u5316 # res = models . Book . objects . prefetch_related ( 'publish' , 'authors' ) for i in res : print ( i . publish ) prefetch_related\u5185\u90e8\u662f\u5b50\u67e5\u8be2\uff0c\u4f1a\u81ea\u52a8\u6309\u7167\u6b65\u9aa4\u67e5\u8be2\u591a\u5f20\u8868\uff0c\u7136\u540e\u5c06\u67e5\u8be2\u7684\u7ed3\u679c\u5c01\u88c5\u5230\u5bf9\u8c61\u4e2d\uff0c\u8fd9\u6837\u7ed9\u7528\u6237\u7684\u611f\u89c9\u8fd8\u662f\u8054\u8868\u64cd\u4f5c\u3002 \u62ec\u53f7\u5185\u652f\u6301\u4f20\u591a\u4e2a\u5916\u952e\u5b57\u6bb5\uff0c\u5e76\u4e14\u6ca1\u6709\u7c7b\u578b\u9650\u5236\u3002 \u6bcf\u653e\u4e00\u4e2a\u5916\u952e\u5b57\u6bb5\uff0c\u5c31\u4f1a\u591a\u8d70\u4e00\u6761sql\u8bed\u53e5\uff0c\u591a\u67e5\u8be2\u4e00\u5f20\u8868","title":"12 django\u4e4bORM\u4f18\u5316\u67e5\u8be2"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/12%20django%E4%B9%8BORM%E4%BC%98%E5%8C%96%E6%9F%A5%E8%AF%A2/#djangoorm","text":"","title":"django\u4e4bORM\u4f18\u5316\u67e5\u8be2"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/12%20django%E4%B9%8BORM%E4%BC%98%E5%8C%96%E6%9F%A5%E8%AF%A2/#onlydefer","text":"res = models . Book . objects . all () \u8fd9\u6837\u662f\u4e0d\u4f1a\u6709\u4efb\u4f55\u8fd4\u56de\u7ed3\u679c\uff0c\u56e0\u4e3aORM\u662f\u60f0\u6027\u67e5\u8be2\uff0c\u51cf\u5c11\u4e0d\u5fc5\u8981\u7684\u6570\u636e\u5e93\u64cd\u4f5c\uff0c\u964d\u4f4e\u6570\u636e\u5e93\u7684\u538b\u529b\u3002 \u4e5f\u5c31\u662f\u8bf4 \u80fd\u5c11\u8d70\u4e00\u6b21\u6570\u636e\u5e93\u5c31\u5c11\u8d70\u4e00\u6b21 \uff0c\u6700\u597d\u662f\u4e00\u6b21\u6570\u636e\u5e93\u90fd\u4e0d\u8981\u8d70\u6216\u8005\u8bf4\u4e4b\u8d70\u4e00\u6b21\u3002","title":"only\u4e0edefer"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/12%20django%E4%B9%8BORM%E4%BC%98%E5%8C%96%E6%9F%A5%E8%AF%A2/#only","text":"res = models . Book . objects . only ( 'title' ) # \u62ec\u53f7\u5185\u67e5\u8be2\u7684\u5b57\u6bb5\u53ef\u4ee5\u6709\u591a\u4e2a print ( res ) # \u67e5\u8be2\u4e00\u6b21\uff0c\u6253\u5370\u4e00\u6761sql\u67e5\u8be2\u8bed\u53e5 for i in res : print ( i . title ) # \u67e5\u8be2\u4e00\u6b21\uff0c\u6253\u5370\u4e00\u6761sql\u67e5\u8be2\u8bed\u53e5 print ( i . price ) # \u6709\u51e0\u4e2a\u5bf9\u8c61\uff0c\u5c31\u67e5\u8be2\u51e0\u6b21\uff0c\u6253\u5370\u51e0\u6761sql\u67e5\u8be2\u8bed\u53e5 only\u4f1a\u628a\u62ec\u53f7\u5185\u5b57\u6bb5\u5bf9\u5e94\u7684\u503c\uff0c\u5c01\u88c5\u5230\u67e5\u8be2\u8fd4\u56de\u7684\u5bf9\u8c61\u4e2d\uff0c\u901a\u8fc7\u5bf9\u8c61\u70b9\u62ec\u53f7\u5b57\u6bb5\uff0c \u4e0d\u9700\u8981\u518d\u8d70\u6570\u636e\u5e93\u67e5\u8be2\uff0c\u76f4\u63a5\u8fd4\u56de\u7ed3\u679c \uff0c \u4e00\u65e6\u4f60\u70b9\u4e86\u4e0d\u662f\u62ec\u53f7\u5185\u7684\u5b57\u6bb5 \u5c31\u4f1a\u9891\u7e41\u7684\u53bb\u8d70\u6570\u636e\u5e93\u67e5\u8be2","title":"only\u4f18\u5316\uff1a"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/12%20django%E4%B9%8BORM%E4%BC%98%E5%8C%96%E6%9F%A5%E8%AF%A2/#defer","text":"res = models . Book . objects . defer ( 'title' ) # print(res) for i in res : # print(i.title) print ( i . title ) \u548c only\u76f8\u53cd\uff0cdefer\u4f1a\u5c06\u62ec\u53f7\u5185\u7684\u5b57\u6bb5\u6392\u9664\u4e4b\u5916\u5c06\u5176\u4ed6\u5b57\u6bb5\u5bf9\u5e94\u7684\u503c\uff0c \u76f4\u63a5\u5c01\u88c5\u5230\u8fd4\u56de\u7ed9\u4f60\u7684\u5bf9\u8c61\u4e2d\uff0c \u70b9\u5176\u4ed6\u5b57\u6bb5 \u4e0d\u9700\u8981\u518d\u8d70\u6570\u636e\u5e93\u67e5\u8be2\uff0c\u4e00\u65e6\u4f60\u70b9\u4e86\u62ec\u53f7\u5185\u7684\u5b57\u6bb5\u5c31\u4f1a\u6709\u591a\u5c11\u503c\uff0c\u5c31\u4f1a\u67e5\u8be2\u51e0\u6b21","title":"defer\u4f18\u5316"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/12%20django%E4%B9%8BORM%E4%BC%98%E5%8C%96%E6%9F%A5%E8%AF%A2/#selectrelatedprefetchrelated","text":"","title":"selectrelated\u548cprefetchrelated"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/12%20django%E4%B9%8BORM%E4%BC%98%E5%8C%96%E6%9F%A5%E8%AF%A2/#select_related","text":"res = models . Book . objects . select_related ( 'publish' ) # print(res) for i in res : print ( i . publish ) select_related\u62ec\u53f7\u5185\u653e\u5916\u952e\u5b57\u6bb5\uff0c\u5e76\u4e14\u5916\u952e\u5b57\u6bb5\u7684\u7c7b\u578b\u53ea\u80fd\u662f\u4e00\u5bf9\u4e00\u548c\u4e00\u5bf9\u591a\uff0c\u4e0d\u80fd\u662f\u591a\u5bf9\u591a\uff0c \u5185\u90e8\u81ea\u52a8\u505a\u8054\u8868\u64cd\u4f5c\uff0c\u4f1a\u5c06\u62ec\u53f7\u5185\u5916\u952e\u5b57\u6bb5\u6240\u5173\u8054\u7684\u8868\u4e0e\u5f53\u524d\u8868\u81ea\u52a8\u62fc\u63a5\u6210\u4e00\u5f20\u8868\uff0c\u7136\u540e\u5c06\u8868\u4e2d\u7684\u6570\u636e\u4e00\u4e2a\u4e2a\u67e5\u8be2\u51fa\u6765\u5c01\u88c5\u6210\u4e00\u4e2a\u4e2a\u7684\u5bf9\u8c61\u3002 \u8fd9\u6837\u505a \u5c31\u4e0d\u4f1a\u91cd\u590d\u7684\u8d70\u6570\u636e\u5e93\uff0c\u51cf\u8f7b\u6570\u636e\u5e93\u7684\u538b\u529b\u3002 select_related\u62ec\u53f7\u5185\u53ef\u4ee5\u653e\u591a\u4e2a\u5916\u952e\u5b57\u6bb5\uff0c\u7528\u9017\u53f7\u7ed9\u5f00\uff0c\u4f1a\u5c06\u591a\u4e2a\u5916\u952e\u5b57\u6bb5\u5173\u8054\u7684\u8868\u62fc\u63a5\u6210\u4e00\u5f20\u5927\u8868","title":"select_related\u4f18\u5316"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/12%20django%E4%B9%8BORM%E4%BC%98%E5%8C%96%E6%9F%A5%E8%AF%A2/#prefetch_related","text":"res = models . Book . objects . prefetch_related ( 'publish' , 'authors' ) for i in res : print ( i . publish ) prefetch_related\u5185\u90e8\u662f\u5b50\u67e5\u8be2\uff0c\u4f1a\u81ea\u52a8\u6309\u7167\u6b65\u9aa4\u67e5\u8be2\u591a\u5f20\u8868\uff0c\u7136\u540e\u5c06\u67e5\u8be2\u7684\u7ed3\u679c\u5c01\u88c5\u5230\u5bf9\u8c61\u4e2d\uff0c\u8fd9\u6837\u7ed9\u7528\u6237\u7684\u611f\u89c9\u8fd8\u662f\u8054\u8868\u64cd\u4f5c\u3002 \u62ec\u53f7\u5185\u652f\u6301\u4f20\u591a\u4e2a\u5916\u952e\u5b57\u6bb5\uff0c\u5e76\u4e14\u6ca1\u6709\u7c7b\u578b\u9650\u5236\u3002 \u6bcf\u653e\u4e00\u4e2a\u5916\u952e\u5b57\u6bb5\uff0c\u5c31\u4f1a\u591a\u8d70\u4e00\u6761sql\u8bed\u53e5\uff0c\u591a\u67e5\u8be2\u4e00\u5f20\u8868","title":"prefetch_related\u4f18\u5316"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/13%20django%E5%92%8Cajax/","text":"django\u548cajax # Ajax\u7b80\u4ecb # Ajax\uff08Asynchronous Javascript And XML\uff09\u7ffb\u8bd1\u6210\u4e2d\u6587\u5c31\u662f\u201c\u5f02\u6b65\u7684Javascript\u548cXML\u201d\u3002\u5373\u4f7f\u7528Javascript\u8bed\u8a00\u4e0e\u670d\u52a1\u5668\u8fdb\u884c\u5f02\u6b65\u4ea4\u4e92\uff0c\u4f20\u8f93\u7684\u6570\u636e\u4e3aXML\uff08\u5f53\u7136\uff0c\u4f20\u8f93\u7684\u6570\u636e\u4e0d\u53ea\u662fXML\uff09\u3002 ajax\u662f\u5f02\u6b65\u63d0\u4ea4\u7684 Ajax \u4e0d\u662f\u65b0\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u800c\u662f\u4e00\u79cd\u4f7f\u7528\u73b0\u6709\u6807\u51c6\u7684\u65b0\u65b9\u6cd5\u3002 Ajax \u6700\u5927\u7684\u4f18\u70b9\u662f\u5728\u4e0d\u91cd\u65b0\u52a0\u8f7d\u6574\u4e2a\u9875\u9762\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u4e0e\u670d\u52a1\u5668\u4ea4\u6362\u6570\u636e\u5e76\u66f4\u65b0\u90e8\u5206\u7f51\u9875\u5185\u5bb9\u3002\uff08\u8fd9\u4e00\u7279\u70b9\u7ed9\u7528\u6237\u7684\u611f\u53d7\u662f\u5728\u4e0d\u77e5\u4e0d\u89c9\u4e2d\u5b8c\u6210\u8bf7\u6c42\u548c\u54cd\u5e94\u8fc7\u7a0b\uff09 \u4e3e\u4e2a\u5b9e\u4f8b\uff1a <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Title </ title > < script src = \"https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js\" ></ script > < link href = \"https://cdn.bootcss.com/twitter-bootstrap/3.4.1/css/bootstrap.min.css\" rel = \"stylesheet\" > < script src = \"https://cdn.bootcss.com/twitter-bootstrap/3.4.1/js/bootstrap.min.js\" ></ script > </ head > < body > < input type = \"text\" id = \"t1\" > + < input type = \"text\" id = \"t2\" > = < input type = \"text\" id = \"t3\" > < p > < button id = \"b1\" > \u8ba1\u7b97 </ button > </ p > < script > $ ( '#b1' ). on ( 'click' , function () { $ . ajax ({ url : '' , // \u6570\u636e\u63d0\u4ea4\u7684\u5730\u5740\uff0c \u4e0d\u5199\u5c31\u662f\u5411\u5f53\u524d\u9875\u9762\u63d0\u4ea4\uff0c\u4e5f\u53ef\u4ee5\u5199\u540e\u7f00\uff0c\u4e5f\u53ef\u4ee5\u5199\u5168\u79f0\uff0c\u4e0eform\u8868\u5355\u53c2\u6570action\u4e00\u6837 type : 'post' , // \u63d0\u4ea4\u65b9\u5f0f\uff0c\u4e0d\u5199\u9ed8\u8ba4\u662fget\u8bf7\u6c42 data : { 't1' : $ ( '#t1' ). val (), 't2' : $ ( '#t2' ). val ()}, // \u63d0\u4ea4\u7684\u6570\u636e success : function ( data ) { // \u5f62\u53c2data\u5c31\u662f\u5f02\u6b65\u63d0\u4ea4\u4e4b\u540e\u540e\u7aef\u8fd4\u56de\u7684\u7ed3\u679c $ ( '#t3' ). val ( data ) } }) }) </ script > </ body > </ html > \u6570\u636e\u4f20\u8f93\u7f16\u7801\u683c\u5f0f\u7684\u89e3\u6790 # \u524d\u540e\u7aef\u4ea4\u4e92\u5f0f\u4e00\u4e2a\u6570\u636e\u7f16\u7801\u683c\u5f0f\uff0c\u9488\u5bf9\u4e0d\u540c\u7684\u6570\u636e\uff0c\u540e\u7aef\u4f1a\u8fdb\u884c\u4e0d\u540c\u7684\u5904\u7406 \u4e09\u79cd\u6570\u636e\u7f16\u7801\u683c\u5f0f\uff1a urlencoded formdata application/json form\u8868\u5355\u53d1\u9001\u4e09\u79cd\u6570\u636e\u683c\u5f0f\u7684\u60c5\u51b5 # urlencoded # form\u8868\u5355post\u8bf7\u6c42\u9ed8\u8ba4\u7684\u7f16\u7801\u683c\u5f0f\u662furlencoded \u5728\u6d4f\u89c8\u5668\u2192\u68c0\u67e5\u2192network\u53ef\u4ee5\u770b\u5230\uff0c\u6211\u4eecform\u8868\u5355\u5728\u63d0\u4ea4\u6570\u636e\u7684\u65f6\u5019\uff0c\u6709\u5982\u4e0b\u4fe1\u606f\uff1a Request Headers\uff1a # \u8bf7\u6c42\u5934 Content-Type:application/x-www-form-urlencoded; charset=UTF-8 # \u6570\u636e\u7f16\u7801\u683c\u5f0f-urlencoded Form Data\uff1a# \u643a\u5e26\u7684\u6570\u636e d1=23&d2=23 \u5728\u6211\u4eec\u540e\u7aefdjango\u4e2d\u9488\u5bf9urlencoded\u6570\u636e\uff0c\u4f1a\u81ea\u52a8\u89e3\u6790\u5e76\u5c01\u88c5\u5230request.POST\u65b9\u6cd5\u4e2d form\u8868\u5355\u53d1\u9001\u6587\u4ef6 # Request Headers\uff1a # \u8bf7\u6c42\u5934 Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryhjKCHQHDmcE62iMQ # \u6570\u636e\u7f16\u7801\u683c\u5f0f\uff0c-form-data Form Data\uff1a#\u9488\u5bf9form-data\u683c\u5f0f\u7684\u6570\u636e\uff0c\u5728\u6d4f\u89c8\u5668\u662f\u65e0\u6cd5\u67e5\u770b\u7684 \u53d1\u9001\u5230\u540e\u7aefdjango\uff0c\u6587\u4ef6\u5bf9\u8c61\u4f1a\u81ea\u52a8\u89e3\u6790\u5230 request.POST \u548c request.FILES \u4e2d\uff0c\u524d\u8005\u8bb0\u5f55\u6587\u4ef6\u540d\uff0c\u540e\u8005\u8bb0\u5f55\u5bf9\u8c61\u3002 form\u8868\u5355\u65e0\u6cd5\u53d1\u9001json\u683c\u5f0f\u7684\u6570\u636e\uff0c\u8981\u60f3\u5b9e\u73b0\uff0c\u53ea\u80fd\u501f\u52a9ajax ajax\u53d1\u9001\u6570\u636e\u7684\u7f16\u7801\u683c\u5f0f # \u9ed8\u8ba4\u7684\u7f16\u7801\u683c\u5f0f\u662furlencoded ajax\u4f20\u8f93json\u683c\u5f0f\u6570\u636e # \u6709\u4e2a\u53c2\u6570\uff0c contentType \uff0c\u4e0d\u5199\u9ed8\u8ba4\u662furlencoded\uff0c \u5728view.py\u4e2d\uff1a import json def home ( request ): if request . method == \"POST\" : print ( request . body ) json_bytes = request . body print ( json . loads ( json_bytes ), type ( json . loads ( json_bytes ))) # \u53cd\u5e8f\u5217\u5316\u4e3apython\u5b57\u5178\u683c\u5f0f return render ( request , 'form_test.html' ) # \u7ed3\u679c\uff1a ''' b'{\"d1\":\"cwz\",\"d2\":\"123\"}' {'d1': 'cwz', 'd2': '123'} <class 'dict'> ''' form_test.html\u6587\u4ef6\uff1a <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Title </ title > < script src = \"https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js\" ></ script > < link href = \"https://cdn.bootcss.com/twitter-bootstrap/3.4.1/css/bootstrap.min.css\" rel = \"stylesheet\" > < script src = \"https://cdn.bootcss.com/twitter-bootstrap/3.4.1/js/bootstrap.min.js\" ></ script > </ head > < body > < form action = \"\" method = \"post\" > username: < input type = \"text\" name = \"username\" id = \"d1\" > password: < input type = \"text\" name = \"password\" id = \"d2\" > </ form > < button id = \"d3\" > \u70b9\u6211\u53d1\u9001json\u683c\u5f0f </ button > < script > $ ( '#d3' ). click ( function () { $ . ajax ({ url : '' , type : 'post' , contentType : 'application/json' , //\u9700\u8981\u6307\u5b9a\u7f16\u7801\u683c\u5f0f\u4e3ajson data : JSON . stringify ({ 'd1' : $ ( '#d1' ). val (), 'd2' : $ ( '#d2' ). val ()}), // \u9700\u8981\u524d\u7aef\u53d1\u9001JSON\u5b57\u7b26\u4e32\uff0cJSON.stringify\u5e8f\u5217\u5316\u5373\u53ef\u3002 success : function ( data ) { alert ( 123 ) } }) }) </ script > </ body > </ html > ajax\u4f20json\u683c\u5f0f\u6570\u636e\u7279\u70b9\uff1a django\u540e\u7aef\u9488\u5bf9json\u683c\u5f0f\u7684\u6570\u636e \u4e0d\u4f1a\u81ea\u52a8\u5e2e\u4f60\u89e3\u6790 \u4f1a\u76f4\u63a5\u539f\u5c01\u4e0d\u52a8\u7684\u7ed9\u4f60\u653e\u5230request.body\u4e2d \u4f60\u53ef\u4ee5\u624b\u52a8\u5904\u7406 \u83b7\u53d6\u6570\u636e\u3002\u62ff\u5230request.body\u662f\u4e00\u4e2abytes\u7c7b\u578b\u6570\u636e Ajax\u4f20\u8f93\u6587\u4ef6\u6570\u636e # \u9700\u8981\u501f\u52a9\u5185\u7f6e\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u65e2\u53ef\u4ee5\u643a\u5e26\u6587\u4ef6\u6570\u636e\uff0c\u540c\u6837\u4e5f\u652f\u6301\u666e\u901a\u7684\u952e\u503c\u5bf9 \u6ce8\u610f\u51e0\u4e2a\u53c2\u6570\uff1a data\uff1aformdata \u5bf9\u8c61 contentType\uff1afalse processData\uff1afalse <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Title </ title > < script src = \"https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js\" ></ script > < link href = \"https://cdn.bootcss.com/twitter-bootstrap/3.4.1/css/bootstrap.min.css\" rel = \"stylesheet\" > < script src = \"https://cdn.bootcss.com/twitter-bootstrap/3.4.1/js/bootstrap.min.js\" ></ script > </ head > < body > username: < input type = \"text\" name = \"username\" > password: < input type = \"text\" name = \"password\" > myfile: < input type = \"file\" name = \"myfile\" id = \"d1\" > < button id = \"d2\" > \u70b9\u6211\u53d1\u9001\u6587\u4ef6 </ button > < script > $ ( '#d2' ). click ( function () { // \u5148\u751f\u6210\u4e00\u4e2a\u5185\u7f6e\u5bf9\u8c61 var MyFormData = new FormData (); // \u5148\u6dfb\u52a0\u666e\u901a\u7684\u952e\u503c MyFormData . append ( 'username' , 'cwz' ); MyFormData . append ( 'password' , '123' ); //\u6dfb\u52a0\u6587\u4ef6\u6570\u636e MyFormData . append ( 'myfile' , $ ( '#d1' )[ 0 ]. files [ 0 ]); // \u5c06jquery\u5bf9\u8c61\u8f6c\u6362\u6210\u539f\u751f\u7684js\u5bf9\u8c61,\u5229\u7528\u539f\u751fjs\u5bf9\u8c61\u7684\u65b9\u6cd5 \u76f4\u63a5\u83b7\u53d6\u6587\u4ef6\u5185\u5bb9 $ . ajax ({ url : '' , type : 'post' , data : MyFormData , contentType : false , //\u4e0d\u7528\u4efb\u4f55\u7f16\u7801,\u56e0\u4e3aformData\u5bf9\u8c61\u81ea\u5e26\u7f16\u7801 django\u80fd\u591f\u8bc6\u522b\u8be5\u5bf9\u8c61 processData : false , //\u544a\u8bc9\u6d4f\u89c8\u5668\u4e0d\u8981\u5904\u7406\u6211\u7684\u6570\u636e \u76f4\u63a5\u53d1\u5c31\u884c success : function ( data ) { } }) }) </ script > </ body > </ html > django\u5185\u7f6e\u5e8f\u5217\u5316\u6a21\u5757 # \u5e8f\u5217\u5316\u7684\u76ee\u7684\u5c31\u662f \u5c06\u6570\u636e\u6574\u5408\u6210\u4e00\u4e2a\u5927\u5b57\u5178 \u5bfc\u5165\u8fd9\u4e2a\u6a21\u5757\uff1a from django.core import serializers \u6bd4\u81ea\u5df1\u7528json\u8f6c\u65b9\u4fbf\u591a\u4e86 from app01 import models from django.core import serializers def yyy ( request ): author_queryset = models . Author . objects . all () res = serializers . serialize ( 'json' , author_queryset ) return HttpResponse ( res ) \u6548\u679c\uff1a [{ \"model\" : \"app01.author\" , \"pk\" : 1 , \"fields\" : { \"name\" : \"\\u90b6\\u98ce\" , \"email\" : \"123@qq.com\" , \"author_detail\" : 1 } }, { \"model\" : \"app01.author\" , \"pk\" : 2 , \"fields\" : { \"name\" : \"\\u5f0f\\u5fae\" , \"email\" : \"111@sin.com\" , \"author_detail\" : 2 } }, { \"model\" : \"app01.author\" , \"pk\" : 3 , \"fields\" : { \"name\" : \"\\u65e0\\u540d\" , \"email\" : \"100@qq.com\" , \"author_detail\" : 3 } }] ajax\u7ed3\u5408sweetalert\u4f7f\u7528 # \u70b9\u51fb\u4e0b\u8f7d Bootstrap-sweetalert \u4e00\u901aCV\u5927\u6cd5\uff1a <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Title </ title > < script src = \"https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js\" ></ script > {% load static %} < link rel = \"stylesheet\" href = \"{% static 'bootstrap-3.3.7-dist/css/bootstrap.min.css' %}\" > < link rel = \"stylesheet\" href = \"{% static 'dist/sweetalert.css' %}\" > < script src = \"{% static 'bootstrap-3.3.7-dist/js/bootstrap.min.js' %}\" ></ script > < script src = \"{% static 'dist/sweetalert.min.js' %}\" ></ script > </ head > < body > < div class = \"container-fluid\" > < div class = \"row\" > < div class = \"col-md-8 col-md-offset-2\" > < h2 class = \"text-center\" > \u6570\u636e\u5c55\u793a </ h2 > < br > < table class = \"table-bordered table table-striped table-hover\" > < thead > < tr > < th > \u5e8f\u53f7 </ th > < th > \u7528\u6237\u540d </ th > < th > \u5e74\u9f84 </ th > < th > \u6027\u522b </ th > < th class = \"text-center\" > \u64cd\u4f5c </ th > </ tr > </ thead > < tbody > {% for user in user_queryset %} < tr > < td > {{ forloop.counter }} </ td > < td > {{ user.username }} </ td > < td > {{ user.age }} </ td > < td > {{ user.get_gender_display }} </ td > < td class = \"text-center\" > < a href = \"#\" class = \"btn btn-primary btn-sm\" > \u7f16\u8f91 </ a > < a href = \"#\" class = \"btn btn-danger btn-sm cancel\" > \u5220\u9664 </ a > </ td > </ tr > {% endfor %} </ tbody > </ table > </ div > </ div > </ div > < script > $ ( '.cancel' ). click ( function () { swal ({ title : \"\u4f60\u786e\u5b9a\u5220\u9664\u5417?\" , text : \"\u5982\u679c\u5220\u4e86\uff0c\u4f60\u5c31\u8dd1\u8def\u5427\uff01\" , type : \"warning\" , showCancelButton : true , confirmButtonClass : \"btn-danger\" , confirmButtonText : \"\u662f\u7684\uff0c\u6211\u5c31\u8981\u5220\uff01\" , cancelButtonText : \"\u4e0d\u5220\u4e86\" , closeOnConfirm : false , closeOnCancel : false }, function ( isConfirm ) { if ( isConfirm ) { swal ( \"\u51c6\u5907\u8dd1\u8def\u5427\uff01\" , \"\u8dd1\u4e0d\u4e86\u4e86\u3002\u3002\u3002\" , \"success\" ); } else { swal ( \"\u53d6\u6d88\u5220\u9664\" , \"\u6570\u636e\u8fd8\u5728\" , \"error\" ); } }); }) </ script > </ body > </ html > \u8fd9\u91cc\u6709\u4e2a\u95ee\u9898\uff0c\u53d1\u73b0\u6c49\u5b57\u88ab\u6321\u4f4f\u4e86\u3002\u3002\u3002 \u901a\u8fc7\u8c37\u6b4c\u6d4f\u89c8\u5668\u7684\u68c0\u67e5\uff0c\u67e5\u770bhtml\u5143\u7d20\u4fee\u6539\uff0c\u52a0\u4e0a\u6837\u5f0f\u5373\u53ef\uff1a < style > div . sweet-alert h2 { padding : 10 px ; } </ style \u6700\u7ec8\u7684\u5b9e\u4f8b\uff1a <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Title </ title > < script src = \"https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js\" ></ script > {% load static %} < link rel = \"stylesheet\" href = \"{% static 'bootstrap-3.3.7-dist/css/bootstrap.min.css' %}\" > < link rel = \"stylesheet\" href = \"{% static 'dist/sweetalert.css' %}\" > < script src = \"{% static 'bootstrap-3.3.7-dist/js/bootstrap.min.js' %}\" ></ script > < script src = \"{% static 'dist/sweetalert.min.js' %}\" ></ script > < style > div . sweet-alert h2 { padding : 10 px ; } </ style > </ head > < body > < div class = \"container-fluid\" > < div class = \"row\" > < div class = \"col-md-8 col-md-offset-2\" > < h2 class = \"text-center\" > \u6570\u636e\u5c55\u793a </ h2 > < br > < table class = \"table-bordered table table-striped table-hover\" > < thead > < tr > < th > \u5e8f\u53f7 </ th > < th > \u7528\u6237\u540d </ th > < th > \u5e74\u9f84 </ th > < th > \u6027\u522b </ th > < th class = \"text-center\" > \u64cd\u4f5c </ th > </ tr > </ thead > < tbody > {% for user in user_queryset %} < tr > < td > {{ forloop.counter }} </ td > < td > {{ user.username }} </ td > < td > {{ user.age }} </ td > < td > {{ user.get_gender_display }} </ td > < td class = \"text-center\" > < a href = \"#\" class = \"btn btn-primary btn-sm\" > \u7f16\u8f91 </ a > < a href = \"#\" class = \"btn btn-danger btn-sm cancel\" userId = {{ user . pk }} > \u5220\u9664 </ a > </ td > </ tr > {% endfor %} </ tbody > </ table > </ div > </ div > </ div > < script > $ ( '.cancel' ). click ( function () { var $btn = $ ( this ); swal ({ title : \"\u4f60\u786e\u5b9a\u5220\u9664\u5417?\" , text : \"\u5982\u679c\u5220\u4e86\uff0c\u4f60\u5c31\u8dd1\u8def\u5427\uff01\" , type : \"warning\" , showCancelButton : true , confirmButtonClass : \"btn-danger\" , confirmButtonText : \"\u662f\u7684\uff0c\u6211\u5c31\u8981\u5220\uff01\" , cancelButtonText : \"\u4e0d\u5220\u4e86\" , closeOnConfirm : false , closeOnCancel : false , showLoaderOnConfirm : true }, function ( isConfirm ) { if ( isConfirm ) { // \u671d\u540e\u7aef\u53d1\u9001ajax\u8bf7\u6c42 $ . ajax ({ url : '' , type : 'post' , data : { 'delete_id' : $btn . attr ( 'userId' )}, success : function ( data ) { if ( data . code == 1000 ){ swal ( \"\u51c6\u5907\u8dd1\u8def\u5427\uff01\" , data . msg , \"success\" ); // \u901a\u8fc7DOM\u64cd\u4f5c\u76f4\u63a5\u64cd\u4f5c\u6807\u7b7e $btn . parent (). parent (). remove () } else { swal ( \"\u6709bug\" , \"\u53d1\u751f\u4e86\u672a\u77e5\u9519\u8bef\" , \"warning\" ) } } }); } else { swal ( \"\u53d6\u6d88\u5220\u9664\" , \"\u6570\u636e\u8fd8\u5728\" , \"error\" ); } }); }) </ script > </ body > </ html > \u540e\u7aefviews.py def home ( request ): if request . is_ajax (): back_dic = { 'code' : 1000 , 'msg' : '' } delete_id = request . POST . get ( 'delete_id' ) time . sleep ( 3 ) models . User . objects . filter ( pk = delete_id ) . delete () back_dic [ 'msg' ] = '\u6570\u636e\u5df2\u7ecf\u88ab\u6211\u5220\u6389\u4e86' return JsonResponse ( back_dic ) user_queryset = models . User . objects . all () return render ( request , 'home.html' , locals ())","title":"13 django\u548cajax"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/13%20django%E5%92%8Cajax/#djangoajax","text":"","title":"django\u548cajax"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/13%20django%E5%92%8Cajax/#ajax","text":"Ajax\uff08Asynchronous Javascript And XML\uff09\u7ffb\u8bd1\u6210\u4e2d\u6587\u5c31\u662f\u201c\u5f02\u6b65\u7684Javascript\u548cXML\u201d\u3002\u5373\u4f7f\u7528Javascript\u8bed\u8a00\u4e0e\u670d\u52a1\u5668\u8fdb\u884c\u5f02\u6b65\u4ea4\u4e92\uff0c\u4f20\u8f93\u7684\u6570\u636e\u4e3aXML\uff08\u5f53\u7136\uff0c\u4f20\u8f93\u7684\u6570\u636e\u4e0d\u53ea\u662fXML\uff09\u3002 ajax\u662f\u5f02\u6b65\u63d0\u4ea4\u7684 Ajax \u4e0d\u662f\u65b0\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u800c\u662f\u4e00\u79cd\u4f7f\u7528\u73b0\u6709\u6807\u51c6\u7684\u65b0\u65b9\u6cd5\u3002 Ajax \u6700\u5927\u7684\u4f18\u70b9\u662f\u5728\u4e0d\u91cd\u65b0\u52a0\u8f7d\u6574\u4e2a\u9875\u9762\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u4e0e\u670d\u52a1\u5668\u4ea4\u6362\u6570\u636e\u5e76\u66f4\u65b0\u90e8\u5206\u7f51\u9875\u5185\u5bb9\u3002\uff08\u8fd9\u4e00\u7279\u70b9\u7ed9\u7528\u6237\u7684\u611f\u53d7\u662f\u5728\u4e0d\u77e5\u4e0d\u89c9\u4e2d\u5b8c\u6210\u8bf7\u6c42\u548c\u54cd\u5e94\u8fc7\u7a0b\uff09 \u4e3e\u4e2a\u5b9e\u4f8b\uff1a <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Title </ title > < script src = \"https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js\" ></ script > < link href = \"https://cdn.bootcss.com/twitter-bootstrap/3.4.1/css/bootstrap.min.css\" rel = \"stylesheet\" > < script src = \"https://cdn.bootcss.com/twitter-bootstrap/3.4.1/js/bootstrap.min.js\" ></ script > </ head > < body > < input type = \"text\" id = \"t1\" > + < input type = \"text\" id = \"t2\" > = < input type = \"text\" id = \"t3\" > < p > < button id = \"b1\" > \u8ba1\u7b97 </ button > </ p > < script > $ ( '#b1' ). on ( 'click' , function () { $ . ajax ({ url : '' , // \u6570\u636e\u63d0\u4ea4\u7684\u5730\u5740\uff0c \u4e0d\u5199\u5c31\u662f\u5411\u5f53\u524d\u9875\u9762\u63d0\u4ea4\uff0c\u4e5f\u53ef\u4ee5\u5199\u540e\u7f00\uff0c\u4e5f\u53ef\u4ee5\u5199\u5168\u79f0\uff0c\u4e0eform\u8868\u5355\u53c2\u6570action\u4e00\u6837 type : 'post' , // \u63d0\u4ea4\u65b9\u5f0f\uff0c\u4e0d\u5199\u9ed8\u8ba4\u662fget\u8bf7\u6c42 data : { 't1' : $ ( '#t1' ). val (), 't2' : $ ( '#t2' ). val ()}, // \u63d0\u4ea4\u7684\u6570\u636e success : function ( data ) { // \u5f62\u53c2data\u5c31\u662f\u5f02\u6b65\u63d0\u4ea4\u4e4b\u540e\u540e\u7aef\u8fd4\u56de\u7684\u7ed3\u679c $ ( '#t3' ). val ( data ) } }) }) </ script > </ body > </ html >","title":"Ajax\u7b80\u4ecb"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/13%20django%E5%92%8Cajax/#_1","text":"\u524d\u540e\u7aef\u4ea4\u4e92\u5f0f\u4e00\u4e2a\u6570\u636e\u7f16\u7801\u683c\u5f0f\uff0c\u9488\u5bf9\u4e0d\u540c\u7684\u6570\u636e\uff0c\u540e\u7aef\u4f1a\u8fdb\u884c\u4e0d\u540c\u7684\u5904\u7406 \u4e09\u79cd\u6570\u636e\u7f16\u7801\u683c\u5f0f\uff1a urlencoded formdata application/json","title":"\u6570\u636e\u4f20\u8f93\u7f16\u7801\u683c\u5f0f\u7684\u89e3\u6790"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/13%20django%E5%92%8Cajax/#form","text":"","title":"form\u8868\u5355\u53d1\u9001\u4e09\u79cd\u6570\u636e\u683c\u5f0f\u7684\u60c5\u51b5"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/13%20django%E5%92%8Cajax/#urlencoded","text":"form\u8868\u5355post\u8bf7\u6c42\u9ed8\u8ba4\u7684\u7f16\u7801\u683c\u5f0f\u662furlencoded \u5728\u6d4f\u89c8\u5668\u2192\u68c0\u67e5\u2192network\u53ef\u4ee5\u770b\u5230\uff0c\u6211\u4eecform\u8868\u5355\u5728\u63d0\u4ea4\u6570\u636e\u7684\u65f6\u5019\uff0c\u6709\u5982\u4e0b\u4fe1\u606f\uff1a Request Headers\uff1a # \u8bf7\u6c42\u5934 Content-Type:application/x-www-form-urlencoded; charset=UTF-8 # \u6570\u636e\u7f16\u7801\u683c\u5f0f-urlencoded Form Data\uff1a# \u643a\u5e26\u7684\u6570\u636e d1=23&d2=23 \u5728\u6211\u4eec\u540e\u7aefdjango\u4e2d\u9488\u5bf9urlencoded\u6570\u636e\uff0c\u4f1a\u81ea\u52a8\u89e3\u6790\u5e76\u5c01\u88c5\u5230request.POST\u65b9\u6cd5\u4e2d","title":"urlencoded"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/13%20django%E5%92%8Cajax/#form_1","text":"Request Headers\uff1a # \u8bf7\u6c42\u5934 Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryhjKCHQHDmcE62iMQ # \u6570\u636e\u7f16\u7801\u683c\u5f0f\uff0c-form-data Form Data\uff1a#\u9488\u5bf9form-data\u683c\u5f0f\u7684\u6570\u636e\uff0c\u5728\u6d4f\u89c8\u5668\u662f\u65e0\u6cd5\u67e5\u770b\u7684 \u53d1\u9001\u5230\u540e\u7aefdjango\uff0c\u6587\u4ef6\u5bf9\u8c61\u4f1a\u81ea\u52a8\u89e3\u6790\u5230 request.POST \u548c request.FILES \u4e2d\uff0c\u524d\u8005\u8bb0\u5f55\u6587\u4ef6\u540d\uff0c\u540e\u8005\u8bb0\u5f55\u5bf9\u8c61\u3002 form\u8868\u5355\u65e0\u6cd5\u53d1\u9001json\u683c\u5f0f\u7684\u6570\u636e\uff0c\u8981\u60f3\u5b9e\u73b0\uff0c\u53ea\u80fd\u501f\u52a9ajax","title":"form\u8868\u5355\u53d1\u9001\u6587\u4ef6"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/13%20django%E5%92%8Cajax/#ajax_1","text":"\u9ed8\u8ba4\u7684\u7f16\u7801\u683c\u5f0f\u662furlencoded","title":"ajax\u53d1\u9001\u6570\u636e\u7684\u7f16\u7801\u683c\u5f0f"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/13%20django%E5%92%8Cajax/#ajaxjson","text":"\u6709\u4e2a\u53c2\u6570\uff0c contentType \uff0c\u4e0d\u5199\u9ed8\u8ba4\u662furlencoded\uff0c \u5728view.py\u4e2d\uff1a import json def home ( request ): if request . method == \"POST\" : print ( request . body ) json_bytes = request . body print ( json . loads ( json_bytes ), type ( json . loads ( json_bytes ))) # \u53cd\u5e8f\u5217\u5316\u4e3apython\u5b57\u5178\u683c\u5f0f return render ( request , 'form_test.html' ) # \u7ed3\u679c\uff1a ''' b'{\"d1\":\"cwz\",\"d2\":\"123\"}' {'d1': 'cwz', 'd2': '123'} <class 'dict'> ''' form_test.html\u6587\u4ef6\uff1a <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Title </ title > < script src = \"https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js\" ></ script > < link href = \"https://cdn.bootcss.com/twitter-bootstrap/3.4.1/css/bootstrap.min.css\" rel = \"stylesheet\" > < script src = \"https://cdn.bootcss.com/twitter-bootstrap/3.4.1/js/bootstrap.min.js\" ></ script > </ head > < body > < form action = \"\" method = \"post\" > username: < input type = \"text\" name = \"username\" id = \"d1\" > password: < input type = \"text\" name = \"password\" id = \"d2\" > </ form > < button id = \"d3\" > \u70b9\u6211\u53d1\u9001json\u683c\u5f0f </ button > < script > $ ( '#d3' ). click ( function () { $ . ajax ({ url : '' , type : 'post' , contentType : 'application/json' , //\u9700\u8981\u6307\u5b9a\u7f16\u7801\u683c\u5f0f\u4e3ajson data : JSON . stringify ({ 'd1' : $ ( '#d1' ). val (), 'd2' : $ ( '#d2' ). val ()}), // \u9700\u8981\u524d\u7aef\u53d1\u9001JSON\u5b57\u7b26\u4e32\uff0cJSON.stringify\u5e8f\u5217\u5316\u5373\u53ef\u3002 success : function ( data ) { alert ( 123 ) } }) }) </ script > </ body > </ html > ajax\u4f20json\u683c\u5f0f\u6570\u636e\u7279\u70b9\uff1a django\u540e\u7aef\u9488\u5bf9json\u683c\u5f0f\u7684\u6570\u636e \u4e0d\u4f1a\u81ea\u52a8\u5e2e\u4f60\u89e3\u6790 \u4f1a\u76f4\u63a5\u539f\u5c01\u4e0d\u52a8\u7684\u7ed9\u4f60\u653e\u5230request.body\u4e2d \u4f60\u53ef\u4ee5\u624b\u52a8\u5904\u7406 \u83b7\u53d6\u6570\u636e\u3002\u62ff\u5230request.body\u662f\u4e00\u4e2abytes\u7c7b\u578b\u6570\u636e","title":"ajax\u4f20\u8f93json\u683c\u5f0f\u6570\u636e"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/13%20django%E5%92%8Cajax/#ajax_2","text":"\u9700\u8981\u501f\u52a9\u5185\u7f6e\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u65e2\u53ef\u4ee5\u643a\u5e26\u6587\u4ef6\u6570\u636e\uff0c\u540c\u6837\u4e5f\u652f\u6301\u666e\u901a\u7684\u952e\u503c\u5bf9 \u6ce8\u610f\u51e0\u4e2a\u53c2\u6570\uff1a data\uff1aformdata \u5bf9\u8c61 contentType\uff1afalse processData\uff1afalse <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Title </ title > < script src = \"https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js\" ></ script > < link href = \"https://cdn.bootcss.com/twitter-bootstrap/3.4.1/css/bootstrap.min.css\" rel = \"stylesheet\" > < script src = \"https://cdn.bootcss.com/twitter-bootstrap/3.4.1/js/bootstrap.min.js\" ></ script > </ head > < body > username: < input type = \"text\" name = \"username\" > password: < input type = \"text\" name = \"password\" > myfile: < input type = \"file\" name = \"myfile\" id = \"d1\" > < button id = \"d2\" > \u70b9\u6211\u53d1\u9001\u6587\u4ef6 </ button > < script > $ ( '#d2' ). click ( function () { // \u5148\u751f\u6210\u4e00\u4e2a\u5185\u7f6e\u5bf9\u8c61 var MyFormData = new FormData (); // \u5148\u6dfb\u52a0\u666e\u901a\u7684\u952e\u503c MyFormData . append ( 'username' , 'cwz' ); MyFormData . append ( 'password' , '123' ); //\u6dfb\u52a0\u6587\u4ef6\u6570\u636e MyFormData . append ( 'myfile' , $ ( '#d1' )[ 0 ]. files [ 0 ]); // \u5c06jquery\u5bf9\u8c61\u8f6c\u6362\u6210\u539f\u751f\u7684js\u5bf9\u8c61,\u5229\u7528\u539f\u751fjs\u5bf9\u8c61\u7684\u65b9\u6cd5 \u76f4\u63a5\u83b7\u53d6\u6587\u4ef6\u5185\u5bb9 $ . ajax ({ url : '' , type : 'post' , data : MyFormData , contentType : false , //\u4e0d\u7528\u4efb\u4f55\u7f16\u7801,\u56e0\u4e3aformData\u5bf9\u8c61\u81ea\u5e26\u7f16\u7801 django\u80fd\u591f\u8bc6\u522b\u8be5\u5bf9\u8c61 processData : false , //\u544a\u8bc9\u6d4f\u89c8\u5668\u4e0d\u8981\u5904\u7406\u6211\u7684\u6570\u636e \u76f4\u63a5\u53d1\u5c31\u884c success : function ( data ) { } }) }) </ script > </ body > </ html >","title":"Ajax\u4f20\u8f93\u6587\u4ef6\u6570\u636e"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/13%20django%E5%92%8Cajax/#django","text":"\u5e8f\u5217\u5316\u7684\u76ee\u7684\u5c31\u662f \u5c06\u6570\u636e\u6574\u5408\u6210\u4e00\u4e2a\u5927\u5b57\u5178 \u5bfc\u5165\u8fd9\u4e2a\u6a21\u5757\uff1a from django.core import serializers \u6bd4\u81ea\u5df1\u7528json\u8f6c\u65b9\u4fbf\u591a\u4e86 from app01 import models from django.core import serializers def yyy ( request ): author_queryset = models . Author . objects . all () res = serializers . serialize ( 'json' , author_queryset ) return HttpResponse ( res ) \u6548\u679c\uff1a [{ \"model\" : \"app01.author\" , \"pk\" : 1 , \"fields\" : { \"name\" : \"\\u90b6\\u98ce\" , \"email\" : \"123@qq.com\" , \"author_detail\" : 1 } }, { \"model\" : \"app01.author\" , \"pk\" : 2 , \"fields\" : { \"name\" : \"\\u5f0f\\u5fae\" , \"email\" : \"111@sin.com\" , \"author_detail\" : 2 } }, { \"model\" : \"app01.author\" , \"pk\" : 3 , \"fields\" : { \"name\" : \"\\u65e0\\u540d\" , \"email\" : \"100@qq.com\" , \"author_detail\" : 3 } }]","title":"django\u5185\u7f6e\u5e8f\u5217\u5316\u6a21\u5757"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/13%20django%E5%92%8Cajax/#ajaxsweetalert","text":"\u70b9\u51fb\u4e0b\u8f7d Bootstrap-sweetalert \u4e00\u901aCV\u5927\u6cd5\uff1a <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Title </ title > < script src = \"https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js\" ></ script > {% load static %} < link rel = \"stylesheet\" href = \"{% static 'bootstrap-3.3.7-dist/css/bootstrap.min.css' %}\" > < link rel = \"stylesheet\" href = \"{% static 'dist/sweetalert.css' %}\" > < script src = \"{% static 'bootstrap-3.3.7-dist/js/bootstrap.min.js' %}\" ></ script > < script src = \"{% static 'dist/sweetalert.min.js' %}\" ></ script > </ head > < body > < div class = \"container-fluid\" > < div class = \"row\" > < div class = \"col-md-8 col-md-offset-2\" > < h2 class = \"text-center\" > \u6570\u636e\u5c55\u793a </ h2 > < br > < table class = \"table-bordered table table-striped table-hover\" > < thead > < tr > < th > \u5e8f\u53f7 </ th > < th > \u7528\u6237\u540d </ th > < th > \u5e74\u9f84 </ th > < th > \u6027\u522b </ th > < th class = \"text-center\" > \u64cd\u4f5c </ th > </ tr > </ thead > < tbody > {% for user in user_queryset %} < tr > < td > {{ forloop.counter }} </ td > < td > {{ user.username }} </ td > < td > {{ user.age }} </ td > < td > {{ user.get_gender_display }} </ td > < td class = \"text-center\" > < a href = \"#\" class = \"btn btn-primary btn-sm\" > \u7f16\u8f91 </ a > < a href = \"#\" class = \"btn btn-danger btn-sm cancel\" > \u5220\u9664 </ a > </ td > </ tr > {% endfor %} </ tbody > </ table > </ div > </ div > </ div > < script > $ ( '.cancel' ). click ( function () { swal ({ title : \"\u4f60\u786e\u5b9a\u5220\u9664\u5417?\" , text : \"\u5982\u679c\u5220\u4e86\uff0c\u4f60\u5c31\u8dd1\u8def\u5427\uff01\" , type : \"warning\" , showCancelButton : true , confirmButtonClass : \"btn-danger\" , confirmButtonText : \"\u662f\u7684\uff0c\u6211\u5c31\u8981\u5220\uff01\" , cancelButtonText : \"\u4e0d\u5220\u4e86\" , closeOnConfirm : false , closeOnCancel : false }, function ( isConfirm ) { if ( isConfirm ) { swal ( \"\u51c6\u5907\u8dd1\u8def\u5427\uff01\" , \"\u8dd1\u4e0d\u4e86\u4e86\u3002\u3002\u3002\" , \"success\" ); } else { swal ( \"\u53d6\u6d88\u5220\u9664\" , \"\u6570\u636e\u8fd8\u5728\" , \"error\" ); } }); }) </ script > </ body > </ html > \u8fd9\u91cc\u6709\u4e2a\u95ee\u9898\uff0c\u53d1\u73b0\u6c49\u5b57\u88ab\u6321\u4f4f\u4e86\u3002\u3002\u3002 \u901a\u8fc7\u8c37\u6b4c\u6d4f\u89c8\u5668\u7684\u68c0\u67e5\uff0c\u67e5\u770bhtml\u5143\u7d20\u4fee\u6539\uff0c\u52a0\u4e0a\u6837\u5f0f\u5373\u53ef\uff1a < style > div . sweet-alert h2 { padding : 10 px ; } </ style \u6700\u7ec8\u7684\u5b9e\u4f8b\uff1a <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Title </ title > < script src = \"https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js\" ></ script > {% load static %} < link rel = \"stylesheet\" href = \"{% static 'bootstrap-3.3.7-dist/css/bootstrap.min.css' %}\" > < link rel = \"stylesheet\" href = \"{% static 'dist/sweetalert.css' %}\" > < script src = \"{% static 'bootstrap-3.3.7-dist/js/bootstrap.min.js' %}\" ></ script > < script src = \"{% static 'dist/sweetalert.min.js' %}\" ></ script > < style > div . sweet-alert h2 { padding : 10 px ; } </ style > </ head > < body > < div class = \"container-fluid\" > < div class = \"row\" > < div class = \"col-md-8 col-md-offset-2\" > < h2 class = \"text-center\" > \u6570\u636e\u5c55\u793a </ h2 > < br > < table class = \"table-bordered table table-striped table-hover\" > < thead > < tr > < th > \u5e8f\u53f7 </ th > < th > \u7528\u6237\u540d </ th > < th > \u5e74\u9f84 </ th > < th > \u6027\u522b </ th > < th class = \"text-center\" > \u64cd\u4f5c </ th > </ tr > </ thead > < tbody > {% for user in user_queryset %} < tr > < td > {{ forloop.counter }} </ td > < td > {{ user.username }} </ td > < td > {{ user.age }} </ td > < td > {{ user.get_gender_display }} </ td > < td class = \"text-center\" > < a href = \"#\" class = \"btn btn-primary btn-sm\" > \u7f16\u8f91 </ a > < a href = \"#\" class = \"btn btn-danger btn-sm cancel\" userId = {{ user . pk }} > \u5220\u9664 </ a > </ td > </ tr > {% endfor %} </ tbody > </ table > </ div > </ div > </ div > < script > $ ( '.cancel' ). click ( function () { var $btn = $ ( this ); swal ({ title : \"\u4f60\u786e\u5b9a\u5220\u9664\u5417?\" , text : \"\u5982\u679c\u5220\u4e86\uff0c\u4f60\u5c31\u8dd1\u8def\u5427\uff01\" , type : \"warning\" , showCancelButton : true , confirmButtonClass : \"btn-danger\" , confirmButtonText : \"\u662f\u7684\uff0c\u6211\u5c31\u8981\u5220\uff01\" , cancelButtonText : \"\u4e0d\u5220\u4e86\" , closeOnConfirm : false , closeOnCancel : false , showLoaderOnConfirm : true }, function ( isConfirm ) { if ( isConfirm ) { // \u671d\u540e\u7aef\u53d1\u9001ajax\u8bf7\u6c42 $ . ajax ({ url : '' , type : 'post' , data : { 'delete_id' : $btn . attr ( 'userId' )}, success : function ( data ) { if ( data . code == 1000 ){ swal ( \"\u51c6\u5907\u8dd1\u8def\u5427\uff01\" , data . msg , \"success\" ); // \u901a\u8fc7DOM\u64cd\u4f5c\u76f4\u63a5\u64cd\u4f5c\u6807\u7b7e $btn . parent (). parent (). remove () } else { swal ( \"\u6709bug\" , \"\u53d1\u751f\u4e86\u672a\u77e5\u9519\u8bef\" , \"warning\" ) } } }); } else { swal ( \"\u53d6\u6d88\u5220\u9664\" , \"\u6570\u636e\u8fd8\u5728\" , \"error\" ); } }); }) </ script > </ body > </ html > \u540e\u7aefviews.py def home ( request ): if request . is_ajax (): back_dic = { 'code' : 1000 , 'msg' : '' } delete_id = request . POST . get ( 'delete_id' ) time . sleep ( 3 ) models . User . objects . filter ( pk = delete_id ) . delete () back_dic [ 'msg' ] = '\u6570\u636e\u5df2\u7ecf\u88ab\u6211\u5220\u6389\u4e86' return JsonResponse ( back_dic ) user_queryset = models . User . objects . all () return render ( request , 'home.html' , locals ())","title":"ajax\u7ed3\u5408sweetalert\u4f7f\u7528"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/14%20%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE%E3%80%81%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%86%E6%B6%B2%E5%99%A8/","text":"\u6279\u91cf\u63d2\u5165\u6570\u636e\u3001\u81ea\u5b9a\u4e49\u5206\u6db2\u5668 # bulk_create\u6279\u91cf\u63d2\u5165\u6570\u636e # \u5728django\u5411\u6570\u636e\u5e93\u63d2\u5165\u591a\u6761\u6570\u636e\uff0c \u6309\u7167\u539f\u672c\u6700\u7b28\u7684\u65b9\u6cd5\uff1a def index ( request ): for i in range ( 1000 ): models . Book . objects . create ( title = f '\u7b2c { i } \u672c\u4e66' ) \u8fd9\u79cd\u63d2\u5165\u65b9\u5f0f\u5f88\u8017\u65f6\u95f4\uff0c\u5bf9\u6570\u636e\u5e93\u7684\u538b\u529b\u4e5f\u5f88\u5927 \u4f7f\u7528bulk_create \u65b9\u6cd5 \u6279\u91cf\u63d2\u5165\u6570\u636e\uff1a def index ( request ): book_list = [] for i in range ( 10000 ): book_list . append ( models . Book ( title = f '\u7b2c { i } \u672c\u4e66' )) models . Book . objects . bulk_create ( book_list ) book_queryset = models . Book . objects . all () return render ( request , 'index.html' , locals ()) \u81ea\u5b9a\u4e49\u5206\u9875\u5668 # \u5206\u9875\u5668\u7ec4\u4ef6 class Pagination ( object ): def __init__ ( self , current_page , all_count , per_page_num = 2 , pager_count = 11 ): \"\"\" \u5c01\u88c5\u5206\u9875\u76f8\u5173\u6570\u636e :param current_page: \u5f53\u524d\u9875 :param all_count: \u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\u603b\u6761\u6570 :param per_page_num: \u6bcf\u9875\u663e\u793a\u7684\u6570\u636e\u6761\u6570 :param pager_count: \u6700\u591a\u663e\u793a\u7684\u9875\u7801\u4e2a\u6570 \u7528\u6cd5: queryset = model.objects.all() page_obj = Pagination(current_page,all_count) page_data = queryset[page_obj.start:page_obj.end] \u83b7\u53d6\u6570\u636e\u7528page_data\u800c\u4e0d\u518d\u4f7f\u7528\u539f\u59cb\u7684queryset \u83b7\u53d6\u524d\u7aef\u5206\u9875\u6837\u5f0f\u7528page_obj.page_html \"\"\" try : current_page = int ( current_page ) except Exception as e : current_page = 1 if current_page < 1 : current_page = 1 self . current_page = current_page self . all_count = all_count self . per_page_num = per_page_num # \u603b\u9875\u7801 all_pager , tmp = divmod ( all_count , per_page_num ) if tmp : all_pager += 1 self . all_pager = all_pager self . pager_count = pager_count self . pager_count_half = int (( pager_count - 1 ) / 2 ) @property def start ( self ): return ( self . current_page - 1 ) * self . per_page_num @property def end ( self ): return self . current_page * self . per_page_num def page_html ( self ): # \u5982\u679c\u603b\u9875\u7801 < 11\u4e2a\uff1a if self . all_pager <= self . pager_count : pager_start = 1 pager_end = self . all_pager + 1 # \u603b\u9875\u7801 > 11 else : # \u5f53\u524d\u9875\u5982\u679c<=\u9875\u9762\u4e0a\u6700\u591a\u663e\u793a11/2\u4e2a\u9875\u7801 if self . current_page <= self . pager_count_half : pager_start = 1 pager_end = self . pager_count + 1 # \u5f53\u524d\u9875\u5927\u4e8e5 else : # \u9875\u7801\u7ffb\u5230\u6700\u540e if ( self . current_page + self . pager_count_half ) > self . all_pager : pager_end = self . all_pager + 1 pager_start = self . all_pager - self . pager_count + 1 else : pager_start = self . current_page - self . pager_count_half pager_end = self . current_page + self . pager_count_half + 1 page_html_list = [] # \u6dfb\u52a0\u524d\u9762\u7684nav\u548cul\u6807\u7b7e page_html_list . append ( ''' <nav aria-label='Page navigation>' <ul class='pagination'> ''' ) first_page = '<li><a href=\"?page= %s \">\u9996\u9875</a></li>' % ( 1 ) page_html_list . append ( first_page ) if self . current_page <= 1 : prev_page = '<li class=\"disabled\"><a href=\"#\">\u4e0a\u4e00\u9875</a></li>' else : prev_page = '<li><a href=\"?page= %s \">\u4e0a\u4e00\u9875</a></li>' % ( self . current_page - 1 ,) page_html_list . append ( prev_page ) for i in range ( pager_start , pager_end ): if i == self . current_page : temp = '<li class=\"active\"><a href=\"?page= %s \"> %s </a></li>' % ( i , i ,) else : temp = '<li><a href=\"?page= %s \"> %s </a></li>' % ( i , i ,) page_html_list . append ( temp ) if self . current_page >= self . all_pager : next_page = '<li class=\"disabled\"><a href=\"#\">\u4e0b\u4e00\u9875</a></li>' else : next_page = '<li><a href=\"?page= %s \">\u4e0b\u4e00\u9875</a></li>' % ( self . current_page + 1 ,) page_html_list . append ( next_page ) last_page = '<li><a href=\"?page= %s \">\u5c3e\u9875</a></li>' % ( self . all_pager ,) page_html_list . append ( last_page ) # \u5c3e\u90e8\u6dfb\u52a0\u6807\u7b7e page_html_list . append ( ''' </nav> </ul> ''' ) return '' . join ( page_html_list ) \u4f7f\u7528\u65b9\u6cd5\uff1a \u5728app\u5e94\u7528\u4e0b\u5148\u5efautils\u6587\u4ef6\u5939\uff0c\u5728utils\u4e0b\u5148\u5efa mypage.py \uff0c\u590d\u5236\u4e0a\u8ff0\u7684\u5206\u9875\u5668\u4ee3\u7801 \u5728views.py\u4e2d\uff1a from app01.utils.mypage import Pagination def index ( request ): book_queryset = models . Book . objects . all () # \u4f60\u60f3\u8981\u5206\u9875\u5c55\u793a\u7684\u6570\u636e current_page = request . GET . get ( 'page' , 1 ) # \u83b7\u53d6\u5f53\u524d\u9875 all_count = book_queryset . count () # \u7edf\u8ba1\u6570\u636e\u7684\u603b\u6761\u6570 page_obj = Pagination ( current_page = current_page , all_count = all_count , per_page_num = 10 , pager_count = 5 ) # \u751f\u6210\u4e00\u4e2a\u5206\u9875\u5668\u5bf9\u8c61 page_queryset = book_queryset [ page_obj . start : page_obj . end ] return render ( request , 'index.html' , locals ()) \u524d\u7aef\uff1a {% for book in book_queryset %} < p > {{ book }} </ p > {% endfor %} {{ page_obj.page_html|safe }}","title":"\u6279\u91cf\u63d2\u5165\u6570\u636e\u3001\u81ea\u5b9a\u4e49\u5206\u6db2\u5668"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/14%20%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE%E3%80%81%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%86%E6%B6%B2%E5%99%A8/#_1","text":"","title":"\u6279\u91cf\u63d2\u5165\u6570\u636e\u3001\u81ea\u5b9a\u4e49\u5206\u6db2\u5668"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/14%20%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE%E3%80%81%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%86%E6%B6%B2%E5%99%A8/#bulk_create","text":"\u5728django\u5411\u6570\u636e\u5e93\u63d2\u5165\u591a\u6761\u6570\u636e\uff0c \u6309\u7167\u539f\u672c\u6700\u7b28\u7684\u65b9\u6cd5\uff1a def index ( request ): for i in range ( 1000 ): models . Book . objects . create ( title = f '\u7b2c { i } \u672c\u4e66' ) \u8fd9\u79cd\u63d2\u5165\u65b9\u5f0f\u5f88\u8017\u65f6\u95f4\uff0c\u5bf9\u6570\u636e\u5e93\u7684\u538b\u529b\u4e5f\u5f88\u5927 \u4f7f\u7528bulk_create \u65b9\u6cd5 \u6279\u91cf\u63d2\u5165\u6570\u636e\uff1a def index ( request ): book_list = [] for i in range ( 10000 ): book_list . append ( models . Book ( title = f '\u7b2c { i } \u672c\u4e66' )) models . Book . objects . bulk_create ( book_list ) book_queryset = models . Book . objects . all () return render ( request , 'index.html' , locals ())","title":"bulk_create\u6279\u91cf\u63d2\u5165\u6570\u636e"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/14%20%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE%E3%80%81%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%86%E6%B6%B2%E5%99%A8/#_2","text":"\u5206\u9875\u5668\u7ec4\u4ef6 class Pagination ( object ): def __init__ ( self , current_page , all_count , per_page_num = 2 , pager_count = 11 ): \"\"\" \u5c01\u88c5\u5206\u9875\u76f8\u5173\u6570\u636e :param current_page: \u5f53\u524d\u9875 :param all_count: \u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\u603b\u6761\u6570 :param per_page_num: \u6bcf\u9875\u663e\u793a\u7684\u6570\u636e\u6761\u6570 :param pager_count: \u6700\u591a\u663e\u793a\u7684\u9875\u7801\u4e2a\u6570 \u7528\u6cd5: queryset = model.objects.all() page_obj = Pagination(current_page,all_count) page_data = queryset[page_obj.start:page_obj.end] \u83b7\u53d6\u6570\u636e\u7528page_data\u800c\u4e0d\u518d\u4f7f\u7528\u539f\u59cb\u7684queryset \u83b7\u53d6\u524d\u7aef\u5206\u9875\u6837\u5f0f\u7528page_obj.page_html \"\"\" try : current_page = int ( current_page ) except Exception as e : current_page = 1 if current_page < 1 : current_page = 1 self . current_page = current_page self . all_count = all_count self . per_page_num = per_page_num # \u603b\u9875\u7801 all_pager , tmp = divmod ( all_count , per_page_num ) if tmp : all_pager += 1 self . all_pager = all_pager self . pager_count = pager_count self . pager_count_half = int (( pager_count - 1 ) / 2 ) @property def start ( self ): return ( self . current_page - 1 ) * self . per_page_num @property def end ( self ): return self . current_page * self . per_page_num def page_html ( self ): # \u5982\u679c\u603b\u9875\u7801 < 11\u4e2a\uff1a if self . all_pager <= self . pager_count : pager_start = 1 pager_end = self . all_pager + 1 # \u603b\u9875\u7801 > 11 else : # \u5f53\u524d\u9875\u5982\u679c<=\u9875\u9762\u4e0a\u6700\u591a\u663e\u793a11/2\u4e2a\u9875\u7801 if self . current_page <= self . pager_count_half : pager_start = 1 pager_end = self . pager_count + 1 # \u5f53\u524d\u9875\u5927\u4e8e5 else : # \u9875\u7801\u7ffb\u5230\u6700\u540e if ( self . current_page + self . pager_count_half ) > self . all_pager : pager_end = self . all_pager + 1 pager_start = self . all_pager - self . pager_count + 1 else : pager_start = self . current_page - self . pager_count_half pager_end = self . current_page + self . pager_count_half + 1 page_html_list = [] # \u6dfb\u52a0\u524d\u9762\u7684nav\u548cul\u6807\u7b7e page_html_list . append ( ''' <nav aria-label='Page navigation>' <ul class='pagination'> ''' ) first_page = '<li><a href=\"?page= %s \">\u9996\u9875</a></li>' % ( 1 ) page_html_list . append ( first_page ) if self . current_page <= 1 : prev_page = '<li class=\"disabled\"><a href=\"#\">\u4e0a\u4e00\u9875</a></li>' else : prev_page = '<li><a href=\"?page= %s \">\u4e0a\u4e00\u9875</a></li>' % ( self . current_page - 1 ,) page_html_list . append ( prev_page ) for i in range ( pager_start , pager_end ): if i == self . current_page : temp = '<li class=\"active\"><a href=\"?page= %s \"> %s </a></li>' % ( i , i ,) else : temp = '<li><a href=\"?page= %s \"> %s </a></li>' % ( i , i ,) page_html_list . append ( temp ) if self . current_page >= self . all_pager : next_page = '<li class=\"disabled\"><a href=\"#\">\u4e0b\u4e00\u9875</a></li>' else : next_page = '<li><a href=\"?page= %s \">\u4e0b\u4e00\u9875</a></li>' % ( self . current_page + 1 ,) page_html_list . append ( next_page ) last_page = '<li><a href=\"?page= %s \">\u5c3e\u9875</a></li>' % ( self . all_pager ,) page_html_list . append ( last_page ) # \u5c3e\u90e8\u6dfb\u52a0\u6807\u7b7e page_html_list . append ( ''' </nav> </ul> ''' ) return '' . join ( page_html_list ) \u4f7f\u7528\u65b9\u6cd5\uff1a \u5728app\u5e94\u7528\u4e0b\u5148\u5efautils\u6587\u4ef6\u5939\uff0c\u5728utils\u4e0b\u5148\u5efa mypage.py \uff0c\u590d\u5236\u4e0a\u8ff0\u7684\u5206\u9875\u5668\u4ee3\u7801 \u5728views.py\u4e2d\uff1a from app01.utils.mypage import Pagination def index ( request ): book_queryset = models . Book . objects . all () # \u4f60\u60f3\u8981\u5206\u9875\u5c55\u793a\u7684\u6570\u636e current_page = request . GET . get ( 'page' , 1 ) # \u83b7\u53d6\u5f53\u524d\u9875 all_count = book_queryset . count () # \u7edf\u8ba1\u6570\u636e\u7684\u603b\u6761\u6570 page_obj = Pagination ( current_page = current_page , all_count = all_count , per_page_num = 10 , pager_count = 5 ) # \u751f\u6210\u4e00\u4e2a\u5206\u9875\u5668\u5bf9\u8c61 page_queryset = book_queryset [ page_obj . start : page_obj . end ] return render ( request , 'index.html' , locals ()) \u524d\u7aef\uff1a {% for book in book_queryset %} < p > {{ book }} </ p > {% endfor %} {{ page_obj.page_html|safe }}","title":"\u81ea\u5b9a\u4e49\u5206\u9875\u5668"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/15%20%E5%A4%9A%E5%AF%B9%E5%A4%9A%E5%85%B3%E7%B3%BB%E8%A1%A8%E7%9A%84%E4%B8%89%E7%A7%8D%E5%88%9B%E5%BB%BA%E6%96%B9%E5%BC%8F/","text":"\u591a\u5bf9\u591a\u5173\u7cfb\u8868\u7684\u4e09\u79cd\u521b\u5efa\u65b9\u5f0f # \u5168\u81ea\u52a8 # \u5728\u6211\u4eec\u4e4b\u524d\u521b\u5efa\u591a\u5bf9\u591a\u8868\u7684\u65f6\u5019\uff0c\u4e00\u76f4\u7528\u7684\u90fd\u662f\u5168\u81ea\u52a8\u7684\u65b9\u5f0f\u6765\u521b\u5efa\u7b2c\u4e09\u5f20\u5173\u7cfb\u8868\u7684 class Book ( models . Model ): title = models . CharField ( max_length = 32 ) price = models . DecimalField ( max_digits = 8 , decimal_places = 2 ) # \u521b\u5efa\u591a\u5bf9\u591a\u5173\u7cfb\u5b57\u6bb5 authors = models . ManyToManyField ( to = 'Author' ) class Author ( models . Model ): name = models . CharField ( max_length = 32 ) \u597d\u5904\uff1a \u5728\u4e8e django orm\u4f1a\u81ea\u52a8\u5e2e\u4f60\u521b\u5efa\u7b2c\u4e09\u5f20\u5173\u7cfb\u8868 \u8fd8\u5185\u7f6e\u4e86\u64cd\u4f5c\u7b2c\u4e09\u5f20\u8868\u7684\u65b9\u6cd5\uff1aadd set remove clear \u4e0d\u8db3\uff1a \u4f46\u662f\u5b83\u53ea\u4f1a\u5e2e\u4f60\u521b\u5efa\u4e24\u4e2a\u8868\u7684\u5173\u7cfb\u5b57\u6bb5 \u4e0d\u4f1a\u518d\u989d\u5916\u6dfb\u52a0\u5b57\u6bb5 \u867d\u7136\u65b9\u4fbf \u4f46\u662f\u7b2c\u4e09\u5f20\u8868\u7684\u6269\u5c55\u6027\u8f83\u5dee \u65e0\u6cd5\u968f\u610f\u7684\u6dfb\u52a0\u989d\u5916\u7684\u5b57\u6bb5 \u7eaf\u624b\u5199\uff08\u4e0d\u63a8\u8350\uff09 # class Book ( models . Model ): title = models . CharField ( max_length = 32 ) class Authors ( models . Model ): name = models . CharField ( max_length = 32 ) class Book2Authors ( models . Model ): book = models . ForeignKey ( to = 'Book' ) author = models . ForeignKey ( to = 'Authors' ) # \u53ef\u4ee5\u6dfb\u52a0\u4efb\u610f\u5b57\u6bb5 create_time = models . DateField ( auto_now_add = True ) \u597d\u5904\uff1a \u53ef\u4ee5\u5728\u7b2c\u4e09\u5f20\u8868\u6dfb\u52a0\u4efb\u610f\u5b57\u6bb5 \u4e0d\u8db3\uff1a \u7eaf\u624b\u5199\u6bd4\u8f83\u9ebb\u70e6\uff0c \u6ca1\u6709orm\u67e5\u8be2\u7684\u65b9\u6cd5 \u534a\u81ea\u52a8\uff08\u63a8\u8350\u4f7f\u7528\uff09 # class Book ( models . Model ): title = models . CharField ( max_length = 32 ) authors = models . ManyToManyField ( to = 'Authors' , through = 'Book2Authors' , through_fields = ( \"book\" , \"authors\" )) # through \u8bb0\u5f55\u4e0e\u54ea\u5f20\u8868\u7684\u5173\u7cfb\u8868\uff0cthrough_field\u6765\u6307\u5b9a \u54ea\u51e0\u4e2a\u5916\u952e\u5b57\u6bb5 class Authors ( models . Model ): name = models . CharField ( max_length = 32 ) class Book2Authors ( models . Model ): book = models . ForeignKey ( to = 'Book' ) authors = models . ForeignKey ( to = 'Authors' ) # \u53ef\u4ee5\u6269\u5c55\u4efb\u610f\u5b57\u6bb5 \u5f53ManyToManyField\u53ea\u6709\u4e00\u4e2a\u53c2\u6570to\u7684\u60c5\u51b5\u4e0b\uff0corm\u4f1a\u81ea\u52a8\u521b\u5efa\u7b2c\u4e09\u5f20\u8868\uff0c\u5982\u679c\u52a0\u4e86through\u548cthrough_fields\uff0c\u90a3\u4e48orm\u5c31\u4e0d\u4f1a\u81ea\u52a8\u5e2e\u4f60\u521b\u5efa\u7b2c\u4e09\u5f20\u8868\uff0c\u4f46\u662f\u5b83\u4f1a\u5728\u5185\u90e8\u5e2e\u4f60\u7ef4\u62a4\u5173\u7cfb\uff0c\u8ba9\u4f60\u80fd\u591f\u7ee7\u7eed\u4f7f\u7528orm\u7684\u8de8\u8868\u67e5\u8be2\u65b9\u6cd5\u3002 through\u53c2\u6570\uff0c\u81ea\u5df1\u6307\u5b9a\u7b2c\u4e09\u5f20\u8868 through_fields\u53c2\u6570\uff0c\u8981\u5199\u4e00\u4e2a\u5143\u7ec4\uff0c\u544a\u8bc9\u7b2c\u4e09\u5f20\u8868\uff0c\u901a\u8fc7\u8fd9\u4e2a\u5143\u7ec4\u91cc\u7684\u4e24\u4e2a\u5b57\u6bb5\u77e5\u9053\u662f\u90a3\u4e24\u5f20\u8868\u591a\u5bf9\u591a\uff0c\u7b2c\u4e09\u5f20\u8868\u901a\u8fc7\u54ea\u4e2a\u5b57\u6bb5\u67e5\u8be2 \u5c31\u628a\u54ea\u4e2a\u5b57\u6bb5\u653e\u524d\u9762\u3002","title":"15 \u591a\u5bf9\u591a\u5173\u7cfb\u8868\u7684\u4e09\u79cd\u521b\u5efa\u65b9\u5f0f"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/15%20%E5%A4%9A%E5%AF%B9%E5%A4%9A%E5%85%B3%E7%B3%BB%E8%A1%A8%E7%9A%84%E4%B8%89%E7%A7%8D%E5%88%9B%E5%BB%BA%E6%96%B9%E5%BC%8F/#_1","text":"","title":"\u591a\u5bf9\u591a\u5173\u7cfb\u8868\u7684\u4e09\u79cd\u521b\u5efa\u65b9\u5f0f"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/15%20%E5%A4%9A%E5%AF%B9%E5%A4%9A%E5%85%B3%E7%B3%BB%E8%A1%A8%E7%9A%84%E4%B8%89%E7%A7%8D%E5%88%9B%E5%BB%BA%E6%96%B9%E5%BC%8F/#_2","text":"\u5728\u6211\u4eec\u4e4b\u524d\u521b\u5efa\u591a\u5bf9\u591a\u8868\u7684\u65f6\u5019\uff0c\u4e00\u76f4\u7528\u7684\u90fd\u662f\u5168\u81ea\u52a8\u7684\u65b9\u5f0f\u6765\u521b\u5efa\u7b2c\u4e09\u5f20\u5173\u7cfb\u8868\u7684 class Book ( models . Model ): title = models . CharField ( max_length = 32 ) price = models . DecimalField ( max_digits = 8 , decimal_places = 2 ) # \u521b\u5efa\u591a\u5bf9\u591a\u5173\u7cfb\u5b57\u6bb5 authors = models . ManyToManyField ( to = 'Author' ) class Author ( models . Model ): name = models . CharField ( max_length = 32 ) \u597d\u5904\uff1a \u5728\u4e8e django orm\u4f1a\u81ea\u52a8\u5e2e\u4f60\u521b\u5efa\u7b2c\u4e09\u5f20\u5173\u7cfb\u8868 \u8fd8\u5185\u7f6e\u4e86\u64cd\u4f5c\u7b2c\u4e09\u5f20\u8868\u7684\u65b9\u6cd5\uff1aadd set remove clear \u4e0d\u8db3\uff1a \u4f46\u662f\u5b83\u53ea\u4f1a\u5e2e\u4f60\u521b\u5efa\u4e24\u4e2a\u8868\u7684\u5173\u7cfb\u5b57\u6bb5 \u4e0d\u4f1a\u518d\u989d\u5916\u6dfb\u52a0\u5b57\u6bb5 \u867d\u7136\u65b9\u4fbf \u4f46\u662f\u7b2c\u4e09\u5f20\u8868\u7684\u6269\u5c55\u6027\u8f83\u5dee \u65e0\u6cd5\u968f\u610f\u7684\u6dfb\u52a0\u989d\u5916\u7684\u5b57\u6bb5","title":"\u5168\u81ea\u52a8"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/15%20%E5%A4%9A%E5%AF%B9%E5%A4%9A%E5%85%B3%E7%B3%BB%E8%A1%A8%E7%9A%84%E4%B8%89%E7%A7%8D%E5%88%9B%E5%BB%BA%E6%96%B9%E5%BC%8F/#_3","text":"class Book ( models . Model ): title = models . CharField ( max_length = 32 ) class Authors ( models . Model ): name = models . CharField ( max_length = 32 ) class Book2Authors ( models . Model ): book = models . ForeignKey ( to = 'Book' ) author = models . ForeignKey ( to = 'Authors' ) # \u53ef\u4ee5\u6dfb\u52a0\u4efb\u610f\u5b57\u6bb5 create_time = models . DateField ( auto_now_add = True ) \u597d\u5904\uff1a \u53ef\u4ee5\u5728\u7b2c\u4e09\u5f20\u8868\u6dfb\u52a0\u4efb\u610f\u5b57\u6bb5 \u4e0d\u8db3\uff1a \u7eaf\u624b\u5199\u6bd4\u8f83\u9ebb\u70e6\uff0c \u6ca1\u6709orm\u67e5\u8be2\u7684\u65b9\u6cd5","title":"\u7eaf\u624b\u5199\uff08\u4e0d\u63a8\u8350\uff09"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/15%20%E5%A4%9A%E5%AF%B9%E5%A4%9A%E5%85%B3%E7%B3%BB%E8%A1%A8%E7%9A%84%E4%B8%89%E7%A7%8D%E5%88%9B%E5%BB%BA%E6%96%B9%E5%BC%8F/#_4","text":"class Book ( models . Model ): title = models . CharField ( max_length = 32 ) authors = models . ManyToManyField ( to = 'Authors' , through = 'Book2Authors' , through_fields = ( \"book\" , \"authors\" )) # through \u8bb0\u5f55\u4e0e\u54ea\u5f20\u8868\u7684\u5173\u7cfb\u8868\uff0cthrough_field\u6765\u6307\u5b9a \u54ea\u51e0\u4e2a\u5916\u952e\u5b57\u6bb5 class Authors ( models . Model ): name = models . CharField ( max_length = 32 ) class Book2Authors ( models . Model ): book = models . ForeignKey ( to = 'Book' ) authors = models . ForeignKey ( to = 'Authors' ) # \u53ef\u4ee5\u6269\u5c55\u4efb\u610f\u5b57\u6bb5 \u5f53ManyToManyField\u53ea\u6709\u4e00\u4e2a\u53c2\u6570to\u7684\u60c5\u51b5\u4e0b\uff0corm\u4f1a\u81ea\u52a8\u521b\u5efa\u7b2c\u4e09\u5f20\u8868\uff0c\u5982\u679c\u52a0\u4e86through\u548cthrough_fields\uff0c\u90a3\u4e48orm\u5c31\u4e0d\u4f1a\u81ea\u52a8\u5e2e\u4f60\u521b\u5efa\u7b2c\u4e09\u5f20\u8868\uff0c\u4f46\u662f\u5b83\u4f1a\u5728\u5185\u90e8\u5e2e\u4f60\u7ef4\u62a4\u5173\u7cfb\uff0c\u8ba9\u4f60\u80fd\u591f\u7ee7\u7eed\u4f7f\u7528orm\u7684\u8de8\u8868\u67e5\u8be2\u65b9\u6cd5\u3002 through\u53c2\u6570\uff0c\u81ea\u5df1\u6307\u5b9a\u7b2c\u4e09\u5f20\u8868 through_fields\u53c2\u6570\uff0c\u8981\u5199\u4e00\u4e2a\u5143\u7ec4\uff0c\u544a\u8bc9\u7b2c\u4e09\u5f20\u8868\uff0c\u901a\u8fc7\u8fd9\u4e2a\u5143\u7ec4\u91cc\u7684\u4e24\u4e2a\u5b57\u6bb5\u77e5\u9053\u662f\u90a3\u4e24\u5f20\u8868\u591a\u5bf9\u591a\uff0c\u7b2c\u4e09\u5f20\u8868\u901a\u8fc7\u54ea\u4e2a\u5b57\u6bb5\u67e5\u8be2 \u5c31\u628a\u54ea\u4e2a\u5b57\u6bb5\u653e\u524d\u9762\u3002","title":"\u534a\u81ea\u52a8\uff08\u63a8\u8350\u4f7f\u7528\uff09"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/16%20django%E4%B9%8Bforms%E7%BB%84%E4%BB%B6/","text":"django\u4e4bforms\u7ec4\u4ef6 # forms\u7ec4\u4ef6 # \u5148\u629b\u51fa\u4e00\u4e2a\u9700\u6c42\uff1a 1.\u5199\u4e00\u4e2a\u6ce8\u518c\u529f\u80fd\uff0c\u83b7\u53d6\u7528\u6237\u8f93\u5165\u7684\u7528\u6237\u540d\u548c\u5bc6\u7801\uff0c\u63d0\u4ea4\u5230\u540e\u7aef\uff0c\u540e\u7aef\u505a\u6821\u9a8c 2.\u7528\u6237\u540d\u91cc\u9762\u4e0d\u80fd\u542b\u6709\u654f\u611f\u4fe1\u606f\uff0c\u7ed9\u51fa\u76f8\u5e94\u7684\u63d0\u793a 3.\u5982\u679c\u5bc6\u7801\u5c0f\u4e8e\u4e09\u4f4d\uff0c\u5c31\u63d0\u793a\u7528\u6237 \u624b\u52a8\u4e66\u5199\u9700\u6c42 # views.py def register ( request ): errors = { 'username' : '' , 'password' : '' } if request . method == 'POST' : username = request . POST . get ( 'username' ) password = request . POST . get ( 'password' ) if 'zf' in username : errors [ 'username' ] = '\u4e0d\u80fd\u4f7f\u7528\u8be5\u5b57\u7b26' if len ( password ) < 4 : errors [ 'password' ] = '\u5bc6\u7801\u4e0d\u80fd\u5c0f\u4e8e\u4e09\u4f4d' return render ( request , 'register.html' , locals ()) register.html < form action = \"\" method = \"post\" > < p > username: < input type = \"text\" name = \"username\" > < span style = \"color: red\" > {{ errors.username }} </ span > </ p > < p > password: < input type = \"text\" name = \"password\" > < span style = \"color: red\" > {{ errors.password }} </ span > </ p > < input type = \"submit\" > </ form > \u8fd9\u91cc\u5b9e\u73b0\u4e86\u4e09\u4e2a\u529f\u80fd\uff1a \u624b\u5199html\u9875\u9762\u83b7\u53d6\u7528\u6237\u8f93\u5165\u4fe1\u606f \u5c06\u6570\u636e\u4f20\u5165\u540e\u7aef\u505a\u6570\u636e\u6821\u9a8c \u5982\u679c\u6709\u9519\u8bef\uff0c\u5c55\u793a\u9519\u8bef\u4fe1\u606f \u4f46\u662f\u8fd9\u4e2a\u9875\u9762\u624b\u5199\u9ebb\u70e6\uff0c\u8f93\u5165\u4fe1\u606f\u5199\u9519\u4e86\uff0c\u4e00\u5237\u65b0\u4fe1\u606f\u5168\u6ca1\u4e86\uff0c\u5f88\u4e0d\u53cb\u597d\uff01\uff01 \u4f7f\u7528forms\u7ec4\u4ef6\u6821\u9a8c\u6570\u636e # \u4f7f\u7528forms\u7ec4\u4ef6\u9996\u5148\u8981\u5bfc\u5165forms\u6a21\u5757\uff0c \u5199\u8fd9\u73a9\u610f\u7c7b\u4f3c\u4e8emodels from django import forms class MyForm ( forms . Form ): # username\u5b57\u6bb5 \u6700\u591a\u516b\u4f4d\uff0c \u6700\u5c11\u4e09\u4f4d username = forms . CharField ( max_length = 8 , min_length = 3 ) # password\u5b57\u6bb5 \u6700\u591a\u516b\u4f4d\uff0c \u6700\u5c11\u4e09\u4f4d password = forms . CharField ( max_length = 8 , min_length = 3 ) # email\u5b57\u6bb5 \u5fc5\u987b\u662f\u90ae\u7bb1\u683c\u5f0f email = forms . EmailField () \u7136\u540e\u5bf9\u6570\u636e\u8fdb\u884c\u6821\u9a8c\uff0c \u53ef\u4ee5\u5199\u4e00\u4e2a\u6d4b\u8bd5\u811a\u672c\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528pycharm\u5de6\u4e0b\u89d2\u7684Python Console\u529f\u80fd\uff0c\u4f1a\u81ea\u52a8\u642d\u5efa\u6d4b\u8bd5\u811a\u672c \u4f7f\u7528\u6d4b\u8bd5 \u6821\u9a8c\u6570\u636e\u7684\u65b9\u6cd5\uff1a \u7ed9\u5199\u597d\u7684\u7c7b \u4f20\u5b57\u5178\u6570\u636e(\u5f85\u6821\u9a8c\u7684\u6570\u636e) form_obj = views . MyForm ({ 'username' : 'cwz' , 'password' : '12' , 'email' : '123' }) \u5982\u4f55\u67e5\u770b\u6821\u9a8c\u7684\u6570\u636e\u662f\u5426\u5408\u6cd5 form_obj . is_valid () # \u53ea\u6709\u5168\u90e8\u6570\u636e\u7b26\u5408\u6821\u9a8c\u89c4\u5219\u624d\u4e3aTrue \u5982\u4f55\u67e5\u770b\u4e0d\u7b26\u5408\u89c4\u5219\u7684\u5b57\u6bb5\u53ca\u9519\u8bef\u7684\u7406\u7531 form_obj . errors ` \u5982\u4f55\u67e5\u770b\u7b26\u5408\u6821\u9a8c\u89c4\u5219\u7684\u6570\u636e form_obj . cleaned_data forms\u7ec4\u4ef6\u4e2d \u5b9a\u4e49\u7684\u5b57\u6bb5\u9ed8\u8ba4\u90fd\u662f\u5fc5\u987b\u4f20\u503c\u7684 \u4e0d\u80fd\u5c11\u4f20 forms\u7ec4\u4ef6\u53ea\u4f1a\u6821\u9a8cforms\u7c7b\u4e2d\u5b9a\u4e49\u7684\u5b57\u6bb5 \u5982\u679c\u4f60\u591a\u4f20\u4e86 \u4e0d\u4f1a\u6709\u4efb\u4f55\u5f71\u54cd forms\u7ec4\u4ef6\u6e32\u67d3\u6807\u7b7e # 1. \u65b9\u5f0f\u4e00 # forms\u7ec4\u4ef6\u53ea\u4f1a\u5e2e\u4f60\u6e32\u67d3\u7528\u6237\u8f93\u5165\u7684\u6807\u7b7e\uff0c\u4e0d\u4f1a\u5e2e\u6e32\u67d3\u63d0\u4ea4\u6309\u94ae\u6807\u7b7e\u3002 views.py def index ( request ): # \u6e32\u67d3\u6807\u7b7e\uff0c\u5148\u751f\u6210\u4e00\u4e2a\u7a7a\u7684form\u7c7b\u7684\u5bf9\u8c61 form_obj = MyForm () return render ( request , 'index.html' , locals ()) \u524d\u7aef\u9875\u9762\uff1a < p > forms\u7ec4\u4ef6\u6e32\u67d3\u7684\u65b9\u5f0f1 </ p > {{ form_obj.as_p }} < br > {{ form_obj.as_ul }} < br > {{ form_obj.as_table }} \u6548\u679c\uff1a \u603b\u7ed3\uff1a\u8fd9\u79cd\u6e32\u67d3\u6807\u7b7e\u7684\u65b9\u5f0f\u5c01\u88c5\u7a0b\u5ea6\u6001\u9ad8 \u4e0d\u63a8\u8350\u4f7f\u7528 \u4f46\u662f\u53ef\u4ee5\u7528\u5728\u672c\u5730\u6d4b\u8bd5 2. \u65b9\u5f0f\u4e8c # \u4e0d\u63a8\u8350\u4f7f\u7528\uff0c\u6bd4\u8f83\u9ebb\u70e6 < p > forms\u7ec4\u4ef6\u6e32\u67d3\u6807\u7b7e\u65b9\u5f0f2\uff1a </ p > {{ form_obj.username.label }}{{ form_obj.username }} {{ form_obj.password.label }}{{ form_obj.password }} {{ form_obj.email.label }}{{ form_obj.email }} 3.\u65b9\u5f0f\u4e09 # < p > forms\u7ec4\u4ef6\u6e32\u67d3\u6807\u7b7e\u65b9\u5f0f3\uff1a </ p > {% for form in form_obj %} < p > {{ form.label }} {{ form }} </ p > {% endfor %} \u82e5\u60f3\u8981label\u6807\u7b7e\u663e\u793a\u4e2d\u6587\uff0c\u53ef\u4ee5\u6307\u5b9alabel\u6807\u7b7e\uff1a from django import forms class MyForm ( forms . Form ): # username\u5b57\u6bb5 \u6700\u591a\u516b\u4f4d\uff0c \u6700\u5c11\u4e09\u4f4d username = forms . CharField ( max_length = 8 , min_length = 3 , label = '\u7528\u6237\u540d' ) # password\u5b57\u6bb5 \u6700\u591a\u516b\u4f4d\uff0c \u6700\u5c11\u4e09\u4f4d password = forms . CharField ( max_length = 8 , min_length = 3 , label = '\u5bc6\u7801' ) # email\u5b57\u6bb5 \u5fc5\u987b\u662f\u90ae\u7bb1\u683c\u5f0f email = forms . EmailField ( label = '\u90ae\u7bb1' ) forms\u7ec4\u4ef6\u5c55\u793a\u4fe1\u606f # < form action = \"\" method = \"post\" > {% for form in form_obj %} < p > {{ form.label }} {{ form }} </ p > {% endfor %} < input type = \"submit\" > </ form > views.py from django import forms class MyForm ( forms . Form ): # username\u5b57\u6bb5 \u6700\u591a\u516b\u4f4d\uff0c \u6700\u5c11\u4e09\u4f4d username = forms . CharField ( max_length = 8 , min_length = 3 , label = '\u7528\u6237\u540d' ) # password\u5b57\u6bb5 \u6700\u591a\u516b\u4f4d\uff0c \u6700\u5c11\u4e09\u4f4d password = forms . CharField ( max_length = 8 , min_length = 3 , label = '\u5bc6\u7801' ) # email\u5b57\u6bb5 \u5fc5\u987b\u662f\u90ae\u7bb1\u683c\u5f0f email = forms . EmailField ( label = '\u90ae\u7bb1' ) def index ( request ): # \u6e32\u67d3\u6807\u7b7e\uff0c\u5148\u751f\u6210\u4e00\u4e2a\u7a7a\u7684forms\u7c7b\u7684\u5bf9\u8c61 form_obj = MyForm () if request . method == 'POST' : form_obj = MyForm ( request . POST ) if form_obj . is_valid (): print ( form_obj . cleaned_data ) return HttpResponse ( '\u6570\u636e\u6b63\u786e' ) else : print ( form_obj . errors ) return render ( request , 'index.html' , locals ()) \u8fd9\u73a9\u610f\u662f\u524d\u7aef\u505a\u7684\u6821\u9a8c \u6ce8\u610f\uff1a \u6570\u636e\u7684\u6821\u9a8c\u901a\u5e38\u524d\u540e\u7aef\u90fd\u6709\uff0c\u4f46\u662f\u524d\u7aef\u7684\u6821\u9a8c\u4e0d\u582a\u4e00\u51fb\uff0c\u53ef\u6709\u53ef\u65e0\uff1b\u540e\u7aef\u7684\u6821\u9a8c\u5fc5\u987b\u8981\u6709\u800c\u4e14\u5fc5\u987b\u975e\u5e38\u5168\u9762 \u5728\u524d\u7aefform\u8868\u5355\u52a0\u4e0a\u4e00\u4e2a\u53c2\u6570\uff08 novalidate \uff09\uff0c\u5c31\u53ef\u4ee5\u4e0d\u505a\u6821\u9a8c\uff1a <form action=\"\" method=\"post\" novalidate> \u524d\u7aef\u9519\u8bef\u4fe1\u606f\u5c55\u793a\u5199\u6cd5\uff1a < form action = \"\" method = \"post\" novalidate > {% for form in form_obj %} < p > {{ form.label }} {{ form }} < span > {{ form.errors.0 }} </ span > </ p > {% endfor %} < input type = \"submit\" > </ form > \u4e5f\u652f\u6301\u4e2d\u6587\u663e\u793a\u4fe1\u606f from django import forms class MyForm ( forms . Form ): # username\u5b57\u6bb5 \u6700\u591a\u516b\u4f4d\uff0c \u6700\u5c11\u4e09\u4f4d username = forms . CharField ( max_length = 8 , min_length = 3 , label = '\u7528\u6237\u540d' , error_messages = { 'max_length' : '\u7528\u6237\u540d\u6700\u957f\u516b\u4f4d' , 'min_length' : '\u7528\u6237\u540d\u6700\u77ed\u4e09\u4f4d' , 'required' : '\u7528\u6237\u540d\u4e0d\u80fd\u4e3a\u7a7a' , }) # password\u5b57\u6bb5 \u6700\u591a\u516b\u4f4d\uff0c \u6700\u5c11\u4e09\u4f4d password = forms . CharField ( max_length = 8 , min_length = 3 , label = '\u5bc6\u7801' , error_messages = { 'max_length' : '\u5bc6\u7801\u6700\u957f\u516b\u4f4d' , 'min_length' : '\u5bc6\u7801\u6700\u77ed\u4e09\u4f4d' , 'required' : '\u5bc6\u7801\u4e0d\u80fd\u4e3a\u7a7a' , }) # email\u5b57\u6bb5 \u5fc5\u987b\u662f\u90ae\u7bb1\u683c\u5f0f email = forms . EmailField ( label = '\u90ae\u7bb1' , error_messages = { 'required' : '\u90ae\u7bb1\u4e0d\u80fd\u4e3a\u7a7a' , 'invalid' : '\u90ae\u7bb1\u683c\u5f0f\u4e0d\u6b63\u786e' }) form\u7ec4\u4ef6\u81ea\u5b9a\u4e49\u6821\u9a8c # RegexValidator\u9a8c\u8bc1\u5668 # from django import forms from django.core.validators import RegexValidator class MyForm ( forms . Form ): # username\u5b57\u6bb5 \u6700\u591a\u516b\u4f4d\uff0c \u6700\u5c11\u4e09\u4f4d username = forms . CharField ( max_length = 8 , min_length = 3 , label = '\u7528\u6237\u540d' , error_messages = { 'max_length' : '\u7528\u6237\u540d\u6700\u957f\u516b\u4f4d' , 'min_length' : '\u7528\u6237\u540d\u6700\u77ed\u4e09\u4f4d' , 'required' : '\u7528\u6237\u540d\u4e0d\u80fd\u4e3a\u7a7a' , }) # password\u5b57\u6bb5 \u6700\u591a\u516b\u4f4d\uff0c \u6700\u5c11\u4e09\u4f4d password = forms . CharField ( max_length = 8 , min_length = 3 , label = '\u5bc6\u7801' , error_messages = { 'max_length' : '\u5bc6\u7801\u6700\u957f\u516b\u4f4d' , 'min_length' : '\u5bc6\u7801\u6700\u77ed\u4e09\u4f4d' , 'required' : '\u5bc6\u7801\u4e0d\u80fd\u4e3a\u7a7a' , }, validators = [ RegexValidator ( r '^[0-9]+$' , '\u8bf7\u8f93\u5165\u6570\u5b57' ), RegexValidator ( r '^139[0-9]+$' , '\u6570\u5b57\u5fc5\u987b\u8981\u4ee5139\u5f00\u5934' ) # \u53ef\u4ee5\u6dfb\u52a0\u591a\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u4ece\u4e0a\u5f80\u4e0b\u6821\u9a8c ] ) \u94a9\u5b50\u51fd\u6570 (HOOK) # \u5f53\u4f60\u89c9\u5f97\u4e0a\u9762\u7684\u6240\u6709\u6821\u9a8c\u8fd8\u662f\u4e0d\u80fd\u6ee1\u8db3\u9700\u6c42\uff0c\u53ef\u4ee5\u8003\u8651\u94a9\u5b50\u51fd\u6570 \u5168\u5c40\u94a9\u5b50 # \u6211\u4eec\u5728Fom\u7c7b\u4e2d\u5b9a\u4e49 clean() \u65b9\u6cd5\uff0c\u5c31\u80fd\u591f\u5b9e\u73b0\u5bf9\u5b57\u6bb5\u8fdb\u884c\u5168\u5c40\u6821\u9a8c\u3002 class MyForm ( forms . Form ): # username\u5b57\u6bb5 \u6700\u591a\u516b\u4f4d\uff0c \u6700\u5c11\u4e09\u4f4d username = forms . CharField ( max_length = 8 , min_length = 3 , label = '\u7528\u6237\u540d' , error_messages = { 'max_length' : '\u7528\u6237\u540d\u6700\u957f\u516b\u4f4d' , 'min_length' : '\u7528\u6237\u540d\u6700\u77ed\u4e09\u4f4d' , 'required' : '\u7528\u6237\u540d\u4e0d\u80fd\u4e3a\u7a7a' , }) # password\u5b57\u6bb5 \u6700\u591a\u516b\u4f4d\uff0c \u6700\u5c11\u4e09\u4f4d password = forms . CharField ( max_length = 8 , min_length = 3 , label = '\u5bc6\u7801' , error_messages = { 'max_length' : '\u5bc6\u7801\u6700\u957f\u516b\u4f4d' , 'min_length' : '\u5bc6\u7801\u6700\u77ed\u4e09\u4f4d' , 'required' : '\u5bc6\u7801\u4e0d\u80fd\u4e3a\u7a7a' , }) re_password = forms . CharField ( max_length = 8 , min_length = 3 , label = '\u786e\u8ba4\u5bc6\u7801' , error_messages = { 'max_length' : '\u786e\u8ba4\u5bc6\u7801\u6700\u957f\u516b\u4f4d' , 'min_length' : '\u786e\u8ba4\u5bc6\u7801\u6700\u77ed\u4e09\u4f4d' , 'required' : '\u786e\u8ba4\u5bc6\u7801\u4e0d\u80fd\u4e3a\u7a7a' , }) # \u6821\u9a8c\u5bc6\u7801 \u786e\u8ba4\u5bc6\u7801\u662f\u5426\u4e00\u81f4 def clean ( self ): password = self . cleaned_data . get ( 'password' ) re_password = self . cleaned_data . get ( 'password' ) if not password == re_password : self . add_error ( 're_password' , '\u4e24\u6b21\uff0c\u5bc6\u7801\u4e0d\u4e00\u81f4' ) return self . cleaned_data \u5c40\u90e8\u94a9\u5b50 # \u6211\u4eec\u5728Fom\u7c7b\u4e2d\u5b9a\u4e49 clean_\u5b57\u6bb5\u540d() \u65b9\u6cd5\uff0c\u5c31\u80fd\u591f\u5b9e\u73b0\u5bf9\u7279\u5b9a\u5b57\u6bb5\u8fdb\u884c\u6821\u9a8c\u3002 class MyForm ( forms . Form ): # username\u5b57\u6bb5 \u6700\u591a\u516b\u4f4d\uff0c \u6700\u5c11\u4e09\u4f4d username = forms . CharField ( max_length = 8 , min_length = 3 , label = '\u7528\u6237\u540d' , error_messages = { 'max_length' : '\u7528\u6237\u540d\u6700\u957f\u516b\u4f4d' , 'min_length' : '\u7528\u6237\u540d\u6700\u77ed\u4e09\u4f4d' , 'required' : '\u7528\u6237\u540d\u4e0d\u80fd\u4e3a\u7a7a' , }) # password\u5b57\u6bb5 \u6700\u591a\u516b\u4f4d\uff0c \u6700\u5c11\u4e09\u4f4d password = forms . CharField ( max_length = 8 , min_length = 3 , label = '\u5bc6\u7801' , error_messages = { 'max_length' : '\u5bc6\u7801\u6700\u957f\u516b\u4f4d' , 'min_length' : '\u5bc6\u7801\u6700\u77ed\u4e09\u4f4d' , 'required' : '\u5bc6\u7801\u4e0d\u80fd\u4e3a\u7a7a' , }) re_password = forms . CharField ( max_length = 8 , min_length = 3 , label = '\u786e\u8ba4\u5bc6\u7801' , error_messages = { 'max_length' : '\u786e\u8ba4\u5bc6\u7801\u6700\u957f\u516b\u4f4d' , 'min_length' : '\u786e\u8ba4\u5bc6\u7801\u6700\u77ed\u4e09\u4f4d' , 'required' : '\u786e\u8ba4\u5bc6\u7801\u4e0d\u80fd\u4e3a\u7a7a' , }) # \u6821\u9a8c\u7528\u6237\u540d\u4e2d\u4e0d\u80fd\u6709666 def clean_username ( self ): username = self . cleaned_data . get ( 'username' ) if '666' in username : # \u7ed9username\u5b57\u6bb5\u6dfb\u52a0\u9519\u8bef\u4fe1\u606f self . add_error ( 'username' , '666\u662f\u4e0d\u5b58\u5728\u7684' ) # \u5c06username\u8fd4\u56de\u51fa\u53bb return username forms\u7ec4\u4ef6\u8865\u5145\u77e5\u8bc6\u70b9 # \u5176\u4ed6\u5b57\u6bb5\u53c2\u6570 # label input\u5bf9\u5e94\u7684\u63d0\u793a\u4fe1\u606f initial \u9ed8\u8ba4\u503c required \u9ed8\u8ba4\u4e3aTrue \u63a7\u5236\u5b57\u6bb5\u662f\u5426\u5fc5\u586b class MyForm ( forms . Form ): # username\u5b57\u6bb5 \u6700\u591a\u516b\u4f4d\uff0c \u6700\u5c11\u4e09\u4f4d username = forms . CharField ( max_length = 8 , min_length = 3 , label = '\u7528\u6237\u540d' , initial = '\u9ed8\u8ba4\u503c' , error_messages = { 'max_length' : '\u7528\u6237\u540d\u6700\u957f\u516b\u4f4d' , 'min_length' : '\u7528\u6237\u540d\u6700\u77ed\u4e09\u4f4d' , 'required' : '\u7528\u6237\u540d\u4e0d\u80fd\u4e3a\u7a7a' , }, required = False ) widget \u7ed9input\u6846\u8bbe\u7f6e\u6837\u5f0f\u53ca\u5c5e\u6027 password = forms . CharField ( max_length = 8 , min_length = 3 , label = '\u5bc6\u7801' , error_messages = { 'max_length' : '\u5bc6\u7801\u6700\u957f\u516b\u4f4d' , 'min_length' : '\u5bc6\u7801\u6700\u77ed\u4e09\u4f4d' , 'required' : '\u5bc6\u7801\u4e0d\u80fd\u4e3a\u7a7a' , }, widget = forms . widgets . PasswordInput () # \u8fd9\u4e2apassword\u5b57\u6bb5\u662f\u5bc6\u6587\u7684 username = forms . CharField ( max_length = 8 , min_length = 3 , label = '\u7528\u6237\u540d' , initial = '\u9ed8\u8ba4\u503c' , error_messages = { 'max_length' : '\u7528\u6237\u540d\u6700\u957f\u516b\u4f4d' , 'min_length' : '\u7528\u6237\u540d\u6700\u77ed\u4e09\u4f4d' , 'required' : '\u7528\u6237\u540d\u4e0d\u80fd\u4e3a\u7a7a' , }, required = False , widget = forms . widgets . TextInput ({ 'class' : 'form-control c1 c2' , 'username' : 'cwz' }) ) error_messages # \u91cd\u5199\u9519\u8bef\u4fe1\u606f\u3002 class LoginForm ( forms . Form ): username = forms . CharField ( min_length = 8 , label = \"\u7528\u6237\u540d\" , initial = \"\u5f20\u4e09\" , error_messages = { \"required\" : \"\u4e0d\u80fd\u4e3a\u7a7a\" , \"invalid\" : \"\u683c\u5f0f\u9519\u8bef\" , \"min_length\" : \"\u7528\u6237\u540d\u6700\u77ed8\u4f4d\" } ) pwd = forms . CharField ( min_length = 6 , label = \"\u5bc6\u7801\" ) password # class LoginForm ( forms . Form ): ... pwd = forms . CharField ( min_length = 6 , label = \"\u5bc6\u7801\" , widget = forms . widgets . PasswordInput ( attrs = { 'class' : 'c1' }, render_value = True ) ) radioSelect # \u5355radio\u503c\u4e3a\u5b57\u7b26\u4e32 class LoginForm ( forms . Form ): username = forms . CharField ( min_length = 8 , label = \"\u7528\u6237\u540d\" , initial = \"\u5f20\u4e09\" , error_messages = { \"required\" : \"\u4e0d\u80fd\u4e3a\u7a7a\" , \"invalid\" : \"\u683c\u5f0f\u9519\u8bef\" , \"min_length\" : \"\u7528\u6237\u540d\u6700\u77ed8\u4f4d\" } ) pwd = forms . CharField ( min_length = 6 , label = \"\u5bc6\u7801\" ) gender = forms . fields . ChoiceField ( choices = (( 1 , \"\u7537\" ), ( 2 , \"\u5973\" ), ( 3 , \"\u4fdd\u5bc6\" )), label = \"\u6027\u522b\" , initial = 3 , widget = forms . widgets . RadioSelect () ) \u5355\u9009Select # class LoginForm ( forms . Form ): ... hobby = forms . ChoiceField ( choices = (( 1 , \"\u7bee\u7403\" ), ( 2 , \"\u8db3\u7403\" ), ( 3 , \"\u53cc\u8272\u7403\" ), ), label = \"\u7231\u597d\" , initial = 3 , widget = forms . widgets . Select () ) \u591a\u9009Select # class LoginForm ( forms . Form ): ... hobby = forms . MultipleChoiceField ( choices = (( 1 , \"\u7bee\u7403\" ), ( 2 , \"\u8db3\u7403\" ), ( 3 , \"\u53cc\u8272\u7403\" ), ), label = \"\u7231\u597d\" , initial = [ 1 , 3 ], widget = forms . widgets . SelectMultiple () ) \u5355\u9009checkbox # class LoginForm ( forms . Form ): ... keep = forms . ChoiceField ( label = \"\u662f\u5426\u8bb0\u4f4f\u5bc6\u7801\" , initial = \"checked\" , widget = forms . widgets . CheckboxInput () ) \u591a\u9009checkbox # class LoginForm ( forms . Form ): ... hobby = forms . MultipleChoiceField ( choices = (( 1 , \"\u7bee\u7403\" ), ( 2 , \"\u8db3\u7403\" ), ( 3 , \"\u53cc\u8272\u7403\" ),), label = \"\u7231\u597d\" , initial = [ 1 , 3 ], widget = forms . widgets . CheckboxSelectMultiple () ) choice\u5b57\u6bb5\u6ce8\u610f\u4e8b\u9879 # \u5728\u4f7f\u7528\u9009\u62e9\u6807\u7b7e\u65f6\uff0c\u9700\u8981\u6ce8\u610fchoices\u7684\u9009\u9879\u53ef\u4ee5\u914d\u7f6e\u4ece\u6570\u636e\u5e93\u4e2d\u83b7\u53d6\uff0c\u4f46\u662f\u7531\u4e8e\u662f\u9759\u6001\u5b57\u6bb5 \u83b7\u53d6\u7684\u503c\u65e0\u6cd5\u5b9e\u65f6\u66f4\u65b0\uff0c\u9700\u8981\u91cd\u5199\u6784\u9020\u65b9\u6cd5\u4ece\u800c\u5b9e\u73b0choice\u5b9e\u65f6\u66f4\u65b0 \u65b9\u5f0f\u4e00 from django.forms import Form from django.forms import widgets from django.forms import fields class MyForm ( Form ): user = fields . ChoiceField ( # choices=((1, '\u4e0a\u6d77'), (2, '\u5317\u4eac'),), initial = 2 , widget = widgets . Select ) def __init__ ( self , * args , ** kwargs ): super ( MyForm , self ) . __init__ ( * args , ** kwargs ) # self.fields['user'].choices = ((1, '\u4e0a\u6d77'), (2, '\u5317\u4eac'),) # \u6216 self . fields [ 'user' ] . choices = models . Classes . objects . all () . values_list ( 'id' , 'caption' ) \u65b9\u5f0f\u4e8c from django import forms from django.forms import fields from django.forms import models as form_model class FInfo ( forms . Form ): authors = form_model . ModelMultipleChoiceField ( queryset = models . NNewType . objects . all ()) # \u591a\u9009 # authors = form_model.ModelChoiceField(queryset=models.NNewType.objects.all()) # \u5355\u9009","title":"16 django\u4e4bforms\u7ec4\u4ef6"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/16%20django%E4%B9%8Bforms%E7%BB%84%E4%BB%B6/#djangoforms","text":"","title":"django\u4e4bforms\u7ec4\u4ef6"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/16%20django%E4%B9%8Bforms%E7%BB%84%E4%BB%B6/#forms","text":"\u5148\u629b\u51fa\u4e00\u4e2a\u9700\u6c42\uff1a 1.\u5199\u4e00\u4e2a\u6ce8\u518c\u529f\u80fd\uff0c\u83b7\u53d6\u7528\u6237\u8f93\u5165\u7684\u7528\u6237\u540d\u548c\u5bc6\u7801\uff0c\u63d0\u4ea4\u5230\u540e\u7aef\uff0c\u540e\u7aef\u505a\u6821\u9a8c 2.\u7528\u6237\u540d\u91cc\u9762\u4e0d\u80fd\u542b\u6709\u654f\u611f\u4fe1\u606f\uff0c\u7ed9\u51fa\u76f8\u5e94\u7684\u63d0\u793a 3.\u5982\u679c\u5bc6\u7801\u5c0f\u4e8e\u4e09\u4f4d\uff0c\u5c31\u63d0\u793a\u7528\u6237","title":"forms\u7ec4\u4ef6"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/16%20django%E4%B9%8Bforms%E7%BB%84%E4%BB%B6/#_1","text":"views.py def register ( request ): errors = { 'username' : '' , 'password' : '' } if request . method == 'POST' : username = request . POST . get ( 'username' ) password = request . POST . get ( 'password' ) if 'zf' in username : errors [ 'username' ] = '\u4e0d\u80fd\u4f7f\u7528\u8be5\u5b57\u7b26' if len ( password ) < 4 : errors [ 'password' ] = '\u5bc6\u7801\u4e0d\u80fd\u5c0f\u4e8e\u4e09\u4f4d' return render ( request , 'register.html' , locals ()) register.html < form action = \"\" method = \"post\" > < p > username: < input type = \"text\" name = \"username\" > < span style = \"color: red\" > {{ errors.username }} </ span > </ p > < p > password: < input type = \"text\" name = \"password\" > < span style = \"color: red\" > {{ errors.password }} </ span > </ p > < input type = \"submit\" > </ form > \u8fd9\u91cc\u5b9e\u73b0\u4e86\u4e09\u4e2a\u529f\u80fd\uff1a \u624b\u5199html\u9875\u9762\u83b7\u53d6\u7528\u6237\u8f93\u5165\u4fe1\u606f \u5c06\u6570\u636e\u4f20\u5165\u540e\u7aef\u505a\u6570\u636e\u6821\u9a8c \u5982\u679c\u6709\u9519\u8bef\uff0c\u5c55\u793a\u9519\u8bef\u4fe1\u606f \u4f46\u662f\u8fd9\u4e2a\u9875\u9762\u624b\u5199\u9ebb\u70e6\uff0c\u8f93\u5165\u4fe1\u606f\u5199\u9519\u4e86\uff0c\u4e00\u5237\u65b0\u4fe1\u606f\u5168\u6ca1\u4e86\uff0c\u5f88\u4e0d\u53cb\u597d\uff01\uff01","title":"\u624b\u52a8\u4e66\u5199\u9700\u6c42"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/16%20django%E4%B9%8Bforms%E7%BB%84%E4%BB%B6/#forms_1","text":"\u4f7f\u7528forms\u7ec4\u4ef6\u9996\u5148\u8981\u5bfc\u5165forms\u6a21\u5757\uff0c \u5199\u8fd9\u73a9\u610f\u7c7b\u4f3c\u4e8emodels from django import forms class MyForm ( forms . Form ): # username\u5b57\u6bb5 \u6700\u591a\u516b\u4f4d\uff0c \u6700\u5c11\u4e09\u4f4d username = forms . CharField ( max_length = 8 , min_length = 3 ) # password\u5b57\u6bb5 \u6700\u591a\u516b\u4f4d\uff0c \u6700\u5c11\u4e09\u4f4d password = forms . CharField ( max_length = 8 , min_length = 3 ) # email\u5b57\u6bb5 \u5fc5\u987b\u662f\u90ae\u7bb1\u683c\u5f0f email = forms . EmailField () \u7136\u540e\u5bf9\u6570\u636e\u8fdb\u884c\u6821\u9a8c\uff0c \u53ef\u4ee5\u5199\u4e00\u4e2a\u6d4b\u8bd5\u811a\u672c\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528pycharm\u5de6\u4e0b\u89d2\u7684Python Console\u529f\u80fd\uff0c\u4f1a\u81ea\u52a8\u642d\u5efa\u6d4b\u8bd5\u811a\u672c \u4f7f\u7528\u6d4b\u8bd5 \u6821\u9a8c\u6570\u636e\u7684\u65b9\u6cd5\uff1a \u7ed9\u5199\u597d\u7684\u7c7b \u4f20\u5b57\u5178\u6570\u636e(\u5f85\u6821\u9a8c\u7684\u6570\u636e) form_obj = views . MyForm ({ 'username' : 'cwz' , 'password' : '12' , 'email' : '123' }) \u5982\u4f55\u67e5\u770b\u6821\u9a8c\u7684\u6570\u636e\u662f\u5426\u5408\u6cd5 form_obj . is_valid () # \u53ea\u6709\u5168\u90e8\u6570\u636e\u7b26\u5408\u6821\u9a8c\u89c4\u5219\u624d\u4e3aTrue \u5982\u4f55\u67e5\u770b\u4e0d\u7b26\u5408\u89c4\u5219\u7684\u5b57\u6bb5\u53ca\u9519\u8bef\u7684\u7406\u7531 form_obj . errors ` \u5982\u4f55\u67e5\u770b\u7b26\u5408\u6821\u9a8c\u89c4\u5219\u7684\u6570\u636e form_obj . cleaned_data forms\u7ec4\u4ef6\u4e2d \u5b9a\u4e49\u7684\u5b57\u6bb5\u9ed8\u8ba4\u90fd\u662f\u5fc5\u987b\u4f20\u503c\u7684 \u4e0d\u80fd\u5c11\u4f20 forms\u7ec4\u4ef6\u53ea\u4f1a\u6821\u9a8cforms\u7c7b\u4e2d\u5b9a\u4e49\u7684\u5b57\u6bb5 \u5982\u679c\u4f60\u591a\u4f20\u4e86 \u4e0d\u4f1a\u6709\u4efb\u4f55\u5f71\u54cd","title":"\u4f7f\u7528forms\u7ec4\u4ef6\u6821\u9a8c\u6570\u636e"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/16%20django%E4%B9%8Bforms%E7%BB%84%E4%BB%B6/#forms_2","text":"","title":"forms\u7ec4\u4ef6\u6e32\u67d3\u6807\u7b7e"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/16%20django%E4%B9%8Bforms%E7%BB%84%E4%BB%B6/#1","text":"forms\u7ec4\u4ef6\u53ea\u4f1a\u5e2e\u4f60\u6e32\u67d3\u7528\u6237\u8f93\u5165\u7684\u6807\u7b7e\uff0c\u4e0d\u4f1a\u5e2e\u6e32\u67d3\u63d0\u4ea4\u6309\u94ae\u6807\u7b7e\u3002 views.py def index ( request ): # \u6e32\u67d3\u6807\u7b7e\uff0c\u5148\u751f\u6210\u4e00\u4e2a\u7a7a\u7684form\u7c7b\u7684\u5bf9\u8c61 form_obj = MyForm () return render ( request , 'index.html' , locals ()) \u524d\u7aef\u9875\u9762\uff1a < p > forms\u7ec4\u4ef6\u6e32\u67d3\u7684\u65b9\u5f0f1 </ p > {{ form_obj.as_p }} < br > {{ form_obj.as_ul }} < br > {{ form_obj.as_table }} \u6548\u679c\uff1a \u603b\u7ed3\uff1a\u8fd9\u79cd\u6e32\u67d3\u6807\u7b7e\u7684\u65b9\u5f0f\u5c01\u88c5\u7a0b\u5ea6\u6001\u9ad8 \u4e0d\u63a8\u8350\u4f7f\u7528 \u4f46\u662f\u53ef\u4ee5\u7528\u5728\u672c\u5730\u6d4b\u8bd5","title":"1. \u65b9\u5f0f\u4e00"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/16%20django%E4%B9%8Bforms%E7%BB%84%E4%BB%B6/#2","text":"\u4e0d\u63a8\u8350\u4f7f\u7528\uff0c\u6bd4\u8f83\u9ebb\u70e6 < p > forms\u7ec4\u4ef6\u6e32\u67d3\u6807\u7b7e\u65b9\u5f0f2\uff1a </ p > {{ form_obj.username.label }}{{ form_obj.username }} {{ form_obj.password.label }}{{ form_obj.password }} {{ form_obj.email.label }}{{ form_obj.email }}","title":"2. \u65b9\u5f0f\u4e8c"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/16%20django%E4%B9%8Bforms%E7%BB%84%E4%BB%B6/#3","text":"< p > forms\u7ec4\u4ef6\u6e32\u67d3\u6807\u7b7e\u65b9\u5f0f3\uff1a </ p > {% for form in form_obj %} < p > {{ form.label }} {{ form }} </ p > {% endfor %} \u82e5\u60f3\u8981label\u6807\u7b7e\u663e\u793a\u4e2d\u6587\uff0c\u53ef\u4ee5\u6307\u5b9alabel\u6807\u7b7e\uff1a from django import forms class MyForm ( forms . Form ): # username\u5b57\u6bb5 \u6700\u591a\u516b\u4f4d\uff0c \u6700\u5c11\u4e09\u4f4d username = forms . CharField ( max_length = 8 , min_length = 3 , label = '\u7528\u6237\u540d' ) # password\u5b57\u6bb5 \u6700\u591a\u516b\u4f4d\uff0c \u6700\u5c11\u4e09\u4f4d password = forms . CharField ( max_length = 8 , min_length = 3 , label = '\u5bc6\u7801' ) # email\u5b57\u6bb5 \u5fc5\u987b\u662f\u90ae\u7bb1\u683c\u5f0f email = forms . EmailField ( label = '\u90ae\u7bb1' )","title":"3.\u65b9\u5f0f\u4e09"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/16%20django%E4%B9%8Bforms%E7%BB%84%E4%BB%B6/#forms_3","text":"< form action = \"\" method = \"post\" > {% for form in form_obj %} < p > {{ form.label }} {{ form }} </ p > {% endfor %} < input type = \"submit\" > </ form > views.py from django import forms class MyForm ( forms . Form ): # username\u5b57\u6bb5 \u6700\u591a\u516b\u4f4d\uff0c \u6700\u5c11\u4e09\u4f4d username = forms . CharField ( max_length = 8 , min_length = 3 , label = '\u7528\u6237\u540d' ) # password\u5b57\u6bb5 \u6700\u591a\u516b\u4f4d\uff0c \u6700\u5c11\u4e09\u4f4d password = forms . CharField ( max_length = 8 , min_length = 3 , label = '\u5bc6\u7801' ) # email\u5b57\u6bb5 \u5fc5\u987b\u662f\u90ae\u7bb1\u683c\u5f0f email = forms . EmailField ( label = '\u90ae\u7bb1' ) def index ( request ): # \u6e32\u67d3\u6807\u7b7e\uff0c\u5148\u751f\u6210\u4e00\u4e2a\u7a7a\u7684forms\u7c7b\u7684\u5bf9\u8c61 form_obj = MyForm () if request . method == 'POST' : form_obj = MyForm ( request . POST ) if form_obj . is_valid (): print ( form_obj . cleaned_data ) return HttpResponse ( '\u6570\u636e\u6b63\u786e' ) else : print ( form_obj . errors ) return render ( request , 'index.html' , locals ()) \u8fd9\u73a9\u610f\u662f\u524d\u7aef\u505a\u7684\u6821\u9a8c \u6ce8\u610f\uff1a \u6570\u636e\u7684\u6821\u9a8c\u901a\u5e38\u524d\u540e\u7aef\u90fd\u6709\uff0c\u4f46\u662f\u524d\u7aef\u7684\u6821\u9a8c\u4e0d\u582a\u4e00\u51fb\uff0c\u53ef\u6709\u53ef\u65e0\uff1b\u540e\u7aef\u7684\u6821\u9a8c\u5fc5\u987b\u8981\u6709\u800c\u4e14\u5fc5\u987b\u975e\u5e38\u5168\u9762 \u5728\u524d\u7aefform\u8868\u5355\u52a0\u4e0a\u4e00\u4e2a\u53c2\u6570\uff08 novalidate \uff09\uff0c\u5c31\u53ef\u4ee5\u4e0d\u505a\u6821\u9a8c\uff1a <form action=\"\" method=\"post\" novalidate> \u524d\u7aef\u9519\u8bef\u4fe1\u606f\u5c55\u793a\u5199\u6cd5\uff1a < form action = \"\" method = \"post\" novalidate > {% for form in form_obj %} < p > {{ form.label }} {{ form }} < span > {{ form.errors.0 }} </ span > </ p > {% endfor %} < input type = \"submit\" > </ form > \u4e5f\u652f\u6301\u4e2d\u6587\u663e\u793a\u4fe1\u606f from django import forms class MyForm ( forms . Form ): # username\u5b57\u6bb5 \u6700\u591a\u516b\u4f4d\uff0c \u6700\u5c11\u4e09\u4f4d username = forms . CharField ( max_length = 8 , min_length = 3 , label = '\u7528\u6237\u540d' , error_messages = { 'max_length' : '\u7528\u6237\u540d\u6700\u957f\u516b\u4f4d' , 'min_length' : '\u7528\u6237\u540d\u6700\u77ed\u4e09\u4f4d' , 'required' : '\u7528\u6237\u540d\u4e0d\u80fd\u4e3a\u7a7a' , }) # password\u5b57\u6bb5 \u6700\u591a\u516b\u4f4d\uff0c \u6700\u5c11\u4e09\u4f4d password = forms . CharField ( max_length = 8 , min_length = 3 , label = '\u5bc6\u7801' , error_messages = { 'max_length' : '\u5bc6\u7801\u6700\u957f\u516b\u4f4d' , 'min_length' : '\u5bc6\u7801\u6700\u77ed\u4e09\u4f4d' , 'required' : '\u5bc6\u7801\u4e0d\u80fd\u4e3a\u7a7a' , }) # email\u5b57\u6bb5 \u5fc5\u987b\u662f\u90ae\u7bb1\u683c\u5f0f email = forms . EmailField ( label = '\u90ae\u7bb1' , error_messages = { 'required' : '\u90ae\u7bb1\u4e0d\u80fd\u4e3a\u7a7a' , 'invalid' : '\u90ae\u7bb1\u683c\u5f0f\u4e0d\u6b63\u786e' })","title":"forms\u7ec4\u4ef6\u5c55\u793a\u4fe1\u606f"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/16%20django%E4%B9%8Bforms%E7%BB%84%E4%BB%B6/#form","text":"","title":"form\u7ec4\u4ef6\u81ea\u5b9a\u4e49\u6821\u9a8c"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/16%20django%E4%B9%8Bforms%E7%BB%84%E4%BB%B6/#regexvalidator","text":"from django import forms from django.core.validators import RegexValidator class MyForm ( forms . Form ): # username\u5b57\u6bb5 \u6700\u591a\u516b\u4f4d\uff0c \u6700\u5c11\u4e09\u4f4d username = forms . CharField ( max_length = 8 , min_length = 3 , label = '\u7528\u6237\u540d' , error_messages = { 'max_length' : '\u7528\u6237\u540d\u6700\u957f\u516b\u4f4d' , 'min_length' : '\u7528\u6237\u540d\u6700\u77ed\u4e09\u4f4d' , 'required' : '\u7528\u6237\u540d\u4e0d\u80fd\u4e3a\u7a7a' , }) # password\u5b57\u6bb5 \u6700\u591a\u516b\u4f4d\uff0c \u6700\u5c11\u4e09\u4f4d password = forms . CharField ( max_length = 8 , min_length = 3 , label = '\u5bc6\u7801' , error_messages = { 'max_length' : '\u5bc6\u7801\u6700\u957f\u516b\u4f4d' , 'min_length' : '\u5bc6\u7801\u6700\u77ed\u4e09\u4f4d' , 'required' : '\u5bc6\u7801\u4e0d\u80fd\u4e3a\u7a7a' , }, validators = [ RegexValidator ( r '^[0-9]+$' , '\u8bf7\u8f93\u5165\u6570\u5b57' ), RegexValidator ( r '^139[0-9]+$' , '\u6570\u5b57\u5fc5\u987b\u8981\u4ee5139\u5f00\u5934' ) # \u53ef\u4ee5\u6dfb\u52a0\u591a\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u4ece\u4e0a\u5f80\u4e0b\u6821\u9a8c ] )","title":"RegexValidator\u9a8c\u8bc1\u5668"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/16%20django%E4%B9%8Bforms%E7%BB%84%E4%BB%B6/#hook","text":"\u5f53\u4f60\u89c9\u5f97\u4e0a\u9762\u7684\u6240\u6709\u6821\u9a8c\u8fd8\u662f\u4e0d\u80fd\u6ee1\u8db3\u9700\u6c42\uff0c\u53ef\u4ee5\u8003\u8651\u94a9\u5b50\u51fd\u6570","title":"\u94a9\u5b50\u51fd\u6570  (HOOK)"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/16%20django%E4%B9%8Bforms%E7%BB%84%E4%BB%B6/#_2","text":"\u6211\u4eec\u5728Fom\u7c7b\u4e2d\u5b9a\u4e49 clean() \u65b9\u6cd5\uff0c\u5c31\u80fd\u591f\u5b9e\u73b0\u5bf9\u5b57\u6bb5\u8fdb\u884c\u5168\u5c40\u6821\u9a8c\u3002 class MyForm ( forms . Form ): # username\u5b57\u6bb5 \u6700\u591a\u516b\u4f4d\uff0c \u6700\u5c11\u4e09\u4f4d username = forms . CharField ( max_length = 8 , min_length = 3 , label = '\u7528\u6237\u540d' , error_messages = { 'max_length' : '\u7528\u6237\u540d\u6700\u957f\u516b\u4f4d' , 'min_length' : '\u7528\u6237\u540d\u6700\u77ed\u4e09\u4f4d' , 'required' : '\u7528\u6237\u540d\u4e0d\u80fd\u4e3a\u7a7a' , }) # password\u5b57\u6bb5 \u6700\u591a\u516b\u4f4d\uff0c \u6700\u5c11\u4e09\u4f4d password = forms . CharField ( max_length = 8 , min_length = 3 , label = '\u5bc6\u7801' , error_messages = { 'max_length' : '\u5bc6\u7801\u6700\u957f\u516b\u4f4d' , 'min_length' : '\u5bc6\u7801\u6700\u77ed\u4e09\u4f4d' , 'required' : '\u5bc6\u7801\u4e0d\u80fd\u4e3a\u7a7a' , }) re_password = forms . CharField ( max_length = 8 , min_length = 3 , label = '\u786e\u8ba4\u5bc6\u7801' , error_messages = { 'max_length' : '\u786e\u8ba4\u5bc6\u7801\u6700\u957f\u516b\u4f4d' , 'min_length' : '\u786e\u8ba4\u5bc6\u7801\u6700\u77ed\u4e09\u4f4d' , 'required' : '\u786e\u8ba4\u5bc6\u7801\u4e0d\u80fd\u4e3a\u7a7a' , }) # \u6821\u9a8c\u5bc6\u7801 \u786e\u8ba4\u5bc6\u7801\u662f\u5426\u4e00\u81f4 def clean ( self ): password = self . cleaned_data . get ( 'password' ) re_password = self . cleaned_data . get ( 'password' ) if not password == re_password : self . add_error ( 're_password' , '\u4e24\u6b21\uff0c\u5bc6\u7801\u4e0d\u4e00\u81f4' ) return self . cleaned_data","title":"\u5168\u5c40\u94a9\u5b50"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/16%20django%E4%B9%8Bforms%E7%BB%84%E4%BB%B6/#_3","text":"\u6211\u4eec\u5728Fom\u7c7b\u4e2d\u5b9a\u4e49 clean_\u5b57\u6bb5\u540d() \u65b9\u6cd5\uff0c\u5c31\u80fd\u591f\u5b9e\u73b0\u5bf9\u7279\u5b9a\u5b57\u6bb5\u8fdb\u884c\u6821\u9a8c\u3002 class MyForm ( forms . Form ): # username\u5b57\u6bb5 \u6700\u591a\u516b\u4f4d\uff0c \u6700\u5c11\u4e09\u4f4d username = forms . CharField ( max_length = 8 , min_length = 3 , label = '\u7528\u6237\u540d' , error_messages = { 'max_length' : '\u7528\u6237\u540d\u6700\u957f\u516b\u4f4d' , 'min_length' : '\u7528\u6237\u540d\u6700\u77ed\u4e09\u4f4d' , 'required' : '\u7528\u6237\u540d\u4e0d\u80fd\u4e3a\u7a7a' , }) # password\u5b57\u6bb5 \u6700\u591a\u516b\u4f4d\uff0c \u6700\u5c11\u4e09\u4f4d password = forms . CharField ( max_length = 8 , min_length = 3 , label = '\u5bc6\u7801' , error_messages = { 'max_length' : '\u5bc6\u7801\u6700\u957f\u516b\u4f4d' , 'min_length' : '\u5bc6\u7801\u6700\u77ed\u4e09\u4f4d' , 'required' : '\u5bc6\u7801\u4e0d\u80fd\u4e3a\u7a7a' , }) re_password = forms . CharField ( max_length = 8 , min_length = 3 , label = '\u786e\u8ba4\u5bc6\u7801' , error_messages = { 'max_length' : '\u786e\u8ba4\u5bc6\u7801\u6700\u957f\u516b\u4f4d' , 'min_length' : '\u786e\u8ba4\u5bc6\u7801\u6700\u77ed\u4e09\u4f4d' , 'required' : '\u786e\u8ba4\u5bc6\u7801\u4e0d\u80fd\u4e3a\u7a7a' , }) # \u6821\u9a8c\u7528\u6237\u540d\u4e2d\u4e0d\u80fd\u6709666 def clean_username ( self ): username = self . cleaned_data . get ( 'username' ) if '666' in username : # \u7ed9username\u5b57\u6bb5\u6dfb\u52a0\u9519\u8bef\u4fe1\u606f self . add_error ( 'username' , '666\u662f\u4e0d\u5b58\u5728\u7684' ) # \u5c06username\u8fd4\u56de\u51fa\u53bb return username","title":"\u5c40\u90e8\u94a9\u5b50"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/16%20django%E4%B9%8Bforms%E7%BB%84%E4%BB%B6/#forms_4","text":"","title":"forms\u7ec4\u4ef6\u8865\u5145\u77e5\u8bc6\u70b9"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/16%20django%E4%B9%8Bforms%E7%BB%84%E4%BB%B6/#_4","text":"label input\u5bf9\u5e94\u7684\u63d0\u793a\u4fe1\u606f initial \u9ed8\u8ba4\u503c required \u9ed8\u8ba4\u4e3aTrue \u63a7\u5236\u5b57\u6bb5\u662f\u5426\u5fc5\u586b class MyForm ( forms . Form ): # username\u5b57\u6bb5 \u6700\u591a\u516b\u4f4d\uff0c \u6700\u5c11\u4e09\u4f4d username = forms . CharField ( max_length = 8 , min_length = 3 , label = '\u7528\u6237\u540d' , initial = '\u9ed8\u8ba4\u503c' , error_messages = { 'max_length' : '\u7528\u6237\u540d\u6700\u957f\u516b\u4f4d' , 'min_length' : '\u7528\u6237\u540d\u6700\u77ed\u4e09\u4f4d' , 'required' : '\u7528\u6237\u540d\u4e0d\u80fd\u4e3a\u7a7a' , }, required = False ) widget \u7ed9input\u6846\u8bbe\u7f6e\u6837\u5f0f\u53ca\u5c5e\u6027 password = forms . CharField ( max_length = 8 , min_length = 3 , label = '\u5bc6\u7801' , error_messages = { 'max_length' : '\u5bc6\u7801\u6700\u957f\u516b\u4f4d' , 'min_length' : '\u5bc6\u7801\u6700\u77ed\u4e09\u4f4d' , 'required' : '\u5bc6\u7801\u4e0d\u80fd\u4e3a\u7a7a' , }, widget = forms . widgets . PasswordInput () # \u8fd9\u4e2apassword\u5b57\u6bb5\u662f\u5bc6\u6587\u7684 username = forms . CharField ( max_length = 8 , min_length = 3 , label = '\u7528\u6237\u540d' , initial = '\u9ed8\u8ba4\u503c' , error_messages = { 'max_length' : '\u7528\u6237\u540d\u6700\u957f\u516b\u4f4d' , 'min_length' : '\u7528\u6237\u540d\u6700\u77ed\u4e09\u4f4d' , 'required' : '\u7528\u6237\u540d\u4e0d\u80fd\u4e3a\u7a7a' , }, required = False , widget = forms . widgets . TextInput ({ 'class' : 'form-control c1 c2' , 'username' : 'cwz' }) )","title":"\u5176\u4ed6\u5b57\u6bb5\u53c2\u6570"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/16%20django%E4%B9%8Bforms%E7%BB%84%E4%BB%B6/#error_messages","text":"\u91cd\u5199\u9519\u8bef\u4fe1\u606f\u3002 class LoginForm ( forms . Form ): username = forms . CharField ( min_length = 8 , label = \"\u7528\u6237\u540d\" , initial = \"\u5f20\u4e09\" , error_messages = { \"required\" : \"\u4e0d\u80fd\u4e3a\u7a7a\" , \"invalid\" : \"\u683c\u5f0f\u9519\u8bef\" , \"min_length\" : \"\u7528\u6237\u540d\u6700\u77ed8\u4f4d\" } ) pwd = forms . CharField ( min_length = 6 , label = \"\u5bc6\u7801\" )","title":"error_messages"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/16%20django%E4%B9%8Bforms%E7%BB%84%E4%BB%B6/#password","text":"class LoginForm ( forms . Form ): ... pwd = forms . CharField ( min_length = 6 , label = \"\u5bc6\u7801\" , widget = forms . widgets . PasswordInput ( attrs = { 'class' : 'c1' }, render_value = True ) )","title":"password"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/16%20django%E4%B9%8Bforms%E7%BB%84%E4%BB%B6/#radioselect","text":"\u5355radio\u503c\u4e3a\u5b57\u7b26\u4e32 class LoginForm ( forms . Form ): username = forms . CharField ( min_length = 8 , label = \"\u7528\u6237\u540d\" , initial = \"\u5f20\u4e09\" , error_messages = { \"required\" : \"\u4e0d\u80fd\u4e3a\u7a7a\" , \"invalid\" : \"\u683c\u5f0f\u9519\u8bef\" , \"min_length\" : \"\u7528\u6237\u540d\u6700\u77ed8\u4f4d\" } ) pwd = forms . CharField ( min_length = 6 , label = \"\u5bc6\u7801\" ) gender = forms . fields . ChoiceField ( choices = (( 1 , \"\u7537\" ), ( 2 , \"\u5973\" ), ( 3 , \"\u4fdd\u5bc6\" )), label = \"\u6027\u522b\" , initial = 3 , widget = forms . widgets . RadioSelect () )","title":"radioSelect"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/16%20django%E4%B9%8Bforms%E7%BB%84%E4%BB%B6/#select","text":"class LoginForm ( forms . Form ): ... hobby = forms . ChoiceField ( choices = (( 1 , \"\u7bee\u7403\" ), ( 2 , \"\u8db3\u7403\" ), ( 3 , \"\u53cc\u8272\u7403\" ), ), label = \"\u7231\u597d\" , initial = 3 , widget = forms . widgets . Select () )","title":"\u5355\u9009Select"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/16%20django%E4%B9%8Bforms%E7%BB%84%E4%BB%B6/#select_1","text":"class LoginForm ( forms . Form ): ... hobby = forms . MultipleChoiceField ( choices = (( 1 , \"\u7bee\u7403\" ), ( 2 , \"\u8db3\u7403\" ), ( 3 , \"\u53cc\u8272\u7403\" ), ), label = \"\u7231\u597d\" , initial = [ 1 , 3 ], widget = forms . widgets . SelectMultiple () )","title":"\u591a\u9009Select"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/16%20django%E4%B9%8Bforms%E7%BB%84%E4%BB%B6/#checkbox","text":"class LoginForm ( forms . Form ): ... keep = forms . ChoiceField ( label = \"\u662f\u5426\u8bb0\u4f4f\u5bc6\u7801\" , initial = \"checked\" , widget = forms . widgets . CheckboxInput () )","title":"\u5355\u9009checkbox"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/16%20django%E4%B9%8Bforms%E7%BB%84%E4%BB%B6/#checkbox_1","text":"class LoginForm ( forms . Form ): ... hobby = forms . MultipleChoiceField ( choices = (( 1 , \"\u7bee\u7403\" ), ( 2 , \"\u8db3\u7403\" ), ( 3 , \"\u53cc\u8272\u7403\" ),), label = \"\u7231\u597d\" , initial = [ 1 , 3 ], widget = forms . widgets . CheckboxSelectMultiple () )","title":"\u591a\u9009checkbox"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/16%20django%E4%B9%8Bforms%E7%BB%84%E4%BB%B6/#choice","text":"\u5728\u4f7f\u7528\u9009\u62e9\u6807\u7b7e\u65f6\uff0c\u9700\u8981\u6ce8\u610fchoices\u7684\u9009\u9879\u53ef\u4ee5\u914d\u7f6e\u4ece\u6570\u636e\u5e93\u4e2d\u83b7\u53d6\uff0c\u4f46\u662f\u7531\u4e8e\u662f\u9759\u6001\u5b57\u6bb5 \u83b7\u53d6\u7684\u503c\u65e0\u6cd5\u5b9e\u65f6\u66f4\u65b0\uff0c\u9700\u8981\u91cd\u5199\u6784\u9020\u65b9\u6cd5\u4ece\u800c\u5b9e\u73b0choice\u5b9e\u65f6\u66f4\u65b0 \u65b9\u5f0f\u4e00 from django.forms import Form from django.forms import widgets from django.forms import fields class MyForm ( Form ): user = fields . ChoiceField ( # choices=((1, '\u4e0a\u6d77'), (2, '\u5317\u4eac'),), initial = 2 , widget = widgets . Select ) def __init__ ( self , * args , ** kwargs ): super ( MyForm , self ) . __init__ ( * args , ** kwargs ) # self.fields['user'].choices = ((1, '\u4e0a\u6d77'), (2, '\u5317\u4eac'),) # \u6216 self . fields [ 'user' ] . choices = models . Classes . objects . all () . values_list ( 'id' , 'caption' ) \u65b9\u5f0f\u4e8c from django import forms from django.forms import fields from django.forms import models as form_model class FInfo ( forms . Form ): authors = form_model . ModelMultipleChoiceField ( queryset = models . NNewType . objects . all ()) # \u591a\u9009 # authors = form_model.ModelChoiceField(queryset=models.NNewType.objects.all()) # \u5355\u9009","title":"choice\u5b57\u6bb5\u6ce8\u610f\u4e8b\u9879"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/17%20django%E4%B9%8Bcookies%E5%92%8Csession%E7%BB%84%E4%BB%B6/","text":"django\u4e4bcookies\u548csession\u7ec4\u4ef6 # cookie\u4e0esession # cookie\u4ecb\u7ecd # HTTP\u534f\u8bae \u662f\u65e0\u72b6\u6001\u7684\uff0c\u6bcf\u6b21\u8bf7\u6c42\u8fde\u63a5\u90fd\u662f\u4e0d\u4fdd\u5b58\u5ba2\u6237\u7aef\u72b6\u6001\u7684\uff0ccookie\u5c31\u662f\u7528\u6765\u4fdd\u5b58\u5ba2\u6237\u7aef\u72b6\u6001\u7684\u3002\u8bd5\u60f3\u4e00\u4e0b\uff0c\u5982\u679c\u6bcf\u6b21\u767b\u5f55\u4e00\u4e2a\u7f51\u7ad9\uff0c\u6bcf\u6b21\u8df3\u8f6c\u9875\u9762\u90fd\u4e0d\u4f1a\u8bb0\u5f55\u6211\u7684\u4fe1\u606f\uff0c\u90fd\u8981\u6c42\u91cd\u65b0\u8f93\u5165\u5bc6\u7801\uff0c\u662f\u4e0d\u662f\u5f88\u4e0d\u723d\uff1f Cookie\u5177\u4f53\u6307\u7684\u662f\u4e00\u6bb5\u5c0f\u4fe1\u606f\uff0c\u5b83\u662f\u670d\u52a1\u5668\u53d1\u9001\u51fa\u6765\u5b58\u50a8\u5728\u6d4f\u89c8\u5668\u4e0a\u7684\u4e00\u7ec4\u7ec4\u952e\u503c\u5bf9\uff0c\u4e0b\u6b21\u8bbf\u95ee\u670d\u52a1\u5668\u65f6\u6d4f\u89c8\u5668\u4f1a\u81ea\u52a8\u643a\u5e26\u8fd9\u4e9b\u952e\u503c\u5bf9\uff0c\u4ee5\u4fbf\u670d\u52a1\u5668\u63d0\u53d6\u6709\u7528\u4fe1\u606f\u3002 \u7b80\u5355\u6765\u8bf4\uff0c \u5c31\u662f\u4fdd\u5b58\u5728\u5ba2\u6237\u7aef\u6d4f\u89c8\u5668\u7684\u952e\u503c\u5bf9\u3002 \u5f53\u4f60\u767b\u5f55\u4e00\u4e2a\u7f51\u7ad9\u540e\uff0c\u670d\u52a1\u7aef\u4f1a\u628a\u4f60\u7684\u7528\u6237\u540d\u3001\u5bc6\u7801\u7b49\u4fe1\u606f\u53d1\u5230\u4f60\u7684\u6d4f\u89c8\u5668\u4e0a\u4fdd\u5b58\u8d77\u6765\uff0c\u4e0b\u6b21\u518d\u8bbf\u95ee\u8bf7\u6c42\u7684\u65f6\u5019\uff0c\u6d4f\u89c8\u5668\u4f1a\u81ea\u52a8\u5e26\u4e0a\u8fd9\u4e9bcookie\uff0c\u670d\u52a1\u5668\u5c31\u4f1a\u8ba4\u8bc6\u3002 session\u4ecb\u7ecd # \u4e0a\u8ff0\u7684cookie\u672c\u8eab\u4fdd\u5b58\u5728\u5ba2\u6237\u7aef\uff0c\u5bb9\u6613\u88ab\u62e6\u622a\uff0c\u4e0d\u662f\u5f88\u5b89\u5168\uff0c\u6240\u4ee5\u5c31\u6709\u4e86session\u3002 \u6d4f\u89c8\u5668\u767b\u5f55\u7f51\u7ad9\u6210\u529f\u540e\uff0c\u670d\u52a1\u5668\u4f1a\u6839\u636e\u67d0\u79cd\u7b97\u6cd5\u751f\u6210\u4e00\u4e2a\u968f\u673a\u5b57\u7b26\u4e32\uff0c\u53d1\u7ed9\u6d4f\u89c8\u5668\uff0c\u6d4f\u89c8\u5668\u4fdd\u5b58\u5728\u672c\u5730\u3002\u670d\u52a1\u5668\u8bb0\u5f55\u4e86\u968f\u673a\u5b57\u7b26\u4e32\u4e0e\u7528\u6237\u4fe1\u606f\u7684\u5bf9\u5e94\u5173\u7cfb\uff0c\u4e4b\u540e\u6d4f\u89c8\u5668 \u518d\u6765\u8bbf\u95ee\uff0c\u5c31\u5e26\u7740\u5b57\u7b26\u4e32\u5c31\u6765\u4e86\uff0c\u7136\u540e\u670d\u52a1\u5668\u8bc6\u522b\u8fd9\u4e2a\u5b57\u7b26\u4e32\u6bd4\u5bf9 \u5bf9\u5e94\u5173\u7cfb\uff0c\u5982\u679c\u6709\u8fd9\u4e2a\u5173\u7cfb\uff0c\u5c31\u77e5\u9053\u662f\u4f60\u6765\u4e86\u3002 token # session\u867d\u7136\u76f8\u5bf9\u5b89\u5168\uff0c\u6570\u636e\u4fdd\u5b58\u5728\u670d\u52a1\u7aef\uff0c\u4e00\u4e2a\u7528\u6237\u4fdd\u5b58\u4e00\u4efd\uff0c\u591a\u4e2a\u7528\u6237\u4fdd\u5b58\u591a\u4efd\uff0c\u4e00\u65e6\u7528\u6237\u91cf\u975e\u5e38\u5927\uff0c\u4f1a\u5360\u7528\u670d\u52a1\u7aef\u5927\u91cf\u7684\u8d44\u6e90\uff0c\u5360\u7528\u670d\u52a1\u5668\u786c\u76d8\u7a7a\u95f4\u3002 \u6240\u4ee5\u5c31\u6709\u4e86token\uff0c\u5148\u63d0\u524d\u89c4\u5b9a\u597d\u52a0\u5bc6\u7b97\u6cd5\u3002\u5f53\u7528\u6237\u6765\u7684\u65f6\u5019\uff0c\u6bd4\u5982\u8bf4username\uff0c\u5c31\u4f1a\u7528\u52a0\u5bc6\u7b97\u6cd5\u5bf9username\u751f\u6210\u4e00\u4e2a\u968f\u673a\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u628ausername+\u968f\u673a\u5b57\u7b26\u4e32\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\u4fdd\u5b58\u3002\u5f53\u8fd9\u4e2a\u7528\u6237\u518d\u6765\u7684\u65f6\u5019\uff0c\u670d\u52a1\u5668\u4f1a\u62ff\u5230username\u518d\u53bb\u7528\u52a0\u5bc6\u7b97\u6cd5\u52a0\u5bc6\uff0c\u5f97\u5230\u7684\u968f\u673a\u5b57\u7b26\u4e32\u4e0e\u4fdd\u5b58\u5728\u6d4f\u89c8\u5668\u672c\u5730\u7684\u5b57\u7b26\u4e32\u505a\u6bd4\u5bf9\uff0c\u5224\u65ad\u662f\u5426\u662f\u5408\u6cd5\u7528\u6237\u3002 django\u64cd\u4f5ccookie # \u8bbe\u7f6ecookie # obj = HttpResponse () # \u5229\u7528obj\u5bf9\u8c61\u624d\u53ef\u4ee5\u64cd\u4f5ccookie return obj obj . set_cookie ( 'k1' , 'v1' ) # \u544a\u8bc9\u6d4f\u89c8\u5668\u8bbe\u7f6e\u952e\u503c\u5bf9 \u8bbe\u7f6ecookie\u8fc7\u671f\u65f6\u95f4\uff1a obj . set_cookie ( 'k1' , 'v1' , max_age = 3 ) obj . set_cookie ( 'k1' , 'v1' , expires = 3 ) # expires\u53c2\u6570 \u662f\u4e3aIE\u6d4f\u89c8\u5668\u51c6\u5907\u7528\u7684 cookie\u8d85\u65f6\u65f6\u95f4\u662f\u4ee5\u79d2 \u4f5c\u4e3a\u5355\u4f4d\u7684 \u4e00\u4e9b\u53c2\u6570\uff1a key, \u952e value='', \u503c max_age=None, \u8d85\u65f6\u65f6\u95f4 expires=None, \u8d85\u65f6\u65f6\u95f4(IE requires expires, so set it if hasn't been already.) path='/', Cookie\u751f\u6548\u7684\u8def\u5f84\uff0c/ \u8868\u793a\u6839\u8def\u5f84\uff0c\u7279\u6b8a\u7684\uff1a\u6839\u8def\u5f84\u7684cookie\u53ef\u4ee5\u88ab\u4efb\u4f55url\u7684\u9875\u9762\u8bbf\u95ee domain=None, Cookie\u751f\u6548\u7684\u57df\u540d secure=False, https\u4f20\u8f93 httponly=False \u53ea\u80fdhttp\u534f\u8bae\u4f20\u8f93\uff0c\u65e0\u6cd5\u88abJavaScript\u83b7\u53d6\uff08\u4e0d\u662f\u7edd\u5bf9\uff0c\u5e95\u5c42\u6293\u5305\u53ef\u4ee5\u83b7\u53d6\u5230\u4e5f\u53ef\u4ee5\u88ab\u8986\u76d6 \u83b7\u53d6cookie # request . COOKIES . get ( 'k1' ) # \u83b7\u53d6\u6d4f\u89c8\u5668\u643a\u5e26\u7684cookie\u503c \u7b80\u5355\u7684\u6d4b\u8bd5\uff1a from django.shortcuts import render , HttpResponse , redirect # Create your views here. def login ( request ): if request . method == 'POST' : username = request . POST . get ( 'username' ) password = request . POST . get ( 'password' ) if username == 'cwz' and password == '123' : obj = redirect ( '/home/' ) obj . set_cookie ( 'whoami' , 'cwz' ) return obj return render ( request , 'login.html' ) def home ( request ): if request . COOKIES . get ( 'whoami' ): return HttpResponse ( '\u53ea\u6709\u767b\u5f55\u6210\u529f\u624d\u80fd\u5230\u8fd9\u513f' ) return redirect ( '/login/' ) \u5220\u9664cookie # \u7528delete_cookie def logout ( request ): obj = redirect ( '/login/' ) obj . delete_cookie ( 'whoami' ) return obj \u57fa\u4e8ecookie\u5b9e\u73b0\u7684\u767b\u5f55\u8ba4\u8bc1 # request . get_full_path () # \u83b7\u53d6url\u4ee5\u53caget\u643a\u5e26\u7684\u53c2\u6570 request . path_info # \u83b7\u53d6\u7528\u6237\u8f93\u5165\u7684url from django.shortcuts import render , HttpResponse , redirect # Create your views here. def login ( request ): if request . method == 'POST' : username = request . POST . get ( 'username' ) password = request . POST . get ( 'password' ) if username == 'cwz' and password == '123' : old_path = request . GET . get ( 'next' ) if old_path : obj = redirect ( old_path ) else : obj = redirect ( '/home/' ) obj . set_cookie ( 'whoami' , 'cwz' ) return obj return render ( request , 'login.html' ) from functools import wraps def auth_login ( func ): @wraps ( func ) def inner ( request , * args , ** kwargs ): res = func ( request , * args , ** kwargs ) if request . COOKIES . get ( 'whoami' ): # print(request.get_full_path()) # print(request.path_info) return res else : current_path = request . path_info return redirect ( '/login/?next= %s ' % current_path ) # \u6ca1\u6709\u767b\u5f55\u7684\u7528\u6237\uff0c\u8df3\u8f6c\u5230\u767b\u5f55\u9875\u9762 return inner @auth_login def home ( request ): if request . COOKIES . get ( 'whoami' ): return HttpResponse ( '\u53ea\u6709\u767b\u5f55\u6210\u529f\u624d\u80fd\u5230\u8fd9\u513f' ) return redirect ( '/login/' ) @auth_login def index ( request ): return HttpResponse ( 'index\u9875\u9762\uff0c\u767b\u5f55\u4e4b\u540e\u624d\u80fd\u8bbf\u95ee' ) @auth_login def reg ( request ): return HttpResponse ( 'reg\u9875\u9762\uff0c\u767b\u5f55\u4e4b\u540e\u624d\u80fd\u8bbf\u95ee' ) @auth_login def logout ( request ): obj = redirect ( '/login/' ) obj . delete_cookie ( 'whoami' ) return obj django\u64cd\u4f5csession # django\u4e2dsession\u65b9\u6cd5 # # \u83b7\u53d6\u3001\u8bbe\u7f6e\u3001\u5220\u9664Session\u4e2d\u6570\u636e request . session [ 'k1' ] request . session . get ( 'k1' , None ) request . session [ 'k1' ] = 123 request . session . setdefault ( 'k1' , 123 ) # \u5b58\u5728\u5219\u4e0d\u8bbe\u7f6e del request . session [ 'k1' ] # \u6240\u6709 \u952e\u3001\u503c\u3001\u952e\u503c\u5bf9 request . session . keys () request . session . values () request . session . items () request . session . iterkeys () request . session . itervalues () request . session . iteritems () # \u4f1a\u8bddsession\u7684key request . session . session_key # \u5c06\u6240\u6709Session\u5931\u6548\u65e5\u671f\u5c0f\u4e8e\u5f53\u524d\u65e5\u671f\u7684\u6570\u636e\u5220\u9664 request . session . clear_expired () # \u68c0\u67e5\u4f1a\u8bddsession\u7684key\u5728\u6570\u636e\u5e93\u4e2d\u662f\u5426\u5b58\u5728 request . session . exists ( \"session_key\" ) # \u5220\u9664\u5f53\u524d\u4f1a\u8bdd\u7684\u6240\u6709Session\u6570\u636e request . session . delete () \u3000\u3000 # \u5220\u9664\u5f53\u524d\u7684\u4f1a\u8bdd\u6570\u636e\u5e76\u5220\u9664\u4f1a\u8bdd\u7684Cookie\u3002 request . session . flush () \u8fd9\u7528\u4e8e\u786e\u4fdd\u524d\u9762\u7684\u4f1a\u8bdd\u6570\u636e\u4e0d\u53ef\u4ee5\u518d\u6b21\u88ab\u7528\u6237\u7684\u6d4f\u89c8\u5668\u8bbf\u95ee \u4f8b\u5982 \uff0c django . contrib . auth . logout () \u51fd\u6570\u4e2d\u5c31\u4f1a\u8c03\u7528\u5b83 \u3002 # \u8bbe\u7f6e\u4f1a\u8bddSession\u548cCookie\u7684\u8d85\u65f6\u65f6\u95f4 request . session . set_expiry ( value ) * \u5982\u679cvalue\u662f\u4e2a\u6574\u6570 \uff0c session\u4f1a\u5728\u4e9b\u79d2\u6570\u540e\u5931\u6548 \u3002 * \u5982\u679cvalue\u662f\u4e2adatatime\u6216timedelta \uff0c session\u5c31\u4f1a\u5728\u8fd9\u4e2a\u65f6\u95f4\u540e\u5931\u6548 \u3002 * \u5982\u679cvalue\u662f0 , \u7528\u6237\u5173\u95ed\u6d4f\u89c8\u5668session\u5c31\u4f1a\u5931\u6548 \u3002 * \u5982\u679cvalue\u662fNone , session\u4f1a\u4f9d\u8d56\u5168\u5c40session\u5931\u6548\u7b56\u7565 \u3002 \u6ce8\u610f\u4e8b\u9879\uff1a \u7531\u4e8esession\u662f\u4fdd\u5b58\u5728\u670d\u52a1\u5668\u6570\u636e\u5e93\u7684\uff0c\u6240\u4ee5django\u5728\u64cd\u4f5csession\u65f6\u8981\u5148\u6267\u884c\u6570\u636e\u5e93\u8fc1\u79fb\u547d\u4ee4\uff0c \u751f\u6210django_session\u8868 * django \u9ed8\u8ba4\u7684session\u5931\u6548\u65f6\u95f4\u662f14\u5929 * \u8bbe\u7f6esession # request . session [ 'k1' ] = 'v1' django\u5185\u90e8\u81ea\u52a8\u8c03\u7528\u7b97\u6cd5\u751f\u6210\u4e00\u4e2a\u968f\u673a\u5b57\u7b26\u4e32 \u5728django_session\u6dfb\u52a0\u6570\u636e\uff0c \u6570\u636e\u4e5f\u662f\u52a0\u5bc6\u5904\u7406 \u5c06\u4ea7\u751f\u7684\u968f\u673a\u5b57\u7b26\u4e32\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\uff0c\u8ba9\u6d4f\u89c8\u5668\u4fdd\u5b58\uff0c \u5b57\u7b26\u4e32\u7684\u5f62\u5f0f\u4e3a sessionid : \u968f\u673a\u5b57\u7b26\u4e32 \u83b7\u53d6session\u503c # def get_session ( request ): res = request . session . get ( 'k1' ) print ( res ) return HttpResponse ( '\u83b7\u53d6\u6210\u529f' ) django\u5185\u90e8\u5904\u7406\u7684\u4e8b\u60c5 django\u5185\u90e8\u4f1a\u81ea\u52a8\u53bb\u8bf7\u6c42\u5934\u91cc\u9762\u83b7\u53d6cookie \u62ff\u5230sessionid\u6240\u5bf9\u5e94\u7684\u968f\u673a\u5b57\u7b26\u4e32\u53bbdjango_session\u8868\u4e2d\u6bd4\u5bf9 \u5982\u679c\u6bd4\u5bf9\u4e0a\u4e86\uff0c\u4f1a\u5c06\u968f\u673a\u5b57\u7b26\u4e32\u5bf9\u5e94\u7684\u503c\u53d6\u51fa\u6765\uff0c\u653e\u5728request.session\u4e2d\u3002 \u5220\u9664session # request . session . delete () # \u5ba2\u6237\u7aef\u4e0e\u670d\u52a1\u7aef\u7684session\u90fd\u4f1a\u5220\u9664 request . session . flush () # \u5efa\u8bae\u4f7f\u7528 \u5220\u9664session\u53ea\u4f1a\u6839\u636e\u6d4f\u89c8\u5668\u7684\u4e0d\u540c\u5220\u51fa\u5bf9\u5e94\u7684\u6570\u636e \u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4 # request . session . set_expiry ( value ) # \u5982\u679cvalue\u662f\u4e2a\u6574\u6570\uff0csession\u4f1a\u5728\u4e9b\u79d2\u6570\u540e\u5931\u6548\u3002 # \u5982\u679cvalue\u662f\u4e2adatatime\u6216timedelta\uff0csession\u5c31\u4f1a\u5728\u8fd9\u4e2a\u65f6\u95f4\u540e\u5931\u6548\u3002 # \u5982\u679cvalue\u662f0,\u7528\u6237\u5173\u95ed\u6d4f\u89c8\u5668session\u5c31\u4f1a\u5931\u6548\u3002 # \u5982\u679cvalue\u662fNone,session\u4f1a\u4f9d\u8d56\u5168\u5c40session\u5931\u6548\u7b56\u7565\u3002 django\u4e2dsession\u914d\u7f6e # Django\u4e2d\u9ed8\u8ba4\u652f\u6301Session\uff0c\u5176\u5185\u90e8\u63d0\u4f9b\u4e865\u79cd\u7c7b\u578b\u7684Session\u3002 1. \u6570\u636e\u5e93Session SESSION_ENGINE = 'django.contrib.sessions.backends.db' # \u5f15\u64ce\uff08\u9ed8\u8ba4\uff09 2. \u7f13\u5b58Session SESSION_ENGINE = 'django.contrib.sessions.backends.cache' # \u5f15\u64ce SESSION_CACHE_ALIAS = 'default' # \u4f7f\u7528\u7684\u7f13\u5b58\u522b\u540d\uff08\u9ed8\u8ba4\u5185\u5b58\u7f13\u5b58\uff0c\u4e5f\u53ef\u4ee5\u662fmemcache\uff09\uff0c\u6b64\u5904\u522b\u540d\u4f9d\u8d56\u7f13\u5b58\u7684\u8bbe\u7f6e 3. \u6587\u4ef6Session SESSION_ENGINE = 'django.contrib.sessions.backends.file' # \u5f15\u64ce SESSION_FILE_PATH = None # \u7f13\u5b58\u6587\u4ef6\u8def\u5f84\uff0c\u5982\u679c\u4e3aNone\uff0c\u5219\u4f7f\u7528tempfile\u6a21\u5757\u83b7\u53d6\u4e00\u4e2a\u4e34\u65f6\u5730\u5740tempfile.gettempdir() 4. \u7f13\u5b58 + \u6570\u636e\u5e93 SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db' # \u5f15\u64ce 5. \u52a0\u5bc6Cookie Session SESSION_ENGINE = 'django.contrib.sessions.backends.signed_cookies' # \u5f15\u64ce \u5176\u4ed6\u516c\u7528\u8bbe\u7f6e\u9879 \uff1a SESSION_COOKIE_NAME \uff1d \"sessionid\" # Session\u7684cookie\u4fdd\u5b58\u5728\u6d4f\u89c8\u5668\u4e0a\u65f6\u7684key\uff0c\u5373\uff1asessionid\uff1d\u968f\u673a\u5b57\u7b26\u4e32\uff08\u9ed8\u8ba4\uff09 SESSION_COOKIE_PATH \uff1d \"/\" # Session\u7684cookie\u4fdd\u5b58\u7684\u8def\u5f84\uff08\u9ed8\u8ba4\uff09 SESSION_COOKIE_DOMAIN = None # Session\u7684cookie\u4fdd\u5b58\u7684\u57df\u540d\uff08\u9ed8\u8ba4\uff09 SESSION_COOKIE_SECURE = False # \u662f\u5426Https\u4f20\u8f93cookie\uff08\u9ed8\u8ba4\uff09 SESSION_COOKIE_HTTPONLY = True # \u662f\u5426Session\u7684cookie\u53ea\u652f\u6301http\u4f20\u8f93\uff08\u9ed8\u8ba4\uff09 SESSION_COOKIE_AGE = 1209600 # Session\u7684cookie\u5931\u6548\u65e5\u671f\uff082\u5468\uff09\uff08\u9ed8\u8ba4\uff09 SESSION_EXPIRE_AT_BROWSER_CLOSE = False # \u662f\u5426\u5173\u95ed\u6d4f\u89c8\u5668\u4f7f\u5f97Session\u8fc7\u671f\uff08\u9ed8\u8ba4\uff09 SESSION_SAVE_EVERY_REQUEST = False # \u662f\u5426\u6bcf\u6b21\u8bf7\u6c42\u90fd\u4fdd\u5b58Session\uff0c\u9ed8\u8ba4\u4fee\u6539\u4e4b\u540e\u624d\u4fdd\u5b58\uff08\u9ed8\u8ba4\uff09 Django\u4e2dSession\u76f8\u5173\u8bbe\u7f6e","title":"17 django\u4e4bcookies\u548csession\u7ec4\u4ef6"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/17%20django%E4%B9%8Bcookies%E5%92%8Csession%E7%BB%84%E4%BB%B6/#djangocookiessession","text":"","title":"django\u4e4bcookies\u548csession\u7ec4\u4ef6"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/17%20django%E4%B9%8Bcookies%E5%92%8Csession%E7%BB%84%E4%BB%B6/#cookiesession","text":"","title":"cookie\u4e0esession"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/17%20django%E4%B9%8Bcookies%E5%92%8Csession%E7%BB%84%E4%BB%B6/#cookie","text":"HTTP\u534f\u8bae \u662f\u65e0\u72b6\u6001\u7684\uff0c\u6bcf\u6b21\u8bf7\u6c42\u8fde\u63a5\u90fd\u662f\u4e0d\u4fdd\u5b58\u5ba2\u6237\u7aef\u72b6\u6001\u7684\uff0ccookie\u5c31\u662f\u7528\u6765\u4fdd\u5b58\u5ba2\u6237\u7aef\u72b6\u6001\u7684\u3002\u8bd5\u60f3\u4e00\u4e0b\uff0c\u5982\u679c\u6bcf\u6b21\u767b\u5f55\u4e00\u4e2a\u7f51\u7ad9\uff0c\u6bcf\u6b21\u8df3\u8f6c\u9875\u9762\u90fd\u4e0d\u4f1a\u8bb0\u5f55\u6211\u7684\u4fe1\u606f\uff0c\u90fd\u8981\u6c42\u91cd\u65b0\u8f93\u5165\u5bc6\u7801\uff0c\u662f\u4e0d\u662f\u5f88\u4e0d\u723d\uff1f Cookie\u5177\u4f53\u6307\u7684\u662f\u4e00\u6bb5\u5c0f\u4fe1\u606f\uff0c\u5b83\u662f\u670d\u52a1\u5668\u53d1\u9001\u51fa\u6765\u5b58\u50a8\u5728\u6d4f\u89c8\u5668\u4e0a\u7684\u4e00\u7ec4\u7ec4\u952e\u503c\u5bf9\uff0c\u4e0b\u6b21\u8bbf\u95ee\u670d\u52a1\u5668\u65f6\u6d4f\u89c8\u5668\u4f1a\u81ea\u52a8\u643a\u5e26\u8fd9\u4e9b\u952e\u503c\u5bf9\uff0c\u4ee5\u4fbf\u670d\u52a1\u5668\u63d0\u53d6\u6709\u7528\u4fe1\u606f\u3002 \u7b80\u5355\u6765\u8bf4\uff0c \u5c31\u662f\u4fdd\u5b58\u5728\u5ba2\u6237\u7aef\u6d4f\u89c8\u5668\u7684\u952e\u503c\u5bf9\u3002 \u5f53\u4f60\u767b\u5f55\u4e00\u4e2a\u7f51\u7ad9\u540e\uff0c\u670d\u52a1\u7aef\u4f1a\u628a\u4f60\u7684\u7528\u6237\u540d\u3001\u5bc6\u7801\u7b49\u4fe1\u606f\u53d1\u5230\u4f60\u7684\u6d4f\u89c8\u5668\u4e0a\u4fdd\u5b58\u8d77\u6765\uff0c\u4e0b\u6b21\u518d\u8bbf\u95ee\u8bf7\u6c42\u7684\u65f6\u5019\uff0c\u6d4f\u89c8\u5668\u4f1a\u81ea\u52a8\u5e26\u4e0a\u8fd9\u4e9bcookie\uff0c\u670d\u52a1\u5668\u5c31\u4f1a\u8ba4\u8bc6\u3002","title":"cookie\u4ecb\u7ecd"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/17%20django%E4%B9%8Bcookies%E5%92%8Csession%E7%BB%84%E4%BB%B6/#session","text":"\u4e0a\u8ff0\u7684cookie\u672c\u8eab\u4fdd\u5b58\u5728\u5ba2\u6237\u7aef\uff0c\u5bb9\u6613\u88ab\u62e6\u622a\uff0c\u4e0d\u662f\u5f88\u5b89\u5168\uff0c\u6240\u4ee5\u5c31\u6709\u4e86session\u3002 \u6d4f\u89c8\u5668\u767b\u5f55\u7f51\u7ad9\u6210\u529f\u540e\uff0c\u670d\u52a1\u5668\u4f1a\u6839\u636e\u67d0\u79cd\u7b97\u6cd5\u751f\u6210\u4e00\u4e2a\u968f\u673a\u5b57\u7b26\u4e32\uff0c\u53d1\u7ed9\u6d4f\u89c8\u5668\uff0c\u6d4f\u89c8\u5668\u4fdd\u5b58\u5728\u672c\u5730\u3002\u670d\u52a1\u5668\u8bb0\u5f55\u4e86\u968f\u673a\u5b57\u7b26\u4e32\u4e0e\u7528\u6237\u4fe1\u606f\u7684\u5bf9\u5e94\u5173\u7cfb\uff0c\u4e4b\u540e\u6d4f\u89c8\u5668 \u518d\u6765\u8bbf\u95ee\uff0c\u5c31\u5e26\u7740\u5b57\u7b26\u4e32\u5c31\u6765\u4e86\uff0c\u7136\u540e\u670d\u52a1\u5668\u8bc6\u522b\u8fd9\u4e2a\u5b57\u7b26\u4e32\u6bd4\u5bf9 \u5bf9\u5e94\u5173\u7cfb\uff0c\u5982\u679c\u6709\u8fd9\u4e2a\u5173\u7cfb\uff0c\u5c31\u77e5\u9053\u662f\u4f60\u6765\u4e86\u3002","title":"session\u4ecb\u7ecd"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/17%20django%E4%B9%8Bcookies%E5%92%8Csession%E7%BB%84%E4%BB%B6/#token","text":"session\u867d\u7136\u76f8\u5bf9\u5b89\u5168\uff0c\u6570\u636e\u4fdd\u5b58\u5728\u670d\u52a1\u7aef\uff0c\u4e00\u4e2a\u7528\u6237\u4fdd\u5b58\u4e00\u4efd\uff0c\u591a\u4e2a\u7528\u6237\u4fdd\u5b58\u591a\u4efd\uff0c\u4e00\u65e6\u7528\u6237\u91cf\u975e\u5e38\u5927\uff0c\u4f1a\u5360\u7528\u670d\u52a1\u7aef\u5927\u91cf\u7684\u8d44\u6e90\uff0c\u5360\u7528\u670d\u52a1\u5668\u786c\u76d8\u7a7a\u95f4\u3002 \u6240\u4ee5\u5c31\u6709\u4e86token\uff0c\u5148\u63d0\u524d\u89c4\u5b9a\u597d\u52a0\u5bc6\u7b97\u6cd5\u3002\u5f53\u7528\u6237\u6765\u7684\u65f6\u5019\uff0c\u6bd4\u5982\u8bf4username\uff0c\u5c31\u4f1a\u7528\u52a0\u5bc6\u7b97\u6cd5\u5bf9username\u751f\u6210\u4e00\u4e2a\u968f\u673a\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u628ausername+\u968f\u673a\u5b57\u7b26\u4e32\u53d1\u9001\u7ed9\u6d4f\u89c8\u5668\u4fdd\u5b58\u3002\u5f53\u8fd9\u4e2a\u7528\u6237\u518d\u6765\u7684\u65f6\u5019\uff0c\u670d\u52a1\u5668\u4f1a\u62ff\u5230username\u518d\u53bb\u7528\u52a0\u5bc6\u7b97\u6cd5\u52a0\u5bc6\uff0c\u5f97\u5230\u7684\u968f\u673a\u5b57\u7b26\u4e32\u4e0e\u4fdd\u5b58\u5728\u6d4f\u89c8\u5668\u672c\u5730\u7684\u5b57\u7b26\u4e32\u505a\u6bd4\u5bf9\uff0c\u5224\u65ad\u662f\u5426\u662f\u5408\u6cd5\u7528\u6237\u3002","title":"token"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/17%20django%E4%B9%8Bcookies%E5%92%8Csession%E7%BB%84%E4%BB%B6/#djangocookie","text":"","title":"django\u64cd\u4f5ccookie"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/17%20django%E4%B9%8Bcookies%E5%92%8Csession%E7%BB%84%E4%BB%B6/#cookie_1","text":"obj = HttpResponse () # \u5229\u7528obj\u5bf9\u8c61\u624d\u53ef\u4ee5\u64cd\u4f5ccookie return obj obj . set_cookie ( 'k1' , 'v1' ) # \u544a\u8bc9\u6d4f\u89c8\u5668\u8bbe\u7f6e\u952e\u503c\u5bf9 \u8bbe\u7f6ecookie\u8fc7\u671f\u65f6\u95f4\uff1a obj . set_cookie ( 'k1' , 'v1' , max_age = 3 ) obj . set_cookie ( 'k1' , 'v1' , expires = 3 ) # expires\u53c2\u6570 \u662f\u4e3aIE\u6d4f\u89c8\u5668\u51c6\u5907\u7528\u7684 cookie\u8d85\u65f6\u65f6\u95f4\u662f\u4ee5\u79d2 \u4f5c\u4e3a\u5355\u4f4d\u7684 \u4e00\u4e9b\u53c2\u6570\uff1a key, \u952e value='', \u503c max_age=None, \u8d85\u65f6\u65f6\u95f4 expires=None, \u8d85\u65f6\u65f6\u95f4(IE requires expires, so set it if hasn't been already.) path='/', Cookie\u751f\u6548\u7684\u8def\u5f84\uff0c/ \u8868\u793a\u6839\u8def\u5f84\uff0c\u7279\u6b8a\u7684\uff1a\u6839\u8def\u5f84\u7684cookie\u53ef\u4ee5\u88ab\u4efb\u4f55url\u7684\u9875\u9762\u8bbf\u95ee domain=None, Cookie\u751f\u6548\u7684\u57df\u540d secure=False, https\u4f20\u8f93 httponly=False \u53ea\u80fdhttp\u534f\u8bae\u4f20\u8f93\uff0c\u65e0\u6cd5\u88abJavaScript\u83b7\u53d6\uff08\u4e0d\u662f\u7edd\u5bf9\uff0c\u5e95\u5c42\u6293\u5305\u53ef\u4ee5\u83b7\u53d6\u5230\u4e5f\u53ef\u4ee5\u88ab\u8986\u76d6","title":"\u8bbe\u7f6ecookie"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/17%20django%E4%B9%8Bcookies%E5%92%8Csession%E7%BB%84%E4%BB%B6/#cookie_2","text":"request . COOKIES . get ( 'k1' ) # \u83b7\u53d6\u6d4f\u89c8\u5668\u643a\u5e26\u7684cookie\u503c \u7b80\u5355\u7684\u6d4b\u8bd5\uff1a from django.shortcuts import render , HttpResponse , redirect # Create your views here. def login ( request ): if request . method == 'POST' : username = request . POST . get ( 'username' ) password = request . POST . get ( 'password' ) if username == 'cwz' and password == '123' : obj = redirect ( '/home/' ) obj . set_cookie ( 'whoami' , 'cwz' ) return obj return render ( request , 'login.html' ) def home ( request ): if request . COOKIES . get ( 'whoami' ): return HttpResponse ( '\u53ea\u6709\u767b\u5f55\u6210\u529f\u624d\u80fd\u5230\u8fd9\u513f' ) return redirect ( '/login/' )","title":"\u83b7\u53d6cookie"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/17%20django%E4%B9%8Bcookies%E5%92%8Csession%E7%BB%84%E4%BB%B6/#cookie_3","text":"\u7528delete_cookie def logout ( request ): obj = redirect ( '/login/' ) obj . delete_cookie ( 'whoami' ) return obj","title":"\u5220\u9664cookie"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/17%20django%E4%B9%8Bcookies%E5%92%8Csession%E7%BB%84%E4%BB%B6/#cookie_4","text":"request . get_full_path () # \u83b7\u53d6url\u4ee5\u53caget\u643a\u5e26\u7684\u53c2\u6570 request . path_info # \u83b7\u53d6\u7528\u6237\u8f93\u5165\u7684url from django.shortcuts import render , HttpResponse , redirect # Create your views here. def login ( request ): if request . method == 'POST' : username = request . POST . get ( 'username' ) password = request . POST . get ( 'password' ) if username == 'cwz' and password == '123' : old_path = request . GET . get ( 'next' ) if old_path : obj = redirect ( old_path ) else : obj = redirect ( '/home/' ) obj . set_cookie ( 'whoami' , 'cwz' ) return obj return render ( request , 'login.html' ) from functools import wraps def auth_login ( func ): @wraps ( func ) def inner ( request , * args , ** kwargs ): res = func ( request , * args , ** kwargs ) if request . COOKIES . get ( 'whoami' ): # print(request.get_full_path()) # print(request.path_info) return res else : current_path = request . path_info return redirect ( '/login/?next= %s ' % current_path ) # \u6ca1\u6709\u767b\u5f55\u7684\u7528\u6237\uff0c\u8df3\u8f6c\u5230\u767b\u5f55\u9875\u9762 return inner @auth_login def home ( request ): if request . COOKIES . get ( 'whoami' ): return HttpResponse ( '\u53ea\u6709\u767b\u5f55\u6210\u529f\u624d\u80fd\u5230\u8fd9\u513f' ) return redirect ( '/login/' ) @auth_login def index ( request ): return HttpResponse ( 'index\u9875\u9762\uff0c\u767b\u5f55\u4e4b\u540e\u624d\u80fd\u8bbf\u95ee' ) @auth_login def reg ( request ): return HttpResponse ( 'reg\u9875\u9762\uff0c\u767b\u5f55\u4e4b\u540e\u624d\u80fd\u8bbf\u95ee' ) @auth_login def logout ( request ): obj = redirect ( '/login/' ) obj . delete_cookie ( 'whoami' ) return obj","title":"\u57fa\u4e8ecookie\u5b9e\u73b0\u7684\u767b\u5f55\u8ba4\u8bc1"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/17%20django%E4%B9%8Bcookies%E5%92%8Csession%E7%BB%84%E4%BB%B6/#djangosession","text":"","title":"django\u64cd\u4f5csession"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/17%20django%E4%B9%8Bcookies%E5%92%8Csession%E7%BB%84%E4%BB%B6/#djangosession_1","text":"# \u83b7\u53d6\u3001\u8bbe\u7f6e\u3001\u5220\u9664Session\u4e2d\u6570\u636e request . session [ 'k1' ] request . session . get ( 'k1' , None ) request . session [ 'k1' ] = 123 request . session . setdefault ( 'k1' , 123 ) # \u5b58\u5728\u5219\u4e0d\u8bbe\u7f6e del request . session [ 'k1' ] # \u6240\u6709 \u952e\u3001\u503c\u3001\u952e\u503c\u5bf9 request . session . keys () request . session . values () request . session . items () request . session . iterkeys () request . session . itervalues () request . session . iteritems () # \u4f1a\u8bddsession\u7684key request . session . session_key # \u5c06\u6240\u6709Session\u5931\u6548\u65e5\u671f\u5c0f\u4e8e\u5f53\u524d\u65e5\u671f\u7684\u6570\u636e\u5220\u9664 request . session . clear_expired () # \u68c0\u67e5\u4f1a\u8bddsession\u7684key\u5728\u6570\u636e\u5e93\u4e2d\u662f\u5426\u5b58\u5728 request . session . exists ( \"session_key\" ) # \u5220\u9664\u5f53\u524d\u4f1a\u8bdd\u7684\u6240\u6709Session\u6570\u636e request . session . delete () \u3000\u3000 # \u5220\u9664\u5f53\u524d\u7684\u4f1a\u8bdd\u6570\u636e\u5e76\u5220\u9664\u4f1a\u8bdd\u7684Cookie\u3002 request . session . flush () \u8fd9\u7528\u4e8e\u786e\u4fdd\u524d\u9762\u7684\u4f1a\u8bdd\u6570\u636e\u4e0d\u53ef\u4ee5\u518d\u6b21\u88ab\u7528\u6237\u7684\u6d4f\u89c8\u5668\u8bbf\u95ee \u4f8b\u5982 \uff0c django . contrib . auth . logout () \u51fd\u6570\u4e2d\u5c31\u4f1a\u8c03\u7528\u5b83 \u3002 # \u8bbe\u7f6e\u4f1a\u8bddSession\u548cCookie\u7684\u8d85\u65f6\u65f6\u95f4 request . session . set_expiry ( value ) * \u5982\u679cvalue\u662f\u4e2a\u6574\u6570 \uff0c session\u4f1a\u5728\u4e9b\u79d2\u6570\u540e\u5931\u6548 \u3002 * \u5982\u679cvalue\u662f\u4e2adatatime\u6216timedelta \uff0c session\u5c31\u4f1a\u5728\u8fd9\u4e2a\u65f6\u95f4\u540e\u5931\u6548 \u3002 * \u5982\u679cvalue\u662f0 , \u7528\u6237\u5173\u95ed\u6d4f\u89c8\u5668session\u5c31\u4f1a\u5931\u6548 \u3002 * \u5982\u679cvalue\u662fNone , session\u4f1a\u4f9d\u8d56\u5168\u5c40session\u5931\u6548\u7b56\u7565 \u3002 \u6ce8\u610f\u4e8b\u9879\uff1a \u7531\u4e8esession\u662f\u4fdd\u5b58\u5728\u670d\u52a1\u5668\u6570\u636e\u5e93\u7684\uff0c\u6240\u4ee5django\u5728\u64cd\u4f5csession\u65f6\u8981\u5148\u6267\u884c\u6570\u636e\u5e93\u8fc1\u79fb\u547d\u4ee4\uff0c \u751f\u6210django_session\u8868 * django \u9ed8\u8ba4\u7684session\u5931\u6548\u65f6\u95f4\u662f14\u5929 *","title":"django\u4e2dsession\u65b9\u6cd5"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/17%20django%E4%B9%8Bcookies%E5%92%8Csession%E7%BB%84%E4%BB%B6/#session_1","text":"request . session [ 'k1' ] = 'v1' django\u5185\u90e8\u81ea\u52a8\u8c03\u7528\u7b97\u6cd5\u751f\u6210\u4e00\u4e2a\u968f\u673a\u5b57\u7b26\u4e32 \u5728django_session\u6dfb\u52a0\u6570\u636e\uff0c \u6570\u636e\u4e5f\u662f\u52a0\u5bc6\u5904\u7406 \u5c06\u4ea7\u751f\u7684\u968f\u673a\u5b57\u7b26\u4e32\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\uff0c\u8ba9\u6d4f\u89c8\u5668\u4fdd\u5b58\uff0c \u5b57\u7b26\u4e32\u7684\u5f62\u5f0f\u4e3a sessionid : \u968f\u673a\u5b57\u7b26\u4e32","title":"\u8bbe\u7f6esession"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/17%20django%E4%B9%8Bcookies%E5%92%8Csession%E7%BB%84%E4%BB%B6/#session_2","text":"def get_session ( request ): res = request . session . get ( 'k1' ) print ( res ) return HttpResponse ( '\u83b7\u53d6\u6210\u529f' ) django\u5185\u90e8\u5904\u7406\u7684\u4e8b\u60c5 django\u5185\u90e8\u4f1a\u81ea\u52a8\u53bb\u8bf7\u6c42\u5934\u91cc\u9762\u83b7\u53d6cookie \u62ff\u5230sessionid\u6240\u5bf9\u5e94\u7684\u968f\u673a\u5b57\u7b26\u4e32\u53bbdjango_session\u8868\u4e2d\u6bd4\u5bf9 \u5982\u679c\u6bd4\u5bf9\u4e0a\u4e86\uff0c\u4f1a\u5c06\u968f\u673a\u5b57\u7b26\u4e32\u5bf9\u5e94\u7684\u503c\u53d6\u51fa\u6765\uff0c\u653e\u5728request.session\u4e2d\u3002","title":"\u83b7\u53d6session\u503c"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/17%20django%E4%B9%8Bcookies%E5%92%8Csession%E7%BB%84%E4%BB%B6/#session_3","text":"request . session . delete () # \u5ba2\u6237\u7aef\u4e0e\u670d\u52a1\u7aef\u7684session\u90fd\u4f1a\u5220\u9664 request . session . flush () # \u5efa\u8bae\u4f7f\u7528 \u5220\u9664session\u53ea\u4f1a\u6839\u636e\u6d4f\u89c8\u5668\u7684\u4e0d\u540c\u5220\u51fa\u5bf9\u5e94\u7684\u6570\u636e","title":"\u5220\u9664session"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/17%20django%E4%B9%8Bcookies%E5%92%8Csession%E7%BB%84%E4%BB%B6/#_1","text":"request . session . set_expiry ( value ) # \u5982\u679cvalue\u662f\u4e2a\u6574\u6570\uff0csession\u4f1a\u5728\u4e9b\u79d2\u6570\u540e\u5931\u6548\u3002 # \u5982\u679cvalue\u662f\u4e2adatatime\u6216timedelta\uff0csession\u5c31\u4f1a\u5728\u8fd9\u4e2a\u65f6\u95f4\u540e\u5931\u6548\u3002 # \u5982\u679cvalue\u662f0,\u7528\u6237\u5173\u95ed\u6d4f\u89c8\u5668session\u5c31\u4f1a\u5931\u6548\u3002 # \u5982\u679cvalue\u662fNone,session\u4f1a\u4f9d\u8d56\u5168\u5c40session\u5931\u6548\u7b56\u7565\u3002","title":"\u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/17%20django%E4%B9%8Bcookies%E5%92%8Csession%E7%BB%84%E4%BB%B6/#djangosession_2","text":"Django\u4e2d\u9ed8\u8ba4\u652f\u6301Session\uff0c\u5176\u5185\u90e8\u63d0\u4f9b\u4e865\u79cd\u7c7b\u578b\u7684Session\u3002 1. \u6570\u636e\u5e93Session SESSION_ENGINE = 'django.contrib.sessions.backends.db' # \u5f15\u64ce\uff08\u9ed8\u8ba4\uff09 2. \u7f13\u5b58Session SESSION_ENGINE = 'django.contrib.sessions.backends.cache' # \u5f15\u64ce SESSION_CACHE_ALIAS = 'default' # \u4f7f\u7528\u7684\u7f13\u5b58\u522b\u540d\uff08\u9ed8\u8ba4\u5185\u5b58\u7f13\u5b58\uff0c\u4e5f\u53ef\u4ee5\u662fmemcache\uff09\uff0c\u6b64\u5904\u522b\u540d\u4f9d\u8d56\u7f13\u5b58\u7684\u8bbe\u7f6e 3. \u6587\u4ef6Session SESSION_ENGINE = 'django.contrib.sessions.backends.file' # \u5f15\u64ce SESSION_FILE_PATH = None # \u7f13\u5b58\u6587\u4ef6\u8def\u5f84\uff0c\u5982\u679c\u4e3aNone\uff0c\u5219\u4f7f\u7528tempfile\u6a21\u5757\u83b7\u53d6\u4e00\u4e2a\u4e34\u65f6\u5730\u5740tempfile.gettempdir() 4. \u7f13\u5b58 + \u6570\u636e\u5e93 SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db' # \u5f15\u64ce 5. \u52a0\u5bc6Cookie Session SESSION_ENGINE = 'django.contrib.sessions.backends.signed_cookies' # \u5f15\u64ce \u5176\u4ed6\u516c\u7528\u8bbe\u7f6e\u9879 \uff1a SESSION_COOKIE_NAME \uff1d \"sessionid\" # Session\u7684cookie\u4fdd\u5b58\u5728\u6d4f\u89c8\u5668\u4e0a\u65f6\u7684key\uff0c\u5373\uff1asessionid\uff1d\u968f\u673a\u5b57\u7b26\u4e32\uff08\u9ed8\u8ba4\uff09 SESSION_COOKIE_PATH \uff1d \"/\" # Session\u7684cookie\u4fdd\u5b58\u7684\u8def\u5f84\uff08\u9ed8\u8ba4\uff09 SESSION_COOKIE_DOMAIN = None # Session\u7684cookie\u4fdd\u5b58\u7684\u57df\u540d\uff08\u9ed8\u8ba4\uff09 SESSION_COOKIE_SECURE = False # \u662f\u5426Https\u4f20\u8f93cookie\uff08\u9ed8\u8ba4\uff09 SESSION_COOKIE_HTTPONLY = True # \u662f\u5426Session\u7684cookie\u53ea\u652f\u6301http\u4f20\u8f93\uff08\u9ed8\u8ba4\uff09 SESSION_COOKIE_AGE = 1209600 # Session\u7684cookie\u5931\u6548\u65e5\u671f\uff082\u5468\uff09\uff08\u9ed8\u8ba4\uff09 SESSION_EXPIRE_AT_BROWSER_CLOSE = False # \u662f\u5426\u5173\u95ed\u6d4f\u89c8\u5668\u4f7f\u5f97Session\u8fc7\u671f\uff08\u9ed8\u8ba4\uff09 SESSION_SAVE_EVERY_REQUEST = False # \u662f\u5426\u6bcf\u6b21\u8bf7\u6c42\u90fd\u4fdd\u5b58Session\uff0c\u9ed8\u8ba4\u4fee\u6539\u4e4b\u540e\u624d\u4fdd\u5b58\uff08\u9ed8\u8ba4\uff09 Django\u4e2dSession\u76f8\u5173\u8bbe\u7f6e","title":"django\u4e2dsession\u914d\u7f6e"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/18%20django%E4%B9%8B%E4%B8%AD%E9%97%B4%E4%BB%B6/","text":"django\u4e4b\u4e2d\u95f4\u4ef6 # \u4e2d\u95f4\u4ef6\u7b80\u4ecb # django\u4e2d\u95f4\u4ef6\u5c31\u7c7b\u4f3c\u4e8edjango\u7684\u95e8\u6237\uff0c\u6240\u6709\u7684\u8bf7\u6c42\u548c\u54cd\u5e94\u90fd\u5fc5\u987b\u7ecf\u8fc7\u4e2d\u95f4\u4ef6\u624d\u80fd\u6b63\u5e38\u901a\u8fc7\uff0c\u53ef\u4ee5\u7528\u6765\u5904\u7406Django\u7684\u8bf7\u6c42\u548c\u54cd\u5e94\u7684\u6570\u636e\u3002django\u4e2d\u95f4\u4ef6\u5728\u8bbe\u8ba1\u5230\u4e00\u4e9b\u5168\u5c40\u65b9\u9762\u7684\u529f\u80fd\u65f6\uff0c\u4f5c\u7528\u975e\u5e38\u5927\u3002\u6bcf\u4e2a\u4e2d\u95f4\u4ef6\u7ec4\u4ef6\u90fd\u8d1f\u8d23\u505a\u4e00\u4e9b\u7279\u5b9a\u7684\u529f\u80fd\u3002django\u9ed8\u8ba4\u6709\u4e03\u4e2a\u4e2d\u95f4\u4ef6\u3002 django settings.py\u4e2d MIDLLEWARE\u914d\u7f6e\u9879\uff1a MIDDLEWARE = [ 'django.middleware.security.SecurityMiddleware' , 'django.contrib.sessions.middleware.SessionMiddleware' , 'django.middleware.common.CommonMiddleware' , 'django.middleware.csrf.CsrfViewMiddleware' , 'django.contrib.auth.middleware.AuthenticationMiddleware' , 'django.contrib.messages.middleware.MessageMiddleware' , 'django.middleware.clickjacking.XFrameOptionsMiddleware' , ] \u81ea\u5b9a\u4e49\u4e2d\u95f4\u4ef6 # django\u9ed8\u8ba4\u6709\u4e03\u4e2a\u4e2d\u95f4\u4ef6\uff0c \u5e76\u4e14\u652f\u6301\u81ea\u5b9a\u4e49\u4e2d\u95f4\u4ef6\uff0c\u7ed9\u7528\u6237\u66b4\u97325\u4e2a\u81ea\u5b9a\u4e49\u7684\u65b9\u6cd5 \u53ea\u8981\u4f60\u60f3\u8981\u505a\u4e00\u4e9b\u7f51\u7ad9\u7684\u5168\u5c40\u6027\u529f\u80fd\uff0c\u4f60\u90fd\u5e94\u8be5\u8003\u8651\u4f7f\u7528django\u7684\u4e2d\u95f4\u4ef6 \u5168\u5c40\u7684\u7528\u6237\u767b\u5f55\u6821\u9a8c \u5168\u5c40\u7684\u7528\u6237\u8bbf\u95ee\u9891\u7387\u9650\u5236 \u5168\u5c40\u7684\u7528\u6237\u6743\u9650\u6821\u9a8c process_request\uff08\u91cd\u70b9\uff09 # from django.utils.deprecation import MiddlewareMixin class MyMdd1 ( MiddlewareMixin ): def process_request ( self , request ): print ( '\u6211\u662f\u7b2c\u4e00\u4e2a\u4e2d\u95f4\u4ef6\u91cc\u7684process_request\u65b9\u6cd5' ) class MyMdd2 ( MiddlewareMixin ): def process_request ( self , request ): print ( '\u6211\u662f\u7b2c\u4e8c\u4e2a\u4e2d\u95f4\u4ef6\u91cc\u7684process_request\u65b9\u6cd5' ) \u603b\u7ed3\uff1a \u8bf7\u6c42\u6765\u7684\u65f6\u5019\u4f1a\u6309\u7167settings\u914d\u7f6e\u6587\u4ef6\u4e2d\u4ece\u4e0a\u5f80\u4e0b\u7684\u987a\u5e8f\uff0c\u4f9d\u6b21\u6267\u884c\u6bcf\u4e00\u4e2a\u4e2d\u95f4\u4ef6\u5185\u90e8\u5b9a\u4e49\u7684process_request\u65b9\u6cd5 \u5982\u679c\u4e2d\u95f4\u4ef6\u5185\u90e8\u6ca1\u6709\u8be5\u65b9\u6cd5\uff0c\u76f4\u63a5\u8df3\u8fc7\u6267\u884c\u4e0b\u4e00\u4e2a\u4e2d\u95f4\u4ef6 \u8be5\u65b9\u6cd5\u4e00\u65e6\u8fd4\u56de\u4e86HttpResponse\u5bf9\u8c61\uff0c\u90a3\u4e48\u8bf7\u6c42\u4f1a\u7acb\u523b\u505c\u6b62\u5f80\u4e0b\u8d70\uff0c\u7ecf\u8fc7\u540c\u7ea7\u522b\u7684process_response\u65b9\u6cd5\u539f\u8def\u8fd4\u56de\u3002 process_response\uff08\u91cd\u70b9\uff09 # def process_response ( self , request , response ): \"\"\" :param request: :param response: \u5c31\u662f\u540e\u7aef\u8fd4\u56de\u7ed9\u524d\u7aef\u7684\u6570\u636e :return: \"\"\" print ( '\u6211\u662f\u7b2c\u4e00\u4e2a\u4e2d\u95f4\u4ef6\u91cc\u7684process_response\u65b9\u6cd5' ) return response # \u5fc5\u987b\u8981\u8fd4\u56deresponse \u603b\u7ed3\uff1a \u54cd\u5e94\u8d70\u7684\u65f6\u5019\u4f1a\u6309\u7167settings\u914d\u7f6e\u6587\u4ef6\u4e2d\u4ece\u4e0b\u5f80\u4e0a\u7684\u987a\u5e8f\uff0c \u4f9d\u6b21\u6267\u884c\u6bcf\u4e00\u4e2a\u4e2d\u95f4\u4ef6\u4e2d\u7684process_response\u65b9\u6cd5 \u8be5\u65b9\u6cd5\u5fc5\u987b\u8981\u6709\u4e24\u4e2a\u5f62\u53c2\uff0c\u5e76\u4e14\u5fc5\u987b\u8fd4\u56deresponse\u5f62\u53c2\uff0c\u4e0d\u8fd4\u56de\u76f4\u63a5\u62a5\u9519 \u8be5\u65b9\u6cd5\u81ea\u5b9a\u4e49\u7684HttpResponse\u5bf9\u8c61\uff0c\u524d\u7aef\u5c31\u4f1a\u5f97\u5230\u4ec0\u4e48 process_view # def process_view ( self , request , view_func , * args , ** kwargs ): print ( '\u6211\u662f\u7b2c\u4e00\u4e2a\u4e2d\u95f4\u4ef6\u91cc\u7684process_view\u65b9\u6cd5' ) process view(self, request, view func, view args, view kwargs)\uff0c \u8be5\u65b9\u6cd5\u6709\u56db\u4e2a\u53c2\u6570 \u8def\u7531\u5339\u914d\u6210\u529f\u4e4b\u540e\uff0c\u6267\u884c\u89c6\u56fe\u51fd\u6570\u4e4b\u540e\u89e6\u53d1 \u5982\u679c\u8be5\u65b9\u6cd5\u8fd4\u56de\u4e86HttpResponse\u5bf9\u8c61\uff0c \u90a3\u4e48\u4f1a\u4ece\u4e0b\u5f80\u4e0a\u4e00\u6b21\u7ecf\u8fc7\u6bcf\u4e00\u4e2a\u4e2d\u95f4\u4ef6\u91cc\u7684process_response\u65b9\u6cd5 process templates response # process template response(self, request, response) \u89c6\u56fe\u51fd\u6570\u8981\u8fd9\u6837\u5199\uff0c\u624d\u80fd\u89e6\u53d1\uff1a def func ( request ): print ( '\u6211\u662ffunc\u51fd\u6570' ) def render (): return HttpResponse ( '\u4f60\u597d\u5417' ) obj = HttpResponse ( '\u6211\u4e0d\u597d' ) obj . render = render return obj \u5f53\u4f60\u8fd4\u56de\u7684\u5bf9\u8c61\u4e2d\u542b\u6709render\u5c5e\u6027\u6307\u5411\u7684\u662f\u4e00\u4e2arender\u65b9\u6cd5\u7684\u65f6\u5019\u624d\u80fd\u89e6\u53d1\uff0c \u662f\u4ece\u4e0b\u5f80\u4e0a\u7684\u987a\u5e8f process_exception # from django.utils.deprecation import MiddlewareMixin from django.shortcuts import HttpResponse , render , redirect class MyMdd1 ( MiddlewareMixin ): def process_request ( self , request ): print ( '\u6211\u662f\u7b2c\u4e00\u4e2a\u4e2d\u95f4\u4ef6\u91cc\u7684process_request\u65b9\u6cd5' ) # return HttpResponse('\u6211\u662f\u4e2d\u95f4\u4ef61') def process_response ( self , request , response ): \"\"\" :param request: :param response: \u5c31\u662f\u540e\u7aef\u8fd4\u56de\u7ed9\u524d\u7aef\u7684\u6570\u636e :return: \"\"\" print ( '\u6211\u662f\u7b2c\u4e00\u4e2a\u4e2d\u95f4\u4ef6\u91cc\u7684process_response\u65b9\u6cd5' ) return response # return HttpResponse('\u6211\u662f\u4e2d\u95f4\u4ef61') def process_view ( self , request , view_func , * args , ** kwargs ): print ( '\u6211\u662f\u7b2c\u4e00\u4e2a\u4e2d\u95f4\u4ef6\u91cc\u7684process_view\u65b9\u6cd5' ) def process_exception ( self , request , exception ): print ( '\u6211\u662f\u7b2c\u4e00\u4e2a\u4e2d\u95f4\u4ef6\u91cc\u7684process_exception\u65b9\u6cd5' ) class MyMdd2 ( MiddlewareMixin ): def process_request ( self , request ): print ( '\u6211\u662f\u7b2c\u4e8c\u4e2a\u4e2d\u95f4\u4ef6\u91cc\u7684process_request\u65b9\u6cd5' ) def process_response ( self , request , response ): print ( '\u6211\u662f\u7b2c\u4e8c\u4e2a\u4e2d\u95f4\u4ef6\u91cc\u7684process_response\u65b9\u6cd5' ) return response # return HttpResponse('\u6211\u662f\u4e2d\u95f4\u4ef62') def process_view ( self , request , view_func , * args , ** kwargs ): print ( '\u6211\u662f\u7b2c\u4e8c\u4e2a\u4e2d\u95f4\u4ef6\u91cc\u7684process_view\u65b9\u6cd5' ) def process_exception ( self , request , exception ): print ( '\u6211\u662f\u7b2c\u4e8c\u4e2a\u4e2d\u95f4\u4ef6\u91cc\u7684process_exception\u65b9\u6cd5' ) \u5f53\u89c6\u56fe\u51fd\u6570\u4e2d\u51fa\u73b0\u9519\u8bef\u65f6\uff0c\u4f1a\u81ea\u52a8\u89e6\u53d1\uff0c\u987a\u5e8f\u662fsettings\u914d\u7f6e\u6587\u4ef6\u4ece\u4e0b\u5f80\u4e0a","title":"18 django\u4e4b\u4e2d\u95f4\u4ef6"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/18%20django%E4%B9%8B%E4%B8%AD%E9%97%B4%E4%BB%B6/#django","text":"","title":"django\u4e4b\u4e2d\u95f4\u4ef6"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/18%20django%E4%B9%8B%E4%B8%AD%E9%97%B4%E4%BB%B6/#_1","text":"django\u4e2d\u95f4\u4ef6\u5c31\u7c7b\u4f3c\u4e8edjango\u7684\u95e8\u6237\uff0c\u6240\u6709\u7684\u8bf7\u6c42\u548c\u54cd\u5e94\u90fd\u5fc5\u987b\u7ecf\u8fc7\u4e2d\u95f4\u4ef6\u624d\u80fd\u6b63\u5e38\u901a\u8fc7\uff0c\u53ef\u4ee5\u7528\u6765\u5904\u7406Django\u7684\u8bf7\u6c42\u548c\u54cd\u5e94\u7684\u6570\u636e\u3002django\u4e2d\u95f4\u4ef6\u5728\u8bbe\u8ba1\u5230\u4e00\u4e9b\u5168\u5c40\u65b9\u9762\u7684\u529f\u80fd\u65f6\uff0c\u4f5c\u7528\u975e\u5e38\u5927\u3002\u6bcf\u4e2a\u4e2d\u95f4\u4ef6\u7ec4\u4ef6\u90fd\u8d1f\u8d23\u505a\u4e00\u4e9b\u7279\u5b9a\u7684\u529f\u80fd\u3002django\u9ed8\u8ba4\u6709\u4e03\u4e2a\u4e2d\u95f4\u4ef6\u3002 django settings.py\u4e2d MIDLLEWARE\u914d\u7f6e\u9879\uff1a MIDDLEWARE = [ 'django.middleware.security.SecurityMiddleware' , 'django.contrib.sessions.middleware.SessionMiddleware' , 'django.middleware.common.CommonMiddleware' , 'django.middleware.csrf.CsrfViewMiddleware' , 'django.contrib.auth.middleware.AuthenticationMiddleware' , 'django.contrib.messages.middleware.MessageMiddleware' , 'django.middleware.clickjacking.XFrameOptionsMiddleware' , ]","title":"\u4e2d\u95f4\u4ef6\u7b80\u4ecb"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/18%20django%E4%B9%8B%E4%B8%AD%E9%97%B4%E4%BB%B6/#_2","text":"django\u9ed8\u8ba4\u6709\u4e03\u4e2a\u4e2d\u95f4\u4ef6\uff0c \u5e76\u4e14\u652f\u6301\u81ea\u5b9a\u4e49\u4e2d\u95f4\u4ef6\uff0c\u7ed9\u7528\u6237\u66b4\u97325\u4e2a\u81ea\u5b9a\u4e49\u7684\u65b9\u6cd5 \u53ea\u8981\u4f60\u60f3\u8981\u505a\u4e00\u4e9b\u7f51\u7ad9\u7684\u5168\u5c40\u6027\u529f\u80fd\uff0c\u4f60\u90fd\u5e94\u8be5\u8003\u8651\u4f7f\u7528django\u7684\u4e2d\u95f4\u4ef6 \u5168\u5c40\u7684\u7528\u6237\u767b\u5f55\u6821\u9a8c \u5168\u5c40\u7684\u7528\u6237\u8bbf\u95ee\u9891\u7387\u9650\u5236 \u5168\u5c40\u7684\u7528\u6237\u6743\u9650\u6821\u9a8c","title":"\u81ea\u5b9a\u4e49\u4e2d\u95f4\u4ef6"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/18%20django%E4%B9%8B%E4%B8%AD%E9%97%B4%E4%BB%B6/#process_request","text":"from django.utils.deprecation import MiddlewareMixin class MyMdd1 ( MiddlewareMixin ): def process_request ( self , request ): print ( '\u6211\u662f\u7b2c\u4e00\u4e2a\u4e2d\u95f4\u4ef6\u91cc\u7684process_request\u65b9\u6cd5' ) class MyMdd2 ( MiddlewareMixin ): def process_request ( self , request ): print ( '\u6211\u662f\u7b2c\u4e8c\u4e2a\u4e2d\u95f4\u4ef6\u91cc\u7684process_request\u65b9\u6cd5' ) \u603b\u7ed3\uff1a \u8bf7\u6c42\u6765\u7684\u65f6\u5019\u4f1a\u6309\u7167settings\u914d\u7f6e\u6587\u4ef6\u4e2d\u4ece\u4e0a\u5f80\u4e0b\u7684\u987a\u5e8f\uff0c\u4f9d\u6b21\u6267\u884c\u6bcf\u4e00\u4e2a\u4e2d\u95f4\u4ef6\u5185\u90e8\u5b9a\u4e49\u7684process_request\u65b9\u6cd5 \u5982\u679c\u4e2d\u95f4\u4ef6\u5185\u90e8\u6ca1\u6709\u8be5\u65b9\u6cd5\uff0c\u76f4\u63a5\u8df3\u8fc7\u6267\u884c\u4e0b\u4e00\u4e2a\u4e2d\u95f4\u4ef6 \u8be5\u65b9\u6cd5\u4e00\u65e6\u8fd4\u56de\u4e86HttpResponse\u5bf9\u8c61\uff0c\u90a3\u4e48\u8bf7\u6c42\u4f1a\u7acb\u523b\u505c\u6b62\u5f80\u4e0b\u8d70\uff0c\u7ecf\u8fc7\u540c\u7ea7\u522b\u7684process_response\u65b9\u6cd5\u539f\u8def\u8fd4\u56de\u3002","title":"process_request\uff08\u91cd\u70b9\uff09"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/18%20django%E4%B9%8B%E4%B8%AD%E9%97%B4%E4%BB%B6/#process_response","text":"def process_response ( self , request , response ): \"\"\" :param request: :param response: \u5c31\u662f\u540e\u7aef\u8fd4\u56de\u7ed9\u524d\u7aef\u7684\u6570\u636e :return: \"\"\" print ( '\u6211\u662f\u7b2c\u4e00\u4e2a\u4e2d\u95f4\u4ef6\u91cc\u7684process_response\u65b9\u6cd5' ) return response # \u5fc5\u987b\u8981\u8fd4\u56deresponse \u603b\u7ed3\uff1a \u54cd\u5e94\u8d70\u7684\u65f6\u5019\u4f1a\u6309\u7167settings\u914d\u7f6e\u6587\u4ef6\u4e2d\u4ece\u4e0b\u5f80\u4e0a\u7684\u987a\u5e8f\uff0c \u4f9d\u6b21\u6267\u884c\u6bcf\u4e00\u4e2a\u4e2d\u95f4\u4ef6\u4e2d\u7684process_response\u65b9\u6cd5 \u8be5\u65b9\u6cd5\u5fc5\u987b\u8981\u6709\u4e24\u4e2a\u5f62\u53c2\uff0c\u5e76\u4e14\u5fc5\u987b\u8fd4\u56deresponse\u5f62\u53c2\uff0c\u4e0d\u8fd4\u56de\u76f4\u63a5\u62a5\u9519 \u8be5\u65b9\u6cd5\u81ea\u5b9a\u4e49\u7684HttpResponse\u5bf9\u8c61\uff0c\u524d\u7aef\u5c31\u4f1a\u5f97\u5230\u4ec0\u4e48","title":"process_response\uff08\u91cd\u70b9\uff09"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/18%20django%E4%B9%8B%E4%B8%AD%E9%97%B4%E4%BB%B6/#process_view","text":"def process_view ( self , request , view_func , * args , ** kwargs ): print ( '\u6211\u662f\u7b2c\u4e00\u4e2a\u4e2d\u95f4\u4ef6\u91cc\u7684process_view\u65b9\u6cd5' ) process view(self, request, view func, view args, view kwargs)\uff0c \u8be5\u65b9\u6cd5\u6709\u56db\u4e2a\u53c2\u6570 \u8def\u7531\u5339\u914d\u6210\u529f\u4e4b\u540e\uff0c\u6267\u884c\u89c6\u56fe\u51fd\u6570\u4e4b\u540e\u89e6\u53d1 \u5982\u679c\u8be5\u65b9\u6cd5\u8fd4\u56de\u4e86HttpResponse\u5bf9\u8c61\uff0c \u90a3\u4e48\u4f1a\u4ece\u4e0b\u5f80\u4e0a\u4e00\u6b21\u7ecf\u8fc7\u6bcf\u4e00\u4e2a\u4e2d\u95f4\u4ef6\u91cc\u7684process_response\u65b9\u6cd5","title":"process_view"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/18%20django%E4%B9%8B%E4%B8%AD%E9%97%B4%E4%BB%B6/#processtemplatesresponse","text":"process template response(self, request, response) \u89c6\u56fe\u51fd\u6570\u8981\u8fd9\u6837\u5199\uff0c\u624d\u80fd\u89e6\u53d1\uff1a def func ( request ): print ( '\u6211\u662ffunc\u51fd\u6570' ) def render (): return HttpResponse ( '\u4f60\u597d\u5417' ) obj = HttpResponse ( '\u6211\u4e0d\u597d' ) obj . render = render return obj \u5f53\u4f60\u8fd4\u56de\u7684\u5bf9\u8c61\u4e2d\u542b\u6709render\u5c5e\u6027\u6307\u5411\u7684\u662f\u4e00\u4e2arender\u65b9\u6cd5\u7684\u65f6\u5019\u624d\u80fd\u89e6\u53d1\uff0c \u662f\u4ece\u4e0b\u5f80\u4e0a\u7684\u987a\u5e8f","title":"processtemplatesresponse"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/18%20django%E4%B9%8B%E4%B8%AD%E9%97%B4%E4%BB%B6/#process_exception","text":"from django.utils.deprecation import MiddlewareMixin from django.shortcuts import HttpResponse , render , redirect class MyMdd1 ( MiddlewareMixin ): def process_request ( self , request ): print ( '\u6211\u662f\u7b2c\u4e00\u4e2a\u4e2d\u95f4\u4ef6\u91cc\u7684process_request\u65b9\u6cd5' ) # return HttpResponse('\u6211\u662f\u4e2d\u95f4\u4ef61') def process_response ( self , request , response ): \"\"\" :param request: :param response: \u5c31\u662f\u540e\u7aef\u8fd4\u56de\u7ed9\u524d\u7aef\u7684\u6570\u636e :return: \"\"\" print ( '\u6211\u662f\u7b2c\u4e00\u4e2a\u4e2d\u95f4\u4ef6\u91cc\u7684process_response\u65b9\u6cd5' ) return response # return HttpResponse('\u6211\u662f\u4e2d\u95f4\u4ef61') def process_view ( self , request , view_func , * args , ** kwargs ): print ( '\u6211\u662f\u7b2c\u4e00\u4e2a\u4e2d\u95f4\u4ef6\u91cc\u7684process_view\u65b9\u6cd5' ) def process_exception ( self , request , exception ): print ( '\u6211\u662f\u7b2c\u4e00\u4e2a\u4e2d\u95f4\u4ef6\u91cc\u7684process_exception\u65b9\u6cd5' ) class MyMdd2 ( MiddlewareMixin ): def process_request ( self , request ): print ( '\u6211\u662f\u7b2c\u4e8c\u4e2a\u4e2d\u95f4\u4ef6\u91cc\u7684process_request\u65b9\u6cd5' ) def process_response ( self , request , response ): print ( '\u6211\u662f\u7b2c\u4e8c\u4e2a\u4e2d\u95f4\u4ef6\u91cc\u7684process_response\u65b9\u6cd5' ) return response # return HttpResponse('\u6211\u662f\u4e2d\u95f4\u4ef62') def process_view ( self , request , view_func , * args , ** kwargs ): print ( '\u6211\u662f\u7b2c\u4e8c\u4e2a\u4e2d\u95f4\u4ef6\u91cc\u7684process_view\u65b9\u6cd5' ) def process_exception ( self , request , exception ): print ( '\u6211\u662f\u7b2c\u4e8c\u4e2a\u4e2d\u95f4\u4ef6\u91cc\u7684process_exception\u65b9\u6cd5' ) \u5f53\u89c6\u56fe\u51fd\u6570\u4e2d\u51fa\u73b0\u9519\u8bef\u65f6\uff0c\u4f1a\u81ea\u52a8\u89e6\u53d1\uff0c\u987a\u5e8f\u662fsettings\u914d\u7f6e\u6587\u4ef6\u4ece\u4e0b\u5f80\u4e0a","title":"process_exception"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/19%20%E5%9F%BA%E4%BA%8E%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9A%84%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/","text":"\u57fa\u4e8edjango\u4e2d\u95f4\u4ef6\u7684\u601d\u60f3\uff0c\u5b9e\u73b0\u529f\u80fd\u914d\u7f6e # \u524d\u8a00 # \u5728\u5b66\u4e60django\u4e2d\u95f4\u4ef6\u671f\u95f4\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u4e0d\u9700\u8981\u4f7f\u7528\u7684\u4e2d\u95f4\u4ef6\u6ce8\u91ca\u6389\uff0c\u5c31\u53ef\u4ee5\u4e0d\u4f7f\u7528\u8fd9\u4e2a\u4e2d\u95f4\u4ef6\u7684\u529f\u80fd\uff0c MIDDLEWARE = [ 'django.middleware.security.SecurityMiddleware' , 'django.contrib.sessions.middleware.SessionMiddleware' , 'django.middleware.common.CommonMiddleware' , # 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware' , 'django.contrib.messages.middleware.MessageMiddleware' , 'django.middleware.clickjacking.XFrameOptionsMiddleware' , ] \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u7740\u4f7f\u7528django\u4e2d\u95f4\u4ef6\u7684\u8fd9\u79cd\u601d\u60f3\uff0c\u6765\u5b9e\u73b0 \u8fd9\u79cd\u529f\u80fd. \u524d\u671f\u51c6\u5907 # \u73b0\u5728\u6709\u4e2a\u9700\u6c42, \u8981\u5b9e\u73b0\u4e00\u4e2a\u7fa4\u53d1\u4fe1\u606f\u7684\u529f\u80fd,\u901a\u8fc7\u90ae\u4ef6\\\u77ed\u4fe1\\\u5fae\u4fe1 \u901a\u77e5\u4fe1\u606f. \u5b9e\u73b0: \u5148\u5efa\u4e24\u4e2a\u6587\u4ef6: # notify.py def send_email ( content ): print ( f '\u90ae\u4ef6\u901a\u77e5\uff1a { content } ' ) def send_msg ( content ): print ( f '\u77ed\u4fe1\u901a\u77e5\uff1a { content } ' ) def wechat ( content ): print ( f '\u5fae\u4fe1\u901a\u77e5\uff1a { content } ' ) from notify import * def send_all ( content ): send_email ( content ) send_msg ( content ) wechat ( content ) if __name__ == '__main__' : send_all ( '\u7248\u672c\u66f4\u65b0' ) \u8fd9\u6837\u5c31\u57fa\u672c\u5b9e\u73b0\u4e86\u521d\u6b65\u7684\u529f\u80fd importlib\u6a21\u5757\u4ecb\u7ecd # # lib\u6587\u4ef6\u5939\u4e0ba.py name = '\u4f60\u597d\u554a' # b.py import importlib res = 'lib.aaa' # \u901a\u8fc7\u5b57\u7b26\u4e32\u7684\u5f62\u5f0f\u5bfc\u5165\u6a21\u5757 md = importlib . import_module ( res ) # \u76f8\u5f53\u4e8e from lib import aaa # \u6ce8\u610f: \u5b57\u7b26\u4e32\u7684\u6700\u5c0f\u5355\u4f4d\u662f\u6587\u4ef6,\u4e0d\u80fd\u662f\u6587\u4ef6\u91cc\u9762\u7684\u540d\u5b57 print ( md . name ) \u57fa\u4e8edjango\u4e2d\u95f4\u4ef6\u7684\u7f16\u7a0b\u601d\u60f3 # # notify\u6587\u4ef6\u5939\u4e0b __init__.py import settings import importlib def send_all ( content ): for path in settings . NOTIFY_LIST : # 'notify.email.Email' module_path , cls_name = path . rsplit ( '.' , maxsplit = 1 ) md = importlib . import_module ( module_path ) # from notify import Email cls = getattr ( md , cls_name ) # \u83b7\u53d6\u5230\u6587\u4ef6\u4e2d\u7c7b\u7684\u540d\u5b57 obj = cls () obj . send ( content ) # email.py class Email ( object ): def __init__ ( self ): pass # \u8fd9\u91cc\u5199\u524d\u671f\u7684\u51c6\u5907 def send ( self , content ): print ( f '\u90ae\u7bb1\u901a\u77e5\uff1a { content } ' ) # msg.py class Msg ( object ): def __init__ ( self ): pass def send ( self , content ): print ( f '\u77ed\u4fe1\u901a\u77e5\uff1a { content } ' ) # wechat.py class Wechat ( object ): def __init__ ( self ): pass def send ( self , content ): print ( f '\u5fae\u4fe1\u901a\u77e5\uff1a { content } ' ) # settings.py NOTIFY_LIST = [ 'notify.email.Email' , 'notify.msg.Msg' , 'notify.wechat.Wechat' ] # start.py from notify import * send_all ( '\u6211\u5f88\u4e0d\u597d' ) django\u4e2dsettings\u6e90\u7801 # Django\u4e2d\u6709\u4e24\u4e2a\u914d\u7f6e\u6587\u4ef6\uff0c\u4e00\u4e2a\u5185\u90e8\u5168\u5c40\u7684\uff0c\u4e00\u4e2a\u7528\u6237\u81ea\u5b9a\u4e49 \u5982\u679c\u7528\u6237\u914d\u7f6e\u4e86\uff0c\u5c31\u4f7f\u7528\u8be5\u914d\u7f6e\uff0c\u5426\u5219\u4f7f\u7528\u5185\u90e8\u5168\u5c40\u8bbe\u7f6e \u5b9e\u73b0\u601d\u8def\uff1a\u5148\u52a0\u8f7d\u5168\u5c40\u914d\u7f6e\u7ed9\u5bf9\u8c61\u8bbe\u7f6e\uff0c\u7136\u540e\u5728\u52a0\u8f7d\u5c40\u90e8\u914d\u7f6e \u518d\u7ed9\u5bf9\u8c61\u8bbe\u7f6e\uff0c\u4e00\u65e6\u6709\u91cd\u590d\u7684\u9879 \u540e\u8005\u8986\u76d6\u524d\u8005 \u914d\u7f6e\u6587\u4ef6\u7684\u63d2\u62d4\u5f0f\u8bbe\u8ba1 # \u57fa\u4e8edjango\u4e2d\u914d\u7f6e\u6587\u4ef6\u7684\u5f62\u5f0f\u8bbe\u8ba1 \u76ee\u5f55\u8bbe\u8ba1 # conf\u6587\u4ef6\u5939\u4e0b settings.py NAME = '\u6211\u662f\u66b4\u9732\u7ed9\u7528\u6237\u7684\u81ea\u5b9a\u4e49\u914d\u7f6e' # global_settings.py NAME = '\u6211\u662f\u5168\u5c40\u914d\u7f6e\u6587\u4ef6' # lib > conf\u4e0b\u7684__init__.py import os import importlib from lib.conf import global_settings class Settings ( object ): def __init__ ( self ): for name in dir ( global_settings ): if name . isupper (): setattr ( self , name , getattr ( global_settings , name )) # \u83b7\u53d6\u66b4\u9732\u7ed9\u7528\u6237\u7684\u914d\u7f6e\u6587\u4ef6\u7684 \u5b57\u7b26\u4e32\u8def\u5f84 module_path = os . environ . get ( 'xxx' ) md = importlib . import_module ( module_path ) for name in dir ( md ): if name . isupper (): k = name v = getattr ( md , name ) setattr ( self , k , v ) settings = Settings () # start.py import os import sys sys . path . append ( os . path . dirname ( __file__ )) if __name__ == '__main__' : os . environ [ 'xxx' ] = 'conf.settings' from lib.conf import settings print ( settings . NAME )","title":"19 \u57fa\u4e8e\u4e2d\u95f4\u4ef6\u7684\u7f16\u7a0b\u601d\u60f3"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/19%20%E5%9F%BA%E4%BA%8E%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9A%84%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/#django","text":"","title":"\u57fa\u4e8edjango\u4e2d\u95f4\u4ef6\u7684\u601d\u60f3\uff0c\u5b9e\u73b0\u529f\u80fd\u914d\u7f6e"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/19%20%E5%9F%BA%E4%BA%8E%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9A%84%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/#_1","text":"\u5728\u5b66\u4e60django\u4e2d\u95f4\u4ef6\u671f\u95f4\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u4e0d\u9700\u8981\u4f7f\u7528\u7684\u4e2d\u95f4\u4ef6\u6ce8\u91ca\u6389\uff0c\u5c31\u53ef\u4ee5\u4e0d\u4f7f\u7528\u8fd9\u4e2a\u4e2d\u95f4\u4ef6\u7684\u529f\u80fd\uff0c MIDDLEWARE = [ 'django.middleware.security.SecurityMiddleware' , 'django.contrib.sessions.middleware.SessionMiddleware' , 'django.middleware.common.CommonMiddleware' , # 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware' , 'django.contrib.messages.middleware.MessageMiddleware' , 'django.middleware.clickjacking.XFrameOptionsMiddleware' , ] \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u7740\u4f7f\u7528django\u4e2d\u95f4\u4ef6\u7684\u8fd9\u79cd\u601d\u60f3\uff0c\u6765\u5b9e\u73b0 \u8fd9\u79cd\u529f\u80fd.","title":"\u524d\u8a00"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/19%20%E5%9F%BA%E4%BA%8E%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9A%84%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/#_2","text":"\u73b0\u5728\u6709\u4e2a\u9700\u6c42, \u8981\u5b9e\u73b0\u4e00\u4e2a\u7fa4\u53d1\u4fe1\u606f\u7684\u529f\u80fd,\u901a\u8fc7\u90ae\u4ef6\\\u77ed\u4fe1\\\u5fae\u4fe1 \u901a\u77e5\u4fe1\u606f. \u5b9e\u73b0: \u5148\u5efa\u4e24\u4e2a\u6587\u4ef6: # notify.py def send_email ( content ): print ( f '\u90ae\u4ef6\u901a\u77e5\uff1a { content } ' ) def send_msg ( content ): print ( f '\u77ed\u4fe1\u901a\u77e5\uff1a { content } ' ) def wechat ( content ): print ( f '\u5fae\u4fe1\u901a\u77e5\uff1a { content } ' ) from notify import * def send_all ( content ): send_email ( content ) send_msg ( content ) wechat ( content ) if __name__ == '__main__' : send_all ( '\u7248\u672c\u66f4\u65b0' ) \u8fd9\u6837\u5c31\u57fa\u672c\u5b9e\u73b0\u4e86\u521d\u6b65\u7684\u529f\u80fd","title":"\u524d\u671f\u51c6\u5907"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/19%20%E5%9F%BA%E4%BA%8E%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9A%84%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/#importlib","text":"# lib\u6587\u4ef6\u5939\u4e0ba.py name = '\u4f60\u597d\u554a' # b.py import importlib res = 'lib.aaa' # \u901a\u8fc7\u5b57\u7b26\u4e32\u7684\u5f62\u5f0f\u5bfc\u5165\u6a21\u5757 md = importlib . import_module ( res ) # \u76f8\u5f53\u4e8e from lib import aaa # \u6ce8\u610f: \u5b57\u7b26\u4e32\u7684\u6700\u5c0f\u5355\u4f4d\u662f\u6587\u4ef6,\u4e0d\u80fd\u662f\u6587\u4ef6\u91cc\u9762\u7684\u540d\u5b57 print ( md . name )","title":"importlib\u6a21\u5757\u4ecb\u7ecd"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/19%20%E5%9F%BA%E4%BA%8E%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9A%84%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/#django_1","text":"# notify\u6587\u4ef6\u5939\u4e0b __init__.py import settings import importlib def send_all ( content ): for path in settings . NOTIFY_LIST : # 'notify.email.Email' module_path , cls_name = path . rsplit ( '.' , maxsplit = 1 ) md = importlib . import_module ( module_path ) # from notify import Email cls = getattr ( md , cls_name ) # \u83b7\u53d6\u5230\u6587\u4ef6\u4e2d\u7c7b\u7684\u540d\u5b57 obj = cls () obj . send ( content ) # email.py class Email ( object ): def __init__ ( self ): pass # \u8fd9\u91cc\u5199\u524d\u671f\u7684\u51c6\u5907 def send ( self , content ): print ( f '\u90ae\u7bb1\u901a\u77e5\uff1a { content } ' ) # msg.py class Msg ( object ): def __init__ ( self ): pass def send ( self , content ): print ( f '\u77ed\u4fe1\u901a\u77e5\uff1a { content } ' ) # wechat.py class Wechat ( object ): def __init__ ( self ): pass def send ( self , content ): print ( f '\u5fae\u4fe1\u901a\u77e5\uff1a { content } ' ) # settings.py NOTIFY_LIST = [ 'notify.email.Email' , 'notify.msg.Msg' , 'notify.wechat.Wechat' ] # start.py from notify import * send_all ( '\u6211\u5f88\u4e0d\u597d' )","title":"\u57fa\u4e8edjango\u4e2d\u95f4\u4ef6\u7684\u7f16\u7a0b\u601d\u60f3"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/19%20%E5%9F%BA%E4%BA%8E%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9A%84%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/#djangosettings","text":"Django\u4e2d\u6709\u4e24\u4e2a\u914d\u7f6e\u6587\u4ef6\uff0c\u4e00\u4e2a\u5185\u90e8\u5168\u5c40\u7684\uff0c\u4e00\u4e2a\u7528\u6237\u81ea\u5b9a\u4e49 \u5982\u679c\u7528\u6237\u914d\u7f6e\u4e86\uff0c\u5c31\u4f7f\u7528\u8be5\u914d\u7f6e\uff0c\u5426\u5219\u4f7f\u7528\u5185\u90e8\u5168\u5c40\u8bbe\u7f6e \u5b9e\u73b0\u601d\u8def\uff1a\u5148\u52a0\u8f7d\u5168\u5c40\u914d\u7f6e\u7ed9\u5bf9\u8c61\u8bbe\u7f6e\uff0c\u7136\u540e\u5728\u52a0\u8f7d\u5c40\u90e8\u914d\u7f6e \u518d\u7ed9\u5bf9\u8c61\u8bbe\u7f6e\uff0c\u4e00\u65e6\u6709\u91cd\u590d\u7684\u9879 \u540e\u8005\u8986\u76d6\u524d\u8005","title":"django\u4e2dsettings\u6e90\u7801"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/19%20%E5%9F%BA%E4%BA%8E%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9A%84%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/#_3","text":"\u57fa\u4e8edjango\u4e2d\u914d\u7f6e\u6587\u4ef6\u7684\u5f62\u5f0f\u8bbe\u8ba1 \u76ee\u5f55\u8bbe\u8ba1 # conf\u6587\u4ef6\u5939\u4e0b settings.py NAME = '\u6211\u662f\u66b4\u9732\u7ed9\u7528\u6237\u7684\u81ea\u5b9a\u4e49\u914d\u7f6e' # global_settings.py NAME = '\u6211\u662f\u5168\u5c40\u914d\u7f6e\u6587\u4ef6' # lib > conf\u4e0b\u7684__init__.py import os import importlib from lib.conf import global_settings class Settings ( object ): def __init__ ( self ): for name in dir ( global_settings ): if name . isupper (): setattr ( self , name , getattr ( global_settings , name )) # \u83b7\u53d6\u66b4\u9732\u7ed9\u7528\u6237\u7684\u914d\u7f6e\u6587\u4ef6\u7684 \u5b57\u7b26\u4e32\u8def\u5f84 module_path = os . environ . get ( 'xxx' ) md = importlib . import_module ( module_path ) for name in dir ( md ): if name . isupper (): k = name v = getattr ( md , name ) setattr ( self , k , v ) settings = Settings () # start.py import os import sys sys . path . append ( os . path . dirname ( __file__ )) if __name__ == '__main__' : os . environ [ 'xxx' ] = 'conf.settings' from lib.conf import settings print ( settings . NAME )","title":"\u914d\u7f6e\u6587\u4ef6\u7684\u63d2\u62d4\u5f0f\u8bbe\u8ba1"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/20%20django%E4%B9%8Bcsrf%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82/","text":"django\u4e4bcsrf\u8de8\u7ad9\u8bf7\u6c42 # \u8de8\u7ad9\u8bf7\u6c42\u4f2a\u9020 csrf # \u9493\u9c7c\u7f51\u7ad9 # \u5c31\u7c7b\u4f3c\u4e8e\u4f60\u642d\u5efa\u4e86\u4e00\u4e2a\u8ddf\u94f6\u884c\u4e00\u6a21\u4e00\u6837\u7684web\u9875\u9762 , \u7528\u6237\u5728\u4f60\u7684\u7f51\u7ad9\u8f6c\u8d26\u7684\u65f6\u5019\u8f93\u5165\u7528\u6237\u540d \u5bc6\u7801 \u5bf9\u65b9\u8d26\u6237 \u94f6\u884c\u91cc\u9762\u7684\u94b1\u786e\u5b9e\u5c11\u4e86 \u4f46\u662f\u53d1\u73b0\u6536\u6b3e\u4eba\u53d8\u4e86 \u539f\u7406\u5b9e\u73b0: \u4f60\u5199\u7684form\u8868\u5355\u4e2d \u7528\u6237\u7684\u7528\u6237\u540d \u5bc6\u7801\u90fd\u4f1a\u771f\u5b9e\u7684\u63d0\u4ea4\u7ed9\u94f6\u884c\u540e\u53f0, \u4f46\u662f\u6536\u6b3e\u4eba\u7684\u8d26\u6237\u5374\u4e0d\u662f\u7528\u6237\u586b\u7684 \u4f60\u66b4\u9732\u7ed9\u7528\u6237\u7684\u662f\u4e00\u4e2a\u6ca1\u6709name\u5c5e\u6027\u7684input\u6846, \u4f60\u81ea\u5df1\u63d0\u524d\u5199\u597d\u4e86\u4e00\u4e2a\u9690\u85cf\u7684\u5e26\u6709name\u548cvalue\u7684input\u6846\u3002 \u6a21\u62df\u5b9e\u73b0 # \u521b\u5efa\u4e24\u4e2adjango\u9879\u76ee <!--\u9493\u9c7c\u7f51\u7ad9--> < p > \u8fd9\u662f\u4f2a\u9020\u7684\u7f51\u7ad9 </ p > < form action = \"http://127.0.0.1:8000/transfer/\" method = \"post\" > < p > username: < input type = \"text\" name = \"username\" ></ p > < p > target_account: < input type = \"text\" name = \"target_user\" > < input type = \"text\" name = \"target_user\" value = \"jason\" style = \"display: none\" > </ p > < p > money: < input type = \"text\" name = \"money\" ></ p > < input type = \"submit\" > </ form > \u89e3\u51b3\u9493\u9c7c\u7f51\u7ad9\u7684\u601d\u8def\uff1a \u53ea\u8981\u662f\u7528\u6237\u60f3\u8981\u63d0\u4ea4post\u8bf7\u6c42\u7684\u9875\u9762\uff0c\u6211\u5728\u8fd4\u56de\u7ed9\u7528\u6237\u7684\u65f6\u5019\u63d0\u524d\u8bbe\u7f6e\u597d\u5b57\u7b26\u4e32\uff0c\u4e2d\u95f4\u4ef6\u7ed9\u524d\u7aef\u52a0\u4e0a\u4e00\u4e2a\u9690\u85cf\u7684input\u6846\uff0c\u91cc\u9762\u7684value\u5c31\u662f\u8fd9\u4e2a\u968f\u673a\u5b57\u7b26\u4e32\u3002 \u5f53\u7528\u6237\u63d0\u4ea4post\u8bf7\u6c42\uff0c\u6211\u4f1a\u81ea\u52a8\u5148\u53bb\u67e5\u627e\u662f\u5426\u6709\u8be5\u968f\u673a\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u6709\uff0c\u6b63\u5e38\u63d0\u4ea4\uff0c\u6ca1\u6709\u5c31\u8fd4\u56de403 \u5728django\u4e2d \u4e2d\u95f4\u4ef6csrf 'django.middleware.csrf.CsrfViewMiddleware', \uff0c \u5b83\u5c31\u662f\u6765\u6821\u9a8c\u6709\u6ca1\u6709\u968f\u673a\u5b57\u7b26\u4e32\u3002 \u8fd9\u4e2a\u4e2d\u95f4\u4ef6\u7684\u529f\u80fd\uff1a \u5f53\u4f60\u5411\u6b63\u89c4\u7f51\u7ad9\u53d1\u9001post\u8bf7\u6c42\uff0c \u8bf7\u6c42\u6765\u7684\u65f6\u5019 \u670d\u52a1\u5668\u7ed9\u4f60\u4e00\u4e2a\u968f\u673a\u5b57\u7b26\u4e32\uff0c\u54cd\u5e94\u7684\u65f6\u5019\u7ecf\u8fc7\u4e2d\u95f4\u4ef6\u3002csrf\u4e2d\u95f4\u4ef6\u5c31\u4f1a\u5728form\u8868\u5355\u4e2d\u627e\uff0c\u6709\u6ca1\u6709 <input type=\"hidden\" name=\"csrfmiddlewaretoken\" >\uff0c \u5982\u679c\u6709\uff0c\u5c31\u62ff\u7740token\u6240\u5bf9\u5e94\u7684\u503c\u53bb \u7ed9\u4e0a\u4e00\u6b21\u6d4f\u89c8\u5668\u8fd4\u56de\u7684\u952e\u53bb\u6bd4\u5bf9\uff0c\u5982\u679c\u6bd4\u5bf9\u4e0a\u4e86\u5c31\u6b63\u5e38\u8fdb\u53bb\uff0c\u5426\u5219403. \u9488\u5bf9form\u8868\u5355 # \u4ee5\u540e\u518d\u5199form\u8868\u5355\u65f6 \uff0c\u53ea\u8981\u5728\u8868\u5355\u4e2d\u52a0\u4e0a {% csrf_token %} \u5c31\u53ef\u4ee5\u4e86 < p > \u8fd9\u662f\u6b63\u7ecf\u7f51\u7ad9 </ p > {% csrf_token %} < form action = \"\" method = \"post\" > < p > username: < input type = \"text\" name = \"username\" ></ p > < p > target_account: < input type = \"text\" name = \"target_user\" ></ p > < p > money: < input type = \"text\" name = \"money\" ></ p > < input type = \"submit\" > </ form > ajax\u8bf7\u6c42 # \u65b9\u5f0f\u4e00\uff1a \u5148\u5728\u9875\u9762\u4e0a\u4efb\u610f\u4f4d\u7f6e\u5199\u4e0a {% csrf_token %} \u7136\u540e\u5728\u53d1\u9001ajax\u8bf7\u6c42\u7684\u65f6\u5019\uff0c\u901a\u8fc7\u6807\u7b7e\u67e5\u627e\u83b7\u53d6\u968f\u673a\u5b57\u7b26\u4e32\u6dfb\u52a0\u5230data\u81ea\u5b9a\u4e49\u5bf9\u8c61\u4e2d\u5373\u53ef data:{'username': 'cwz', 'csrfmiddlewaretoken': $('input[name=\"csrfmiddlewaretoken\"]').val()}, \u65b9\u5f0f\u4e8c\uff1a data:{'username':'jason','csrfmiddlewaretoken':'{{ csrf_token }}'}, \u65b9\u5f0f\u4e09\uff1a \u5229\u7528\u522b\u4eba\u5199\u597d\u7684\u811a\u672c\u6587\u4ef6 \u53ea\u8981\u5728static\u6587\u4ef6\u5939\u4e2d\u5148\u5efa\u4e00\u4e2ajs\u6587\u4ef6\uff0c\u5b58\u653e\u811a\u672c\u6587\u4ef6\uff0c \u7136\u540e\u53ea\u9700\u8981\u628ajs\u811a\u672c\u6587\u4ef6\u5bfc\u8fc7\u6765\u5373\u53ef \u811a\u672c\u6587\u4ef6\uff1a function getCookie ( name ) { var cookieValue = null ; if ( document . cookie && document . cookie !== '' ) { var cookies = document . cookie . split ( ';' ); for ( var i = 0 ; i < cookies . length ; i ++ ) { var cookie = jQuery . trim ( cookies [ i ]); // Does this cookie string begin with the name we want? if ( cookie . substring ( 0 , name . length + 1 ) === ( name + '=' )) { cookieValue = decodeURIComponent ( cookie . substring ( name . length + 1 )); break ; } } } return cookieValue ; } var csrftoken = getCookie ( 'csrftoken' ); function csrfSafeMethod ( method ) { // these HTTP methods do not require CSRF protection return ( /^(GET|HEAD|OPTIONS|TRACE)$/ . test ( method )); } $ . ajaxSetup ({ beforeSend : function ( xhr , settings ) { if ( ! csrfSafeMethod ( settings . type ) && ! this . crossDomain ) { xhr . setRequestHeader ( \"X-CSRFToken\" , csrftoken ); } } }); csrf\u76f8\u5173\u7684\u4e24\u4e2a\u88c5\u9970\u5668 # \u9996\u5148\u8981\u5bfc\u5165\u6a21\u5757 from django.views.decorators.csrf import csrf_exempt, csrf_protect @csrf_exempt # \u88c5\u9970\u4e86\u8fd9\u4e2a\u88c5\u9970\u5668\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u7ed5\u8fc7\u6821\u9a8c\u4e86\u3002 def exem ( request ): return HttpResponse ( 'exempt' ) @csrf_protect # \u88c5\u9970\u4e86\u8fd9\u4e2a\u88c5\u9970\u5668\u5c31\u4f1a\u88ab\u6821\u9a8c\u4e86\u3002 def pro ( request ): return HttpResponse ( 'pro' ) \u4e24\u4e2a\u88c5\u9970\u5668\u5728CBV\u4e0a\u6709\u4f55\u4e0d\u540c csrf_exempt \u8fd9\u4e2a\u88c5\u9970\u5668\u53ea\u80fd\u7ed9dispatch\u88c5 from django.views.decorators.csrf import csrf_exempt , csrf_protect from django.utils.decorators import method_decorator # \u7b2c\u4e00\u79cd # @method_decorator(csrf_exempt,name='dispatch') class MyCsrf ( View ): # \u7b2c\u4e8c\u79cd @method_decorator ( csrf_exempt ) def dispatch ( self , request , * args , ** kwargs ): return super () . dispatch ( request , * args , ** kwargs ) def get ( self , request ): return render ( request , 'transfer.html' ) def post ( self , request ): return HttpResponse ( 'OK' ) csrf_protect \u600e\u4e48\u88c5\u9970\u90fd\u53ef\u4ee5\uff0c\u4e0e\u666e\u901a\u7684\u88c5\u9970\u5668\u88c5\u9970CBV\u4e00\u81f4 @method_decorator ( csrf_protect , name = 'post' ) # \u7b2c\u4e00\u79cd class MyCsrf ( View ): @method_decorator ( csrf_protect ) # \u7b2c\u4e8c\u79cd def dispatch ( self , request , * args , ** kwargs ): return super () . dispatch ( request , * args , ** kwargs ) def get ( self , request ): return HttpResponse ( 'hahaha' ) @method_decorator ( csrf_protect ) # \u7b2c\u4e09\u79cd def post ( self , request ): return HttpResponse ( 'post' )","title":"20 django\u4e4bcsrf\u8de8\u7ad9\u8bf7\u6c42"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/20%20django%E4%B9%8Bcsrf%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82/#djangocsrf","text":"","title":"django\u4e4bcsrf\u8de8\u7ad9\u8bf7\u6c42"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/20%20django%E4%B9%8Bcsrf%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82/#csrf","text":"","title":"\u8de8\u7ad9\u8bf7\u6c42\u4f2a\u9020 csrf"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/20%20django%E4%B9%8Bcsrf%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82/#_1","text":"\u5c31\u7c7b\u4f3c\u4e8e\u4f60\u642d\u5efa\u4e86\u4e00\u4e2a\u8ddf\u94f6\u884c\u4e00\u6a21\u4e00\u6837\u7684web\u9875\u9762 , \u7528\u6237\u5728\u4f60\u7684\u7f51\u7ad9\u8f6c\u8d26\u7684\u65f6\u5019\u8f93\u5165\u7528\u6237\u540d \u5bc6\u7801 \u5bf9\u65b9\u8d26\u6237 \u94f6\u884c\u91cc\u9762\u7684\u94b1\u786e\u5b9e\u5c11\u4e86 \u4f46\u662f\u53d1\u73b0\u6536\u6b3e\u4eba\u53d8\u4e86 \u539f\u7406\u5b9e\u73b0: \u4f60\u5199\u7684form\u8868\u5355\u4e2d \u7528\u6237\u7684\u7528\u6237\u540d \u5bc6\u7801\u90fd\u4f1a\u771f\u5b9e\u7684\u63d0\u4ea4\u7ed9\u94f6\u884c\u540e\u53f0, \u4f46\u662f\u6536\u6b3e\u4eba\u7684\u8d26\u6237\u5374\u4e0d\u662f\u7528\u6237\u586b\u7684 \u4f60\u66b4\u9732\u7ed9\u7528\u6237\u7684\u662f\u4e00\u4e2a\u6ca1\u6709name\u5c5e\u6027\u7684input\u6846, \u4f60\u81ea\u5df1\u63d0\u524d\u5199\u597d\u4e86\u4e00\u4e2a\u9690\u85cf\u7684\u5e26\u6709name\u548cvalue\u7684input\u6846\u3002","title":"\u9493\u9c7c\u7f51\u7ad9"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/20%20django%E4%B9%8Bcsrf%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82/#_2","text":"\u521b\u5efa\u4e24\u4e2adjango\u9879\u76ee <!--\u9493\u9c7c\u7f51\u7ad9--> < p > \u8fd9\u662f\u4f2a\u9020\u7684\u7f51\u7ad9 </ p > < form action = \"http://127.0.0.1:8000/transfer/\" method = \"post\" > < p > username: < input type = \"text\" name = \"username\" ></ p > < p > target_account: < input type = \"text\" name = \"target_user\" > < input type = \"text\" name = \"target_user\" value = \"jason\" style = \"display: none\" > </ p > < p > money: < input type = \"text\" name = \"money\" ></ p > < input type = \"submit\" > </ form > \u89e3\u51b3\u9493\u9c7c\u7f51\u7ad9\u7684\u601d\u8def\uff1a \u53ea\u8981\u662f\u7528\u6237\u60f3\u8981\u63d0\u4ea4post\u8bf7\u6c42\u7684\u9875\u9762\uff0c\u6211\u5728\u8fd4\u56de\u7ed9\u7528\u6237\u7684\u65f6\u5019\u63d0\u524d\u8bbe\u7f6e\u597d\u5b57\u7b26\u4e32\uff0c\u4e2d\u95f4\u4ef6\u7ed9\u524d\u7aef\u52a0\u4e0a\u4e00\u4e2a\u9690\u85cf\u7684input\u6846\uff0c\u91cc\u9762\u7684value\u5c31\u662f\u8fd9\u4e2a\u968f\u673a\u5b57\u7b26\u4e32\u3002 \u5f53\u7528\u6237\u63d0\u4ea4post\u8bf7\u6c42\uff0c\u6211\u4f1a\u81ea\u52a8\u5148\u53bb\u67e5\u627e\u662f\u5426\u6709\u8be5\u968f\u673a\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u6709\uff0c\u6b63\u5e38\u63d0\u4ea4\uff0c\u6ca1\u6709\u5c31\u8fd4\u56de403 \u5728django\u4e2d \u4e2d\u95f4\u4ef6csrf 'django.middleware.csrf.CsrfViewMiddleware', \uff0c \u5b83\u5c31\u662f\u6765\u6821\u9a8c\u6709\u6ca1\u6709\u968f\u673a\u5b57\u7b26\u4e32\u3002 \u8fd9\u4e2a\u4e2d\u95f4\u4ef6\u7684\u529f\u80fd\uff1a \u5f53\u4f60\u5411\u6b63\u89c4\u7f51\u7ad9\u53d1\u9001post\u8bf7\u6c42\uff0c \u8bf7\u6c42\u6765\u7684\u65f6\u5019 \u670d\u52a1\u5668\u7ed9\u4f60\u4e00\u4e2a\u968f\u673a\u5b57\u7b26\u4e32\uff0c\u54cd\u5e94\u7684\u65f6\u5019\u7ecf\u8fc7\u4e2d\u95f4\u4ef6\u3002csrf\u4e2d\u95f4\u4ef6\u5c31\u4f1a\u5728form\u8868\u5355\u4e2d\u627e\uff0c\u6709\u6ca1\u6709 <input type=\"hidden\" name=\"csrfmiddlewaretoken\" >\uff0c \u5982\u679c\u6709\uff0c\u5c31\u62ff\u7740token\u6240\u5bf9\u5e94\u7684\u503c\u53bb \u7ed9\u4e0a\u4e00\u6b21\u6d4f\u89c8\u5668\u8fd4\u56de\u7684\u952e\u53bb\u6bd4\u5bf9\uff0c\u5982\u679c\u6bd4\u5bf9\u4e0a\u4e86\u5c31\u6b63\u5e38\u8fdb\u53bb\uff0c\u5426\u5219403.","title":"\u6a21\u62df\u5b9e\u73b0"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/20%20django%E4%B9%8Bcsrf%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82/#form","text":"\u4ee5\u540e\u518d\u5199form\u8868\u5355\u65f6 \uff0c\u53ea\u8981\u5728\u8868\u5355\u4e2d\u52a0\u4e0a {% csrf_token %} \u5c31\u53ef\u4ee5\u4e86 < p > \u8fd9\u662f\u6b63\u7ecf\u7f51\u7ad9 </ p > {% csrf_token %} < form action = \"\" method = \"post\" > < p > username: < input type = \"text\" name = \"username\" ></ p > < p > target_account: < input type = \"text\" name = \"target_user\" ></ p > < p > money: < input type = \"text\" name = \"money\" ></ p > < input type = \"submit\" > </ form >","title":"\u9488\u5bf9form\u8868\u5355"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/20%20django%E4%B9%8Bcsrf%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82/#ajax","text":"\u65b9\u5f0f\u4e00\uff1a \u5148\u5728\u9875\u9762\u4e0a\u4efb\u610f\u4f4d\u7f6e\u5199\u4e0a {% csrf_token %} \u7136\u540e\u5728\u53d1\u9001ajax\u8bf7\u6c42\u7684\u65f6\u5019\uff0c\u901a\u8fc7\u6807\u7b7e\u67e5\u627e\u83b7\u53d6\u968f\u673a\u5b57\u7b26\u4e32\u6dfb\u52a0\u5230data\u81ea\u5b9a\u4e49\u5bf9\u8c61\u4e2d\u5373\u53ef data:{'username': 'cwz', 'csrfmiddlewaretoken': $('input[name=\"csrfmiddlewaretoken\"]').val()}, \u65b9\u5f0f\u4e8c\uff1a data:{'username':'jason','csrfmiddlewaretoken':'{{ csrf_token }}'}, \u65b9\u5f0f\u4e09\uff1a \u5229\u7528\u522b\u4eba\u5199\u597d\u7684\u811a\u672c\u6587\u4ef6 \u53ea\u8981\u5728static\u6587\u4ef6\u5939\u4e2d\u5148\u5efa\u4e00\u4e2ajs\u6587\u4ef6\uff0c\u5b58\u653e\u811a\u672c\u6587\u4ef6\uff0c \u7136\u540e\u53ea\u9700\u8981\u628ajs\u811a\u672c\u6587\u4ef6\u5bfc\u8fc7\u6765\u5373\u53ef \u811a\u672c\u6587\u4ef6\uff1a function getCookie ( name ) { var cookieValue = null ; if ( document . cookie && document . cookie !== '' ) { var cookies = document . cookie . split ( ';' ); for ( var i = 0 ; i < cookies . length ; i ++ ) { var cookie = jQuery . trim ( cookies [ i ]); // Does this cookie string begin with the name we want? if ( cookie . substring ( 0 , name . length + 1 ) === ( name + '=' )) { cookieValue = decodeURIComponent ( cookie . substring ( name . length + 1 )); break ; } } } return cookieValue ; } var csrftoken = getCookie ( 'csrftoken' ); function csrfSafeMethod ( method ) { // these HTTP methods do not require CSRF protection return ( /^(GET|HEAD|OPTIONS|TRACE)$/ . test ( method )); } $ . ajaxSetup ({ beforeSend : function ( xhr , settings ) { if ( ! csrfSafeMethod ( settings . type ) && ! this . crossDomain ) { xhr . setRequestHeader ( \"X-CSRFToken\" , csrftoken ); } } });","title":"ajax\u8bf7\u6c42"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/20%20django%E4%B9%8Bcsrf%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82/#csrf_1","text":"\u9996\u5148\u8981\u5bfc\u5165\u6a21\u5757 from django.views.decorators.csrf import csrf_exempt, csrf_protect @csrf_exempt # \u88c5\u9970\u4e86\u8fd9\u4e2a\u88c5\u9970\u5668\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u7ed5\u8fc7\u6821\u9a8c\u4e86\u3002 def exem ( request ): return HttpResponse ( 'exempt' ) @csrf_protect # \u88c5\u9970\u4e86\u8fd9\u4e2a\u88c5\u9970\u5668\u5c31\u4f1a\u88ab\u6821\u9a8c\u4e86\u3002 def pro ( request ): return HttpResponse ( 'pro' ) \u4e24\u4e2a\u88c5\u9970\u5668\u5728CBV\u4e0a\u6709\u4f55\u4e0d\u540c csrf_exempt \u8fd9\u4e2a\u88c5\u9970\u5668\u53ea\u80fd\u7ed9dispatch\u88c5 from django.views.decorators.csrf import csrf_exempt , csrf_protect from django.utils.decorators import method_decorator # \u7b2c\u4e00\u79cd # @method_decorator(csrf_exempt,name='dispatch') class MyCsrf ( View ): # \u7b2c\u4e8c\u79cd @method_decorator ( csrf_exempt ) def dispatch ( self , request , * args , ** kwargs ): return super () . dispatch ( request , * args , ** kwargs ) def get ( self , request ): return render ( request , 'transfer.html' ) def post ( self , request ): return HttpResponse ( 'OK' ) csrf_protect \u600e\u4e48\u88c5\u9970\u90fd\u53ef\u4ee5\uff0c\u4e0e\u666e\u901a\u7684\u88c5\u9970\u5668\u88c5\u9970CBV\u4e00\u81f4 @method_decorator ( csrf_protect , name = 'post' ) # \u7b2c\u4e00\u79cd class MyCsrf ( View ): @method_decorator ( csrf_protect ) # \u7b2c\u4e8c\u79cd def dispatch ( self , request , * args , ** kwargs ): return super () . dispatch ( request , * args , ** kwargs ) def get ( self , request ): return HttpResponse ( 'hahaha' ) @method_decorator ( csrf_protect ) # \u7b2c\u4e09\u79cd def post ( self , request ): return HttpResponse ( 'post' )","title":"csrf\u76f8\u5173\u7684\u4e24\u4e2a\u88c5\u9970\u5668"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/21%20django%E4%B9%8Bauth%E6%A8%A1%E5%9D%97/","text":"django\u4e4bauth\u6a21\u5757 # \u6211\u4eec\u5728\u5f00\u53d1\u4e00\u4e2a\u7f51\u7ad9\u7684\u65f6\u5019\uff0c\u65e0\u53ef\u907f\u514d\u7684\u9700\u8981\u8bbe\u8ba1\u5b9e\u73b0\u7f51\u7ad9\u7684\u7528\u6237\u7cfb\u7edf\u3002\u6b64\u65f6\u6211\u4eec\u9700\u8981\u5b9e\u73b0\u5305\u62ec\u7528\u6237\u6ce8\u518c\u3001\u7528\u6237\u767b\u5f55\u3001\u7528\u6237\u8ba4\u8bc1\u3001\u6ce8\u9500\u3001\u4fee\u6539\u5bc6\u7801\u7b49\u529f\u80fd\uff0c\u8fd9\u8fd8\u771f\u662f\u4e2a\u9ebb\u70e6\u7684\u4e8b\u60c5\u5462\u3002 Django\u4f5c\u4e3a\u4e00\u4e2a\u5b8c\u7f8e\u4e3b\u4e49\u8005\u7684\u7ec8\u6781\u6846\u67b6\uff0c\u5f53\u7136\u4e5f\u4f1a\u60f3\u5230\u7528\u6237\u7684\u8fd9\u4e9b\u75db\u70b9\u3002\u5b83\u5185\u7f6e\u4e86\u5f3a\u5927\u7684\u7528\u6237\u8ba4\u8bc1\u7cfb\u7edf--auth\uff0c\u5b83\u9ed8\u8ba4\u4f7f\u7528 auth_user \u8868\u6765\u5b58\u50a8\u7528\u6237\u6570\u636e\u3002 \u5148\u6267\u884c\u6570\u636e\u5e93\u8fc1\u79fb\u547d\u4ee4\uff0cdjango\u4f1a\u81ea\u52a8\u4ea7\u751f\u51e0\u5f20\u8868\uff0c\u91cc\u9762\u5c31\u6709auth_user\u8868\uff0c \u91cc\u9762\u7684\u5b57\u6bb5\u8fd8\u633a\u591a\u7684 \u521b\u5efa\u8d85\u7ea7\u7528\u6237 \u6267\u884c python manage.py createsuperuser \u7136\u540e\u4f60\u5c31\u53ef\u4ee5\u8fdb\u5165django\u540e\u53f0\u7ba1\u7406 \u8fdb\u884c\u64cd\u4f5c auth\u6a21\u5757\u5e38\u7528\u65b9\u6cd5 # \u521b\u5efa\u7528\u6237 # from django.contrib.auth.models import User def register ( request ): if request . method == 'POST' : username = request . POST . get ( 'username' ) password = request . POST . get ( 'password' ) User . objects . create_superuser ( username = username , password = password , email = '123@qq.com' ) # \u521b\u5efa\u8d85\u7ea7\u7528\u6237\uff0c \u9700\u8981\u90ae\u7bb1\u6570\u636e\uff0c \u5982\u679c\u4f7f\u7528\u547d\u4ee4\u884c\u521b\u5efa\u5c31\u4e0d\u9700\u8981 return HttpResponse ( 'ok' ) return render ( request , 'register.html' ) User . objects . create ( username = username , password = password ) # \u8fd9\u79cd\u521b\u5efa\u7684\u65b9\u5f0f \u5bc6\u7801\u4e0d\u662f\u52a0\u5bc6\u7684 User . objects . create_user ( username = username , password = password ) # \u521b\u5efa\u666e\u901a\u7528\u6237 User . objects . create_superuser ( username = username , password = password , email = '123@qq.com' ) # \u521b\u5efa\u8d85\u7ea7\u7528\u6237\uff0c \u9700\u8981\u90ae\u7bb1\u6570\u636e\uff0c \u5982\u679c\u4f7f\u7528\u547d\u4ee4\u884c\u521b\u5efa\u5c31\u4e0d\u9700\u8981 \u6821\u9a8c\u7528\u6237\u540d\u4e0e\u5bc6\u7801\u662f\u5426\u6b63\u786e # from django.contrib import auth user_obj = auth . authenticate ( request , username = username , password = password ) # \u81ea\u52a8\u7ed9\u4f60\u52a0\u5bc6\u5bc6\u7801\uff0c\u7136\u540e\u53bb\u6570\u636e\u5e93\u91cc\u6821\u9a8c print ( user_obj ) # \u6570\u636e\u5bf9\u8c61 print ( user_obj . username ) print ( user_obj . password ) # \u5bc6\u7801\u662f\u5bc6\u6587 \u4fdd\u5b58\u7528\u6237\u767b\u5f55\u72b6\u6001 # from django.contrib import auth auth . login ( request , user_obj ) # \u53ea\u8981\u6267\u884c\u4e86\u8fd9\u4e00\u53e5\u8bdd\uff0c\u4e4b\u540e\u4f60\u53ef\u4ee5\u5728\u4efb\u610f\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u901a\u8fc7request.user\u83b7\u53d6\u5230\u5f53\u524d\u767b\u5f55\u7684\u7528\u6237\u5bf9\u8c61 # \u5982\u679c\u6ca1\u6709\u767b\u5f55\uff0c\u83b7\u53d6 AnonymousUser \u5224\u65ad\u5f53\u524d\u7528\u6237\u662f\u5426\u767b\u5f55 # request . user . is_authenticated () \u6821\u9a8c\u539f\u5bc6\u7801\u662f\u5426\u6b63\u786e # is_right = request . user . check_password ( old_password ) \u4fee\u6539\u5bc6\u7801 # request . user . set_password ( new_password ) request . user . save () # \u4fee\u6539\u5bc6\u7801\u4e00\u5b9a\u8981\u4fdd\u5b58 \u6ce8\u9500 # auth . logout ( request ) \u6821\u9a8c\u7528\u6237\u662f\u5426\u767b\u5f55\u88c5\u9970\u5668 # from django.contrib.auth.decorators import login_required # \u5168\u5c40\u914d\u7f6e @login_required ( login_url = '/login' ) # \u540e\u9762\u52a0\u81ea\u5df1\u8df3\u8f6c\u7684\u9875\u9762\uff0c\u5982\u679c\u4e0d\u52a0\uff0c\u9ed8\u8ba4\u662f\u8df3\u8f6c\u5230\u5b83\u81ea\u5df1\u7684\u9875\u9762\uff0c\u4f1a\u62a5\u9519 def change_password ( request ): return render ( request , 'change_password.html' ) # \u5c40\u90e8\u914d\u7f6e # \u5728settings\u914d\u7f6e\u6587\u4ef6\u4e2d\uff0c\u76f4\u63a5\u914d\u7f6e LOGIN_URL = '/login/' # \u5982\u679c\u5168\u5c40\u548c\u5c40\u90e8\u90fd\u914d\u7f6e\uff0c\u4ee5\u5c40\u90e8\u914d\u7f6e\u4e3a\u51c6 \u6269\u5c55auth_user\u8868\u5b57\u6bb5 # \u5229\u7528\u4e00\u5bf9\u4e00\u5916\u952e\u5b57\u6bb5\u5173\u7cfb # from django.contrib.auth.models import User , AbstractUser class UserDetail ( models . Model ): phone = models . BigIntegerField () user = models . OneToOneField ( to = 'User' ) \u5229\u7528\u7ee7\u627f\u5173\u7cfb # from django.contrib.auth.models import User , AbstractUser class UserInfo ( AbstractUser ): phone = models . BigIntegerField () register_time = models . DateField ( auto_now_add = True ) # \u9700\u6ce8\u610f\uff0c \u8fd8\u8981\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u914d\u7f6e AUTH_USER_MODEL = 'app01.UserInfo' # \u5e94\u7528\u540d.\u8868\u540d","title":"21 django\u4e4bauth\u6a21\u5757"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/21%20django%E4%B9%8Bauth%E6%A8%A1%E5%9D%97/#djangoauth","text":"\u6211\u4eec\u5728\u5f00\u53d1\u4e00\u4e2a\u7f51\u7ad9\u7684\u65f6\u5019\uff0c\u65e0\u53ef\u907f\u514d\u7684\u9700\u8981\u8bbe\u8ba1\u5b9e\u73b0\u7f51\u7ad9\u7684\u7528\u6237\u7cfb\u7edf\u3002\u6b64\u65f6\u6211\u4eec\u9700\u8981\u5b9e\u73b0\u5305\u62ec\u7528\u6237\u6ce8\u518c\u3001\u7528\u6237\u767b\u5f55\u3001\u7528\u6237\u8ba4\u8bc1\u3001\u6ce8\u9500\u3001\u4fee\u6539\u5bc6\u7801\u7b49\u529f\u80fd\uff0c\u8fd9\u8fd8\u771f\u662f\u4e2a\u9ebb\u70e6\u7684\u4e8b\u60c5\u5462\u3002 Django\u4f5c\u4e3a\u4e00\u4e2a\u5b8c\u7f8e\u4e3b\u4e49\u8005\u7684\u7ec8\u6781\u6846\u67b6\uff0c\u5f53\u7136\u4e5f\u4f1a\u60f3\u5230\u7528\u6237\u7684\u8fd9\u4e9b\u75db\u70b9\u3002\u5b83\u5185\u7f6e\u4e86\u5f3a\u5927\u7684\u7528\u6237\u8ba4\u8bc1\u7cfb\u7edf--auth\uff0c\u5b83\u9ed8\u8ba4\u4f7f\u7528 auth_user \u8868\u6765\u5b58\u50a8\u7528\u6237\u6570\u636e\u3002 \u5148\u6267\u884c\u6570\u636e\u5e93\u8fc1\u79fb\u547d\u4ee4\uff0cdjango\u4f1a\u81ea\u52a8\u4ea7\u751f\u51e0\u5f20\u8868\uff0c\u91cc\u9762\u5c31\u6709auth_user\u8868\uff0c \u91cc\u9762\u7684\u5b57\u6bb5\u8fd8\u633a\u591a\u7684 \u521b\u5efa\u8d85\u7ea7\u7528\u6237 \u6267\u884c python manage.py createsuperuser \u7136\u540e\u4f60\u5c31\u53ef\u4ee5\u8fdb\u5165django\u540e\u53f0\u7ba1\u7406 \u8fdb\u884c\u64cd\u4f5c","title":"django\u4e4bauth\u6a21\u5757"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/21%20django%E4%B9%8Bauth%E6%A8%A1%E5%9D%97/#auth","text":"","title":"auth\u6a21\u5757\u5e38\u7528\u65b9\u6cd5"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/21%20django%E4%B9%8Bauth%E6%A8%A1%E5%9D%97/#_1","text":"from django.contrib.auth.models import User def register ( request ): if request . method == 'POST' : username = request . POST . get ( 'username' ) password = request . POST . get ( 'password' ) User . objects . create_superuser ( username = username , password = password , email = '123@qq.com' ) # \u521b\u5efa\u8d85\u7ea7\u7528\u6237\uff0c \u9700\u8981\u90ae\u7bb1\u6570\u636e\uff0c \u5982\u679c\u4f7f\u7528\u547d\u4ee4\u884c\u521b\u5efa\u5c31\u4e0d\u9700\u8981 return HttpResponse ( 'ok' ) return render ( request , 'register.html' ) User . objects . create ( username = username , password = password ) # \u8fd9\u79cd\u521b\u5efa\u7684\u65b9\u5f0f \u5bc6\u7801\u4e0d\u662f\u52a0\u5bc6\u7684 User . objects . create_user ( username = username , password = password ) # \u521b\u5efa\u666e\u901a\u7528\u6237 User . objects . create_superuser ( username = username , password = password , email = '123@qq.com' ) # \u521b\u5efa\u8d85\u7ea7\u7528\u6237\uff0c \u9700\u8981\u90ae\u7bb1\u6570\u636e\uff0c \u5982\u679c\u4f7f\u7528\u547d\u4ee4\u884c\u521b\u5efa\u5c31\u4e0d\u9700\u8981","title":"\u521b\u5efa\u7528\u6237"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/21%20django%E4%B9%8Bauth%E6%A8%A1%E5%9D%97/#_2","text":"from django.contrib import auth user_obj = auth . authenticate ( request , username = username , password = password ) # \u81ea\u52a8\u7ed9\u4f60\u52a0\u5bc6\u5bc6\u7801\uff0c\u7136\u540e\u53bb\u6570\u636e\u5e93\u91cc\u6821\u9a8c print ( user_obj ) # \u6570\u636e\u5bf9\u8c61 print ( user_obj . username ) print ( user_obj . password ) # \u5bc6\u7801\u662f\u5bc6\u6587","title":"\u6821\u9a8c\u7528\u6237\u540d\u4e0e\u5bc6\u7801\u662f\u5426\u6b63\u786e"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/21%20django%E4%B9%8Bauth%E6%A8%A1%E5%9D%97/#_3","text":"from django.contrib import auth auth . login ( request , user_obj ) # \u53ea\u8981\u6267\u884c\u4e86\u8fd9\u4e00\u53e5\u8bdd\uff0c\u4e4b\u540e\u4f60\u53ef\u4ee5\u5728\u4efb\u610f\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u901a\u8fc7request.user\u83b7\u53d6\u5230\u5f53\u524d\u767b\u5f55\u7684\u7528\u6237\u5bf9\u8c61 # \u5982\u679c\u6ca1\u6709\u767b\u5f55\uff0c\u83b7\u53d6 AnonymousUser","title":"\u4fdd\u5b58\u7528\u6237\u767b\u5f55\u72b6\u6001"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/21%20django%E4%B9%8Bauth%E6%A8%A1%E5%9D%97/#_4","text":"request . user . is_authenticated ()","title":"\u5224\u65ad\u5f53\u524d\u7528\u6237\u662f\u5426\u767b\u5f55"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/21%20django%E4%B9%8Bauth%E6%A8%A1%E5%9D%97/#_5","text":"is_right = request . user . check_password ( old_password )","title":"\u6821\u9a8c\u539f\u5bc6\u7801\u662f\u5426\u6b63\u786e"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/21%20django%E4%B9%8Bauth%E6%A8%A1%E5%9D%97/#_6","text":"request . user . set_password ( new_password ) request . user . save () # \u4fee\u6539\u5bc6\u7801\u4e00\u5b9a\u8981\u4fdd\u5b58","title":"\u4fee\u6539\u5bc6\u7801"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/21%20django%E4%B9%8Bauth%E6%A8%A1%E5%9D%97/#_7","text":"auth . logout ( request )","title":"\u6ce8\u9500"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/21%20django%E4%B9%8Bauth%E6%A8%A1%E5%9D%97/#_8","text":"from django.contrib.auth.decorators import login_required # \u5168\u5c40\u914d\u7f6e @login_required ( login_url = '/login' ) # \u540e\u9762\u52a0\u81ea\u5df1\u8df3\u8f6c\u7684\u9875\u9762\uff0c\u5982\u679c\u4e0d\u52a0\uff0c\u9ed8\u8ba4\u662f\u8df3\u8f6c\u5230\u5b83\u81ea\u5df1\u7684\u9875\u9762\uff0c\u4f1a\u62a5\u9519 def change_password ( request ): return render ( request , 'change_password.html' ) # \u5c40\u90e8\u914d\u7f6e # \u5728settings\u914d\u7f6e\u6587\u4ef6\u4e2d\uff0c\u76f4\u63a5\u914d\u7f6e LOGIN_URL = '/login/' # \u5982\u679c\u5168\u5c40\u548c\u5c40\u90e8\u90fd\u914d\u7f6e\uff0c\u4ee5\u5c40\u90e8\u914d\u7f6e\u4e3a\u51c6","title":"\u6821\u9a8c\u7528\u6237\u662f\u5426\u767b\u5f55\u88c5\u9970\u5668"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/21%20django%E4%B9%8Bauth%E6%A8%A1%E5%9D%97/#auth_user","text":"","title":"\u6269\u5c55auth_user\u8868\u5b57\u6bb5"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/21%20django%E4%B9%8Bauth%E6%A8%A1%E5%9D%97/#_9","text":"from django.contrib.auth.models import User , AbstractUser class UserDetail ( models . Model ): phone = models . BigIntegerField () user = models . OneToOneField ( to = 'User' )","title":"\u5229\u7528\u4e00\u5bf9\u4e00\u5916\u952e\u5b57\u6bb5\u5173\u7cfb"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/21%20django%E4%B9%8Bauth%E6%A8%A1%E5%9D%97/#_10","text":"from django.contrib.auth.models import User , AbstractUser class UserInfo ( AbstractUser ): phone = models . BigIntegerField () register_time = models . DateField ( auto_now_add = True ) # \u9700\u6ce8\u610f\uff0c \u8fd8\u8981\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u914d\u7f6e AUTH_USER_MODEL = 'app01.UserInfo' # \u5e94\u7528\u540d.\u8868\u540d","title":"\u5229\u7528\u7ee7\u627f\u5173\u7cfb"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/22%20django1.x%E5%92%8C2.x%E7%9A%84%E5%8C%BA%E5%88%AB/","text":"django1.x\u548c2.x\u7684\u533a\u522b # \u8def\u7531\u7684\u533a\u522b # django1.x\u4e2d\u7684url # from django.conf.urls import url # \u4f7f\u7528url\u5173\u952e\u5b57 urlpatterns = [ url ( 'article-(\\d+).html' , views . article ), url ( 'article-(?P<article_id>\\d+).html' , views . article ) ] # url\u8bf7\u6c42\u5730\u5740\u4e3a\uff1ahttp://127.0.0.1:8000/article-1.html Django1\u7684url\u652f\u6301\u6b63\u5219\u5339\u914d\uff1a article-(\\d+).html \uff1a\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u5206\u7ec4\u5339\u914d\u6765\u83b7\u53d6URL\u4e2d\u7684\u53c2\u6570\uff0c\u5e76\u4ee5\u4f4d\u7f6e\u53c2\u6570\u5f62\u5f0f\u4f20\u9012\u7ed9\u89c6\u56fearticle\u3002 article-(?P<article_id>\\d+).html \uff1a\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u5206\u7ec4\u547d\u540d\u5339\u914d\u6765\u83b7\u53d6URL\u4e2d\u7684\u53c2\u6570\uff0c\u5e76\u4ee5\u5173\u952e\u5b57\u53c2\u6570\u7684\u5f62\u5f0f\u4f20\u9012\u7ed9\u89c6\u56fearticle\u3002 \u5206\u7ec4\u547d\u540d\u6b63\u5219\u8868\u8fbe\u5f0f\u7ec4\u7684\u8bed\u6cd5\u662f\uff1a (?P<name>pattern) \uff0c\u5176\u4e2dname\u662f\u7ec4\u7684\u540d\u79f0(\u89c6\u56fe\u4e2d\u7684\u5173\u952e\u5b57\u53c2\u6570\u5fc5\u987b\u8ddf\u7ec4\u540d\u4e00\u81f4)\uff0cpattern\u662f\u6b63\u5219\u8868\u8fbe\u5f0f\u3002 django2.x\u4e2d\u7684url # django2\u4e2d\u7279\u6709\u7684url # url\u89c4\u5219: path\u5199\u7684\u662f\u7edd\u5bf9\u5b57\u7b26\u4e32,\u8bf7\u6c42\u5730\u5740\u5fc5\u987b\u4e0e\u8def\u7531\u5730\u5740\u5b8c\u5168\u5339\u914d \u4f7f\u7528\u5c16\u62ec\u53f7 <> \u4eceurl\u4e2d\u83b7\u53d6\u53c2\u6570\u503c \u53ef\u4ee5\u4f7f\u7528\u8f6c\u6362\u5668\u6307\u5b9a\u53c2\u6570\u7c7b\u578b\uff0c\u4f8b\u5982\uff1a \u6355\u83b7\u4e00\u4e2a\u6574\u6570\u53c2\u6570age, \u82e5\u679c\u6ca1\u6709\u8f6c\u5316\u5668\uff0c\u5c06\u5339\u914d\u4efb\u4f55\u5b57\u7b26\u4e32\uff0c\u4e5f\u5305\u62ec\u8def\u5f84\u5206\u9694\u7b26 / path\u62e5\u67095\u4e2a\u8f6c\u6362\u5668: str:\u5339\u914d\u9664\u8def\u5f84\u5206\u9694\u7b26 / \u5916\u7684\u5b57\u7b26\u4e32 int:\u5339\u914d\u81ea\u7136\u6570 slug:\u5339\u914d\u5b57\u6bcd,\u6570\u5b57,\u6a2a\u6760\u53ca\u4e0b\u5212\u7ebf\u7ec4\u6210\u7684\u5b57\u7b26\u4e32 uuid:\u5339\u914duuid\u5f62\u5f0f\u7684\u6570\u636e path:\u5339\u914d\u4efb\u4f55\u5b57\u7b26\u4e32,\u5305\u62ec\u8def\u5f84\u5206\u9694\u7b26 / from django.urls import path # \u4f7f\u7528path\u5173\u952e\u5b57 urlpatterns = [ path ( 'article-<int:article_id>.html' , views . article ), ] # url\u8bf7\u6c42\u5730\u5740\u4e3a\uff1ahttp://127.0.0.1:8000/article-1.html \u81ea\u5b9a\u4e49\u8f6c\u6362\u5668\uff1a \u81ea\u5b9a\u4e49\u4e00\u4e2a\u7c7b \u7c7b\u4e2d\u5fc5\u987b\u6709\uff1a\u7c7b\u5c5e\u6027regex\uff0cto python\u65b9\u6cd5\uff0cto url\u65b9\u6cd5 regex\uff1a\u7c7b\u5c5e\u6027\uff0c\u5b57\u7b26\u4e32\u7c7b\u578b to_python(self, value)\u65b9\u6cd5\uff1avalue\u662f\u7531\u7c7b\u5c5e\u6027 regex \u6240\u5339\u914d\u5230\u7684\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u5177\u4f53\u7684Python\u53d8\u91cf\u503c\uff0c\u4ee5\u4f9bDjango\u4f20\u9012\u5230\u5bf9\u5e94\u7684\u89c6\u56fe\u51fd\u6570\u4e2d\u3002 to url(self, value)\u65b9\u6cd5\uff1a\u548c to python \u76f8\u53cd\uff0cvalue\u662f\u4e00\u4e2a\u5177\u4f53\u7684Python\u53d8\u91cf\u503c\uff0c\u8fd4\u56de\u5176\u5b57\u7b26\u4e32\uff0c\u901a\u5e38\u7528\u4e8eurl\u53cd\u5411\u5f15\u7528\u3002 \u4f8b\u5b50\uff1a class Date : regex = '^0?[1-9]$|^1[0-2]$' def to_python ( self , value ): # \u53ef\u4ee5\u5199\u4f60\u7684\u903b\u8f91\uff0c\u5bf9\u5339\u914d\u5230\u7684\u5b57\u7b26\u4e32\u8fdb\u884c\u5904\u7406 value = '2019/' + value return value def to_url ( self , value ): return ' %2s ' % value # \u5728\u4e3b\u8def\u7531\u4e0b\u5bfc\u5165,\u751f\u6210\u8f6c\u6362\u5668 from django.urls import register_converter register_converter ( Date , 'date' ) path ( 'full-year/<date:full_year>/' , views . full_year , name = \"full_year\" ) django2.x\u7684url\u517c\u5bb9\u4e86django1.x\u7684\u5199\u6cd5 # from django.urls import re_path #\u3000\u8fd9\u91cc\u7684re_path\u7684\u7528\u6cd5\u8ddfDjango1\u7684url\u7528\u6cd5\u89c6\u5b8c\u5168\u4e00\u6837\u7684\uff0c\u5339\u914d\u6b63\u5219\u3002 urlpatterns = [ path ( 'articles/2003/' , views . special_case_2003 ), # Django2\u7684\u5199\u6cd5 re_path ( 'articles/(?P<year>[0-9] {4} )/' , views . year_archive ), # \u517c\u5bb9Django1\u7684\u5199\u6cd5 re_path ( 'articles/(?P<year>[0-9] {4} )/(?P<month>[0-9] {2} )/' , views . month_archive ), re_path ( 'articles/(?P<year>[0-9] {4} )/(?P<month>[0-9] {2} )/(?P<slug>[^/]+)/' , views . article_detail ), ] \u53c2\u8003\uff1a https://www.cnblogs.com/Zzbj/p/11150041.html","title":"22 django1.x\u548c2.x\u7684\u533a\u522b"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/22%20django1.x%E5%92%8C2.x%E7%9A%84%E5%8C%BA%E5%88%AB/#django1x2x","text":"","title":"django1.x\u548c2.x\u7684\u533a\u522b"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/22%20django1.x%E5%92%8C2.x%E7%9A%84%E5%8C%BA%E5%88%AB/#_1","text":"","title":"\u8def\u7531\u7684\u533a\u522b"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/22%20django1.x%E5%92%8C2.x%E7%9A%84%E5%8C%BA%E5%88%AB/#django1xurl","text":"from django.conf.urls import url # \u4f7f\u7528url\u5173\u952e\u5b57 urlpatterns = [ url ( 'article-(\\d+).html' , views . article ), url ( 'article-(?P<article_id>\\d+).html' , views . article ) ] # url\u8bf7\u6c42\u5730\u5740\u4e3a\uff1ahttp://127.0.0.1:8000/article-1.html Django1\u7684url\u652f\u6301\u6b63\u5219\u5339\u914d\uff1a article-(\\d+).html \uff1a\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u5206\u7ec4\u5339\u914d\u6765\u83b7\u53d6URL\u4e2d\u7684\u53c2\u6570\uff0c\u5e76\u4ee5\u4f4d\u7f6e\u53c2\u6570\u5f62\u5f0f\u4f20\u9012\u7ed9\u89c6\u56fearticle\u3002 article-(?P<article_id>\\d+).html \uff1a\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u5206\u7ec4\u547d\u540d\u5339\u914d\u6765\u83b7\u53d6URL\u4e2d\u7684\u53c2\u6570\uff0c\u5e76\u4ee5\u5173\u952e\u5b57\u53c2\u6570\u7684\u5f62\u5f0f\u4f20\u9012\u7ed9\u89c6\u56fearticle\u3002 \u5206\u7ec4\u547d\u540d\u6b63\u5219\u8868\u8fbe\u5f0f\u7ec4\u7684\u8bed\u6cd5\u662f\uff1a (?P<name>pattern) \uff0c\u5176\u4e2dname\u662f\u7ec4\u7684\u540d\u79f0(\u89c6\u56fe\u4e2d\u7684\u5173\u952e\u5b57\u53c2\u6570\u5fc5\u987b\u8ddf\u7ec4\u540d\u4e00\u81f4)\uff0cpattern\u662f\u6b63\u5219\u8868\u8fbe\u5f0f\u3002","title":"django1.x\u4e2d\u7684url"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/22%20django1.x%E5%92%8C2.x%E7%9A%84%E5%8C%BA%E5%88%AB/#django2xurl","text":"","title":"django2.x\u4e2d\u7684url"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/22%20django1.x%E5%92%8C2.x%E7%9A%84%E5%8C%BA%E5%88%AB/#django2url","text":"url\u89c4\u5219: path\u5199\u7684\u662f\u7edd\u5bf9\u5b57\u7b26\u4e32,\u8bf7\u6c42\u5730\u5740\u5fc5\u987b\u4e0e\u8def\u7531\u5730\u5740\u5b8c\u5168\u5339\u914d \u4f7f\u7528\u5c16\u62ec\u53f7 <> \u4eceurl\u4e2d\u83b7\u53d6\u53c2\u6570\u503c \u53ef\u4ee5\u4f7f\u7528\u8f6c\u6362\u5668\u6307\u5b9a\u53c2\u6570\u7c7b\u578b\uff0c\u4f8b\u5982\uff1a \u6355\u83b7\u4e00\u4e2a\u6574\u6570\u53c2\u6570age, \u82e5\u679c\u6ca1\u6709\u8f6c\u5316\u5668\uff0c\u5c06\u5339\u914d\u4efb\u4f55\u5b57\u7b26\u4e32\uff0c\u4e5f\u5305\u62ec\u8def\u5f84\u5206\u9694\u7b26 / path\u62e5\u67095\u4e2a\u8f6c\u6362\u5668: str:\u5339\u914d\u9664\u8def\u5f84\u5206\u9694\u7b26 / \u5916\u7684\u5b57\u7b26\u4e32 int:\u5339\u914d\u81ea\u7136\u6570 slug:\u5339\u914d\u5b57\u6bcd,\u6570\u5b57,\u6a2a\u6760\u53ca\u4e0b\u5212\u7ebf\u7ec4\u6210\u7684\u5b57\u7b26\u4e32 uuid:\u5339\u914duuid\u5f62\u5f0f\u7684\u6570\u636e path:\u5339\u914d\u4efb\u4f55\u5b57\u7b26\u4e32,\u5305\u62ec\u8def\u5f84\u5206\u9694\u7b26 / from django.urls import path # \u4f7f\u7528path\u5173\u952e\u5b57 urlpatterns = [ path ( 'article-<int:article_id>.html' , views . article ), ] # url\u8bf7\u6c42\u5730\u5740\u4e3a\uff1ahttp://127.0.0.1:8000/article-1.html \u81ea\u5b9a\u4e49\u8f6c\u6362\u5668\uff1a \u81ea\u5b9a\u4e49\u4e00\u4e2a\u7c7b \u7c7b\u4e2d\u5fc5\u987b\u6709\uff1a\u7c7b\u5c5e\u6027regex\uff0cto python\u65b9\u6cd5\uff0cto url\u65b9\u6cd5 regex\uff1a\u7c7b\u5c5e\u6027\uff0c\u5b57\u7b26\u4e32\u7c7b\u578b to_python(self, value)\u65b9\u6cd5\uff1avalue\u662f\u7531\u7c7b\u5c5e\u6027 regex \u6240\u5339\u914d\u5230\u7684\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u5177\u4f53\u7684Python\u53d8\u91cf\u503c\uff0c\u4ee5\u4f9bDjango\u4f20\u9012\u5230\u5bf9\u5e94\u7684\u89c6\u56fe\u51fd\u6570\u4e2d\u3002 to url(self, value)\u65b9\u6cd5\uff1a\u548c to python \u76f8\u53cd\uff0cvalue\u662f\u4e00\u4e2a\u5177\u4f53\u7684Python\u53d8\u91cf\u503c\uff0c\u8fd4\u56de\u5176\u5b57\u7b26\u4e32\uff0c\u901a\u5e38\u7528\u4e8eurl\u53cd\u5411\u5f15\u7528\u3002 \u4f8b\u5b50\uff1a class Date : regex = '^0?[1-9]$|^1[0-2]$' def to_python ( self , value ): # \u53ef\u4ee5\u5199\u4f60\u7684\u903b\u8f91\uff0c\u5bf9\u5339\u914d\u5230\u7684\u5b57\u7b26\u4e32\u8fdb\u884c\u5904\u7406 value = '2019/' + value return value def to_url ( self , value ): return ' %2s ' % value # \u5728\u4e3b\u8def\u7531\u4e0b\u5bfc\u5165,\u751f\u6210\u8f6c\u6362\u5668 from django.urls import register_converter register_converter ( Date , 'date' ) path ( 'full-year/<date:full_year>/' , views . full_year , name = \"full_year\" )","title":"django2\u4e2d\u7279\u6709\u7684url"},{"location":"django%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/22%20django1.x%E5%92%8C2.x%E7%9A%84%E5%8C%BA%E5%88%AB/#django2xurldjango1x","text":"from django.urls import re_path #\u3000\u8fd9\u91cc\u7684re_path\u7684\u7528\u6cd5\u8ddfDjango1\u7684url\u7528\u6cd5\u89c6\u5b8c\u5168\u4e00\u6837\u7684\uff0c\u5339\u914d\u6b63\u5219\u3002 urlpatterns = [ path ( 'articles/2003/' , views . special_case_2003 ), # Django2\u7684\u5199\u6cd5 re_path ( 'articles/(?P<year>[0-9] {4} )/' , views . year_archive ), # \u517c\u5bb9Django1\u7684\u5199\u6cd5 re_path ( 'articles/(?P<year>[0-9] {4} )/(?P<month>[0-9] {2} )/' , views . month_archive ), re_path ( 'articles/(?P<year>[0-9] {4} )/(?P<month>[0-9] {2} )/(?P<slug>[^/]+)/' , views . article_detail ), ] \u53c2\u8003\uff1a https://www.cnblogs.com/Zzbj/p/11150041.html","title":"django2.x\u7684url\u517c\u5bb9\u4e86django1.x\u7684\u5199\u6cd5"}]}